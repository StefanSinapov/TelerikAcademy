--------------------
1. 
	### Сложност на алгоритъма - приблизително O(N * N)
	
	### Обяснение:
		Best Case: 
			- за масив от N = 100 елемента подреден възходящо сложността е N * N 
			- влизане в if - 100%
			- влизане в else - 0%
		Worst Case: 
			- за масив от N = 100 елемента подреден низходящо сложността също е N * N
			- влизане в else - 100%
		Average Case: 
			- за масив от N = 100 елемента със случайно наредени елементи сложността е N * N
			- влизане в if ~ 50%
			- влизане в else ~ 50%

---------------------
2. 
	### Сложност на алгоритъма
		- Best Case : само нечетни числа в първата колона, тогава сложността е O(N) защото изобщо не се влиза в if(matrix[row, 0] % 2 == 0)
		- Worst Case : само четни числа в първата колона, тогава сложността е O(N * M) защото вътрешния цикъл ще бъде достигнат всеки път
		- Average Case : равен брой четни и нечетни числа в първата колона, тогава сложността е O(N * ( M / 2)) защото вътрешния цикъл ще бъде достигнат 
		в 50% от случаите.
		
---------------------
3. 
	### Сложност на алгоритъма - приблизително O(N * M)
	 
	### Обяснение: 
		- За всяко рекурсивно извикване, for-цикъла се изпълнява точно N пъти. Броят на рекурсивните извиквания е M пъти.
	