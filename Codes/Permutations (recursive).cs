/*
Малко разяснения:
Пермутация е размяна на позиции на числа. С други думи, ако тези числа са в масив, ще разменяме елементите на масива. Най-простия пример:
Ако имаме само числата 1 и 2, ще имаме просто смяната на местата им: 1,2 и 2,1.

Приемаме, че пермутацията на числата от 1 до N е всеки елемент + пермутацията на останалите числа. 
Пример:
Пермутацията на 1, 2, 3, 4 е:
1 + пермутацията на 2, 3 и 4.
2 + пермутацията на 1, 3 и 4.
3 + пермутацията на 1, 2 и 4.
4 + пермутацията на 1, 2 и 3.

Създаваме си масив от числа, които искаме да пермутираме, в нашия случай от 1 до N.

Рекурсията ще действа така:
1. Проверяваме дали текущия елемент не е стигнал края на масива. Ако това условие е изпълнено, това е края на рекурсията и принтираме масива (текущата пермутация).
2. Ако не е изпълнено, за всички елементи от текущия елемент до края на масива сменяме местата с всеки поотделно (чрез отделен метод, който по референция сменя две променливи в масив).
3. Извикваме рекурсивно метода за следващия елемент, тоест почваме от точка 1 отново.
4. За да продължим от там до където сме стигнали, преди рекурсивното извикване, е нужно отново да сменим местата на елементите (тоест да ги върнем обратно както си бяха).
След като сме имплементирали този метод, извикваме го с масива, нулевия елемент и индекса на последния елемент.
*/

using System;

class Program
{
    //Swap
    static void Swap(ref int first, ref int second)
    {
        int temp = first;
        first = second;
        second = temp;
    }

    //Permute
    static void Permute(int[] arr, int currentIndex)
    {
        if (arr.Length == currentIndex)
        {
            //Printing
            for (int i = 0; i < arr.Length; i++)
            {
                Console.Write("{0} ", arr[i]);
            }
            Console.WriteLine();
        }
        else
        {
            for (int i = currentIndex; i < arr.Length; i++)
            {
                Swap(ref arr[i], ref arr[currentIndex]);
                Permute(arr, currentIndex + 1);
                Swap(ref arr[i], ref arr[currentIndex]);
            }
        }
    }

    //Main Body
    static void Main()
    {
        int N = 3;
        int[] myArr = new int[N];

        for (int i = 1; i < myArr.Length + 1; i++)
        {
            myArr[i - 1] = i;
        }

        Permute(myArr, 0); //currentIndex = 0
    }
}