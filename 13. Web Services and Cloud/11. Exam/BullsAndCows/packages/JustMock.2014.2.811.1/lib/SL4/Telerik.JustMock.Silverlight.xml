<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Telerik.JustMock.Silverlight</name>
    </assembly>
    <members>
        <member name="T:Telerik.JustMock.Abstraction.IFluentConfig`1">
            <summary>
            Interface providing methods for setting up mock instance.
            </summary>
            <typeparam name="T">Target type</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Abstraction.IFluentConfig">
            <summary>
            Interface providing handy methods for setting up mock instance.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Abstraction.IFluentConfig.SetBehavior(Telerik.JustMock.Behavior)">
            <summary>
            Sets the behavior of the mock object.
            </summary>
            <param name="behavior">The mock behavior.</param>
            <returns>The fluent configuration.</returns>
        </member>
        <member name="M:Telerik.JustMock.Abstraction.IFluentConfig.MockConstructor">
            <summary>
            Specifies to mock the constructor.
            </summary>
            <returns>The fluent configuration.</returns>
        </member>
        <member name="M:Telerik.JustMock.Abstraction.IFluentConfig.CallConstructor(System.Object[])">
            <summary>
            Invokes the specified non-public constructor.
            </summary>
            <param name="args">Arguments to be passed to the constructor.</param>
            <returns>The fluent configuration.</returns>
        </member>
        <member name="M:Telerik.JustMock.Abstraction.IFluentConfig.AddAttributeToProxy(System.Reflection.Emit.CustomAttributeBuilder)">
            <summary>
            Add an attribute to the created proxy type.
            </summary>
            <param name="attributeBuilder">An attribute builder object containing the attribute.</param>
            <returns>The fluent configuration.</returns>
        </member>
        <member name="M:Telerik.JustMock.Abstraction.IFluentConfig.SetInterceptorFilter(System.Linq.Expressions.Expression{System.Predicate{System.Reflection.MethodInfo}})">
            <summary>
            Sets a predicate that will filter whether a dynamic proxy method will be intercepted or not.
            </summary>
            <remarks>
            Dynamic proxy methods are the methods that proxy calls from interface methods, abstract methods or
            inherited virtual methods. If a filter is not specified, then, by default, all methods are
            intercepted. If a method is not intercepted, it cannot be mocked.
            
            The interceptor filter allows you to specify which methods will be intercepted and which won't be.
            Normally, you'd want to intercept all methods. However, there are practical limitations to the
            number of members that can be intercepted on a given type. If a type has more than about 5000
            interceptable members, then the time needed to generate the proxy type may be impractically long.
            In those cases specify a filter that will remove from interception those members that you don't
            intend to mock anyway.
            </remarks>
            <param name="filter"></param>
            <returns>The fluent configuration.</returns>
        </member>
        <member name="M:Telerik.JustMock.Abstraction.IFluentConfig`1.Implements``1">
            <summary>
            Implements interface to the target mock.
            </summary>
            <returns>Reference to <see cref="T:Telerik.JustMock.Abstraction.IFluentConfig`1"/></returns>
        </member>
        <member name="M:Telerik.JustMock.Abstraction.IFluentConfig`1.CallConstructor(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
            Invokes the specified constructor. 
            </summary>
            <param name="expression"></param>
            <returns>Reference to <see cref="T:Telerik.JustMock.Abstraction.IFluentConfig`1"/></returns>
        </member>
        <member name="T:Telerik.JustMock.Action`5">
             <summary>
             Encapsulates a method that has 5 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`6">
             <summary>
             Encapsulates a method that has 6 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`7">
             <summary>
             Encapsulates a method that has 7 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`8">
             <summary>
             Encapsulates a method that has 8 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`9">
             <summary>
             Encapsulates a method that has 9 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`10">
             <summary>
             Encapsulates a method that has 10 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`11">
             <summary>
             Encapsulates a method that has 11 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`12">
             <summary>
             Encapsulates a method that has 12 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`13">
             <summary>
             Encapsulates a method that has 13 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`14">
             <summary>
             Encapsulates a method that has 14 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`15">
             <summary>
             Encapsulates a method that has 15 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`16">
             <summary>
             Encapsulates a method that has 16 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Arg">
            <summary>
            Allows specification of a matching condition for an argument, rather
            a specific value.
            </summary>
            <summary>
            Provides various argument matching shortcuts.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Arg.Matches``1(System.Linq.Expressions.Expression{System.Predicate{``0}})">
            <summary>
            Matches argument for the expected condition.
            </summary>
            <typeparam name="T">
            Contains the type of the argument.
            </typeparam>
            <param name="match">Matcher expression</param>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.Arg.IsInRange``1(``0,``0,Telerik.JustMock.RangeKind)">
            <summary>
            Matches argument for the specified range.
            </summary>
            <typeparam name="T">Type of the argument.</typeparam>
            <param name="from">starting value.</param>
            <param name="to">ending value.</param>
            <param name="kind">Kind of Range</param>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.Arg.IsAny``1">
            <summary>
            Matches argument for any value.
            </summary>
            <typeparam name="T">Type for the argument</typeparam>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.Arg.IsNull``1">
            <summary>
            Matches argument for null value.
            </summary>
            <typeparam name="T">Type for the argument</typeparam>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.Arg.Is``1(``0)">
            <summary>
            Matches the specified value. Useful for mingling concrete values and more general matchers
            in the same expression when using delegate-based overloads.
            </summary>
            <typeparam name="T">Type for the argument</typeparam>
            <param name="value">Value to match</param>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.Arg.Ref``1(``0)">
            <summary>
            Applies a matcher to a 'ref' parameter.
            
            By default, 'ref' parameters work like implicitly
            arranged return values. In other words, you arrange a method to return a given value
            through its 'ref' and 'out' parameters. Use this method to specify that the
            argument should have a matcher applied just like regular arguments.
            </summary>
            <typeparam name="T">Type for the argument</typeparam>
            <example>
            interface IHasRef
            {
                int PassRef(ref int a);
            }
            
            var mock = Mock.Create&lt;IHasRef&gt;()
            Mock.Arrange(() => mock.PassRef(ref Arg.Ref(100).Value).Returns(200);
            
            The above example arranges PassRef to return 200 whenever its argument is 100.
            </example>
            <param name="value">A matcher or a value.</param>
            <returns>A special value with member 'Value' that must be passed by ref.</returns>
        </member>
        <member name="P:Telerik.JustMock.Arg.NullOrEmpty">
            <summary>
            Matches argument for null or empty value.
            </summary>
            <returns>Null</returns>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyInt">
            <summary>
            Gets a value indicating that argument can contain any int value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyFloat">
            <summary>
            Gets a value indicating that argument can contain any float value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyDouble">
            <summary>
            Gets a value indicating that argument can contain any double value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyDecimal">
            <summary>
            Gets a value indicating that argument can contain any decimal value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyLong">
            <summary>
            Gets a value indicating that argument can contain any long value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyChar">
            <summary>
            Gets a value indicating that argument can contain any char value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyString">
            <summary>
            Gets a value indicating that argument can contain any string value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyObject">
            <summary>
            Gets a value indicating that argument can contain any object value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyShort">
            <summary>
            Gets a value indicating that argument can contain any short value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyBool">
            <summary>
            Gets a value indicating that argument can contain any bool value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyGuid">
            <summary>
            Gets a value indicating that argument can contain any Guid value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyDateTime">
            <summary>
            Gets a value indicating that argument can contain any DateTime value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyTimeSpan">
            <summary>
            Gets a value indicating that argument can contain any TimeSpan value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyByte">
            <summary>
            Gets a value indicating that argument can contain any byte value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnySByte">
            <summary>
            Gets a value indicating that argument can contain any SByte value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyUri">
            <summary>
            Gets a value indicating that argument can contain any Uri value.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Arg.OutRefResult`1">
            <summary>
            An implementation detail that allows passing ref arguments in C#
            </summary>
            <typeparam name="T">Type for the argument</typeparam>
        </member>
        <member name="F:Telerik.JustMock.Arg.OutRefResult`1.Value">
            <summary>
            Pass this member as a ref argument in C#
            </summary>
        </member>
        <member name="T:Telerik.JustMock.ArgExpr">
            <summary>
            Allows specification of a matching condition for an argument for a non-public method, rather
            a specific value.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.ArgExpr.IsAny``1">
            <summary>
            Matches argument for any value.
            </summary>
            <typeparam name="T">Type for the argument</typeparam>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.ArgExpr.Matches``1(System.Linq.Expressions.Expression{System.Predicate{``0}})">
            <summary>
            Matches argument for the expected condition.
            </summary>
            <typeparam name="T">
            Contains the type of the argument.
            </typeparam>
            <param name="match">Matcher expression</param>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.ArgExpr.IsNull``1">
            <summary>
            Matches argument for null value.
            </summary>
            <typeparam name="T">Type for the argument</typeparam>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.ArgExpr.Out``1(``0)">
            <summary>
            Returns a value from a ref or out argument
            </summary>
            <typeparam name="T">Type for the argument</typeparam>
            <param name="value">Value to match.</param>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.ArgExpr.Ref``1(``0)">
            <summary>
            Matches a value for ref argument
            </summary>
            <typeparam name="T">Type for the argument</typeparam>
            <param name="value">Value to match.</param>
            <returns>Argument type</returns>
        </member>
        <member name="T:Telerik.JustMock.Args">
            <summary>
            Specifies Mock.Assert to ignore any specific arguments.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Args.Ignore">
            <summary>
            Marks that Mock.Assert should ignore any argument match.
            </summary>
            <returns>Returns Args configuration.</returns>
        </member>
        <member name="M:Telerik.JustMock.Args.IgnoreInstance">
            <summary>
            Marks that Mock.Assert should ignore the instance match.
            </summary>
            <returns>Returns Args configuration.</returns>
        </member>
        <member name="M:Telerik.JustMock.Args.AndIgnoreArguments">
            <summary>
            Marks that Mock.Assert should ignore any argument match.
            </summary>
            <returns>Returns Args configuration.</returns>
        </member>
        <member name="M:Telerik.JustMock.Args.AndIgnoreInstance">
            <summary>
            Marks that Mock.Assert should ignore the instance match.
            </summary>
            <returns>Returns Args configuration.</returns>
        </member>
        <member name="M:Telerik.JustMock.Args.Matching(System.Delegate)">
            <summary>
            Specifies a condition on the invocation arguments. See <see cref="M:Telerik.JustMock.Args.Filter"/> for usage details.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Args.AndMatching(System.Delegate)">
            <summary>
            Specifies a condition on the invocation arguments. See <see cref="M:Telerik.JustMock.Args.Filter"/> for usage details.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Args.Matching``1(System.Func{``0,System.Boolean})">
            <summary>
            Specifies a condition on the invocation arguments. See <see cref="M:Telerik.JustMock.Args.Filter"/> for usage details.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Args.Matching``2(System.Func{``0,``1,System.Boolean})">
            <summary>
            Specifies a condition on the invocation arguments. See <see cref="M:Telerik.JustMock.Args.Filter"/> for usage details.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Args.Matching``3(System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            Specifies a condition on the invocation arguments. See <see cref="M:Telerik.JustMock.Args.Filter"/> for usage details.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Args.Matching``4(System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            Specifies a condition on the invocation arguments. See <see cref="M:Telerik.JustMock.Args.Filter"/> for usage details.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Args.Matching``5(Telerik.JustMock.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            Specifies a condition on the invocation arguments. See <see cref="M:Telerik.JustMock.Args.Filter"/> for usage details.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Args.Matching``6(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            Specifies a condition on the invocation arguments. See <see cref="M:Telerik.JustMock.Args.Filter"/> for usage details.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Args.Matching``7(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            Specifies a condition on the invocation arguments. See <see cref="M:Telerik.JustMock.Args.Filter"/> for usage details.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Args.Matching``8(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            Specifies a condition on the invocation arguments. See <see cref="M:Telerik.JustMock.Args.Filter"/> for usage details.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Args.Matching``9(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            Specifies a condition on the invocation arguments. See <see cref="M:Telerik.JustMock.Args.Filter"/> for usage details.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Args.Matching``10(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            Specifies a condition on the invocation arguments. See <see cref="M:Telerik.JustMock.Args.Filter"/> for usage details.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Args.Matching``11(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            Specifies a condition on the invocation arguments. See <see cref="M:Telerik.JustMock.Args.Filter"/> for usage details.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Args.Matching``12(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            Specifies a condition on the invocation arguments. See <see cref="M:Telerik.JustMock.Args.Filter"/> for usage details.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Args.Matching``13(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            Specifies a condition on the invocation arguments. See <see cref="M:Telerik.JustMock.Args.Filter"/> for usage details.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Args.Matching``14(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            Specifies a condition on the invocation arguments. See <see cref="M:Telerik.JustMock.Args.Filter"/> for usage details.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Args.Matching``15(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            Specifies a condition on the invocation arguments. See <see cref="M:Telerik.JustMock.Args.Filter"/> for usage details.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T15">Type of the fifteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Args.Matching``16(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            Specifies a condition on the invocation arguments. See <see cref="M:Telerik.JustMock.Args.Filter"/> for usage details.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T15">Type of the fifteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T16">Type of the sixteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="P:Telerik.JustMock.Args.IsIgnored">
            <summary>
            Gets or sets value indicating whether to ignore arguments.
            </summary>
            <remarks>
            Unless explicitly specified, the arguments will be ignored by default if there is a filter present.
            </remarks>
        </member>
        <member name="P:Telerik.JustMock.Args.IsInstanceIgnored">
            <summary>
            Gets or sets value indicating whether to ignore instance.
            </summary>
            <remarks>
            Unless explicitly specified, the instance will be ignored by default if there is a filter present
            and it takes as a first argument a 'this' argument.
            </remarks>
        </member>
        <member name="P:Telerik.JustMock.Args.Filter">
            <summary>
            Gets or sets a customized filter on the invocation arguments.
            </summary>
            <remarks>
            If a filter is specified it has to have the same signature as the asserted method,
            and may optionally have a first argument of the same type as the one declaring the method
            to receive the 'this' argument on which the method was called.
            </remarks>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.AutoMockSettings">
            <summary>
            Contains settings that modify the auto-mocking container behavior. Create an instance of this class, set all relevant properties
            and pass it to <see cref="!:Telerik.JustMock.AutoMock.MockingContainer.MockingContainer"/>
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.NinjectSettings">
            <summary>
            Contains configuration options for Ninject.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.INinjectSettings">
            <summary>
            Contains configuration options for Ninject.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.INinjectSettings.Get``1(System.String,``0)">
            <summary>
            Gets the value for the specified key.
            </summary>
            <typeparam name="T">The type of value to return.</typeparam>
            <param name="key">The setting's key.</param>
            <param name="defaultValue">The value to return if no setting is available.</param>
            <returns>The value, or the default value if none was found.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.INinjectSettings.Set(System.String,System.Object)">
            <summary>
            Sets the value for the specified key.
            </summary>
            <param name="key">The setting's key.</param>
            <param name="value">The setting's value.</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.INinjectSettings.InjectAttribute">
            <summary>
            Gets the attribute that indicates that a member should be injected.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.INinjectSettings.CachePruningInterval">
            <summary>
            Gets the interval at which the cache should be pruned.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.INinjectSettings.DefaultScopeCallback">
            <summary>
            Gets the default scope callback.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.INinjectSettings.UseReflectionBasedInjection">
            <summary>
            Gets a value indicating whether Ninject should use reflection-based injection instead of
            the (usually faster) lightweight code generation system.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.INinjectSettings.ActivationCacheDisabled">
            <summary>
            Gets or sets a value indicating whether the activation cache is disabled.
            If the activation cache is disabled less memory is used. But in some cases
            instances are activated or deactivated multiple times. e.g. in the following scenario:
            Bind{A}().ToSelf();
            Bind{IA}().ToMethod(ctx => kernel.Get{IA}();
            </summary>
            <value>
                <c>true</c> if activation cache is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.INinjectSettings.AllowNullInjection">
            <summary>
            Gets or sets a value indicating whether Null is a valid value for injection.
            By defuault this is disabled and whenever a provider returns null an exception is thrown.
            </summary>
            <value><c>true</c> if null is allowed as injected value otherwise false.</value>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.NinjectSettings.Get``1(System.String,``0)">
            <summary>
            Gets the value for the specified key.
            </summary>
            <typeparam name="T">The type of value to return.</typeparam>
            <param name="key">The setting's key.</param>
            <param name="defaultValue">The value to return if no setting is available.</param>
            <returns>The value, or the default value if none was found.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.NinjectSettings.Set(System.String,System.Object)">
            <summary>
            Sets the value for the specified key.
            </summary>
            <param name="key">The setting's key.</param>
            <param name="value">The setting's value.</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.NinjectSettings.InjectAttribute">
            <summary>
            Gets or sets the attribute that indicates that a member should be injected.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.NinjectSettings.CachePruningInterval">
            <summary>
            Gets or sets the interval at which the GC should be polled.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.NinjectSettings.DefaultScopeCallback">
            <summary>
            Gets or sets the default scope callback.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.NinjectSettings.UseReflectionBasedInjection">
            <summary>
            Gets a value indicating whether Ninject should use reflection-based injection instead of
            the (usually faster) lightweight code generation system.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.NinjectSettings.ActivationCacheDisabled">
            <summary>
            Gets or sets a value indicating whether the activation cache is disabled.
            If the activation cache is disabled less memory is used. But in some cases
            instances are activated or deactivated multiple times. e.g. in the following scenario:
            Bind{A}().ToSelf();
            Bind{IA}().ToMethod(ctx =&gt; kernel.Get{IA}();
            </summary>
            <value>
            	<c>true</c> if activation cache is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.NinjectSettings.AllowNullInjection">
            <summary>
            Gets or sets a value indicating whether Null is a valid value for injection.
            By default this is disabled and whenever a provider returns null an exception is thrown.
            </summary>
            <value>
            	<c>true</c> if null is allowed as injected value otherwise false.
            </value>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.AutoMockSettings.MockBehavior">
            <summary>
            The behavior of the mocks created by the container.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.AutoMockSettings.ConstructorArgTypes">
            <summary>
            Specifies the constructor overload which should be injected. The constructor
            to inject will be the one that has the exact same parameter types as this setting's value.
            If this setting is not specified, the default constructor scoring algorithm will be used
            to select the most appropriate constructor.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.MockingContainer`1">
            <summary>
            Entry-point class for auto mocking.
            </summary>
            <typeparam name="T">The type of the mocked class.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.StandardKernel">
            <summary>
            The standard implementation of a kernel.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.KernelBase">
            <summary>
            The base implementation of an <see cref="T:Telerik.JustMock.AutoMock.Ninject.IKernel"/>.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Syntax.BindingRoot">
            <summary>
            Provides a path to register bindings.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Disposal.DisposableObject">
            <summary>
            An object that notifies when it is disposed.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Disposal.IDisposableObject">
            <summary>
            An object that can report whether or not it is disposed.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Disposal.IDisposableObject.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Disposal.DisposableObject.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Disposal.DisposableObject.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Disposal.DisposableObject.Finalize">
            <summary>
            Releases resources before the object is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Disposal.DisposableObject.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingRoot">
            <summary>
            Provides a path to register bindings.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Syntax.IFluentSyntax">
            <summary>
            A hack to hide methods defined on <see cref="T:System.Object"/> for IntelliSense
            on fluent interfaces. Credit to Daniel Cazzulino.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IFluentSyntax.GetType">
            <summary>
            Gets the type of this instance.
            </summary>
            <returns>The type of this instance.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IFluentSyntax.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IFluentSyntax.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IFluentSyntax.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingRoot.Bind``1">
            <summary>
            Declares a binding for the specified service.
            </summary>
            <typeparam name="T">The service to bind.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingRoot.Bind``2">
            <summary>
            Declares a binding for the specified service.
            </summary>
            <typeparam name="T1">The first service to bind.</typeparam>
            <typeparam name="T2">The second service to bind.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingRoot.Bind``3">
            <summary>
            Declares a binding for the specified service.
            </summary>
            <typeparam name="T1">The first service to bind.</typeparam>
            <typeparam name="T2">The second service to bind.</typeparam>
            <typeparam name="T3">The third service to bind.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingRoot.Bind``4">
            <summary>
            Declares a binding for the specified service.
            </summary>
            <typeparam name="T1">The first service to bind.</typeparam>
            <typeparam name="T2">The second service to bind.</typeparam>
            <typeparam name="T3">The third service to bind.</typeparam>
            <typeparam name="T4">The fourth service to bind.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingRoot.Bind(System.Type[])">
            <summary>
            Declares a binding from the service to itself.
            </summary>
            <param name="services">The services to bind.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingRoot.Unbind``1">
            <summary>
            Unregisters all bindings for the specified service.
            </summary>
            <typeparam name="T">The service to unbind.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingRoot.Unbind(System.Type)">
            <summary>
            Unregisters all bindings for the specified service.
            </summary>
            <param name="service">The service to unbind.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingRoot.Rebind``1">
            <summary>
            Removes any existing bindings for the specified service, and declares a new one.
            </summary>
            <typeparam name="T1">The first service to re-bind.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingRoot.Rebind``2">
            <summary>
            Removes any existing bindings for the specified services, and declares a new one.
            </summary>
            <typeparam name="T1">The first service to re-bind.</typeparam>
            <typeparam name="T2">The second service to re-bind.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingRoot.Rebind``3">
            <summary>
            Removes any existing bindings for the specified services, and declares a new one.
            </summary>
            <typeparam name="T1">The first service to re-bind.</typeparam>
            <typeparam name="T2">The second service to re-bind.</typeparam>
            <typeparam name="T3">The third service to re-bind.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingRoot.Rebind``4">
            <summary>
            Removes any existing bindings for the specified services, and declares a new one.
            </summary>
            <typeparam name="T1">The first service to re-bind.</typeparam>
            <typeparam name="T2">The second service to re-bind.</typeparam>
            <typeparam name="T3">The third service to re-bind.</typeparam>
            <typeparam name="T4">The fourth service to re-bind.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingRoot.Rebind(System.Type[])">
            <summary>
            Removes any existing bindings for the specified services, and declares a new one.
            </summary>
            <param name="services">The services to re-bind.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingRoot.AddBinding(Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding)">
            <summary>
            Registers the specified binding.
            </summary>
            <param name="binding">The binding to add.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingRoot.RemoveBinding(Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding)">
            <summary>
            Unregisters the specified binding.
            </summary>
            <param name="binding">The binding to remove.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.BindingRoot.Bind``1">
            <summary>
            Declares a binding for the specified service.
            </summary>
            <typeparam name="T">The service to bind.</typeparam>
            <returns>The fluent syntax</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.BindingRoot.Bind``2">
            <summary>
            Declares a binding for the specified service.
            </summary>
            <typeparam name="T1">The first service to bind.</typeparam>
            <typeparam name="T2">The second service to bind.</typeparam>
            <returns>The fluent syntax</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.BindingRoot.Bind``3">
            <summary>
            Declares a binding for the specified service.
            </summary>
            <typeparam name="T1">The first service to bind.</typeparam>
            <typeparam name="T2">The second service to bind.</typeparam>
            <typeparam name="T3">The third service to bind.</typeparam>
            <returns>The fluent syntax</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.BindingRoot.Bind``4">
            <summary>
            Declares a binding for the specified service.
            </summary>
            <typeparam name="T1">The first service to bind.</typeparam>
            <typeparam name="T2">The second service to bind.</typeparam>
            <typeparam name="T3">The third service to bind.</typeparam>
            <typeparam name="T4">The fourth service to bind.</typeparam>
            <returns>The fluent syntax</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.BindingRoot.Bind(System.Type[])">
            <summary>
            Declares a binding for the specified service.
            </summary>
            <param name="services">The services to bind.</param>
            <returns>The fluent syntax</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.BindingRoot.Unbind``1">
            <summary>
            Unregisters all bindings for the specified service.
            </summary>
            <typeparam name="T">The service to unbind.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.BindingRoot.Unbind(System.Type)">
            <summary>
            Unregisters all bindings for the specified service.
            </summary>
            <param name="service">The service to unbind.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.BindingRoot.Rebind``1">
            <summary>
            Removes any existing bindings for the specified service, and declares a new one.
            </summary>
            <typeparam name="T1">The first service to re-bind.</typeparam>
            <returns>The fluent syntax</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.BindingRoot.Rebind``2">
            <summary>
            Removes any existing bindings for the specified services, and declares a new one.
            </summary>
            <typeparam name="T1">The first service to re-bind.</typeparam>
            <typeparam name="T2">The second service to re-bind.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.BindingRoot.Rebind``3">
            <summary>
            Removes any existing bindings for the specified services, and declares a new one.
            </summary>
            <typeparam name="T1">The first service to re-bind.</typeparam>
            <typeparam name="T2">The second service to re-bind.</typeparam>
            <typeparam name="T3">The third service to re-bind.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.BindingRoot.Rebind``4">
            <summary>
            Removes any existing bindings for the specified services, and declares a new one.
            </summary>
            <typeparam name="T1">The first service to re-bind.</typeparam>
            <typeparam name="T2">The second service to re-bind.</typeparam>
            <typeparam name="T3">The third service to re-bind.</typeparam>
            <typeparam name="T4">The fourth service to re-bind.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.BindingRoot.Rebind(System.Type[])">
            <summary>
            Removes any existing bindings for the specified service, and declares a new one.
            </summary>
            <param name="services">The services to re-bind.</param>
            <returns>The fluent syntax</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.BindingRoot.AddBinding(Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding)">
            <summary>
            Registers the specified binding.
            </summary>
            <param name="binding">The binding to add.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.BindingRoot.RemoveBinding(Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding)">
            <summary>
            Unregisters the specified binding.
            </summary>
            <param name="binding">The binding to remove.</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Syntax.BindingRoot.KernelInstance">
            <summary>
            Gets the kernel.
            </summary>
            <value>The kernel.</value>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.IKernel">
            <summary>
            A super-factory that can create objects of all kinds, following hints provided by <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding"/>s.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot">
            <summary>
            Provides a path to resolve instances.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot.CanResolve(Telerik.JustMock.AutoMock.Ninject.Activation.IRequest)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="request">The request.</param>
            <returns><c>True</c> if the request can be resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot.CanResolve(Telerik.JustMock.AutoMock.Ninject.Activation.IRequest,System.Boolean)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="request">The request.</param>
            <param name="ignoreImplicitBindings">if set to <c>true</c> implicit bindings are ignored.</param>
            <returns>
                <c>True</c> if the request can be resolved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot.Resolve(Telerik.JustMock.AutoMock.Ninject.Activation.IRequest)">
            <summary>
            Resolves instances for the specified request. The instances are not actually resolved
            until a consumer iterates over the enumerator.
            </summary>
            <param name="request">The request to resolve.</param>
            <returns>An enumerator of instances that match the request.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot.CreateRequest(System.Type,System.Func{Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},System.Collections.Generic.IEnumerable{Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter},System.Boolean,System.Boolean)">
            <summary>
            Creates a request for the specified service.
            </summary>
            <param name="service">The service that is being requested.</param>
            <param name="constraint">The constraint to apply to the bindings to determine if they match the request.</param>
            <param name="parameters">The parameters to pass to the resolution.</param>
            <param name="isOptional"><c>True</c> if the request is optional; otherwise, <c>false</c>.</param>
            <param name="isUnique"><c>True</c> if the request should return a unique result; otherwise, <c>false</c>.</param>
            <returns>The created request.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot.Release(System.Object)">
            <summary>
            Deactivates and releases the specified instance if it is currently managed by Ninject.
            </summary>
            <param name="instance">The instance to release.</param>
            <returns><see langword="True"/> if the instance was found and released; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.IKernel.GetModules">
            <summary>
            Gets the modules that have been loaded into the kernel.
            </summary>
            <returns>A series of loaded modules.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.IKernel.HasModule(System.String)">
            <summary>
            Determines whether a module with the specified name has been loaded in the kernel.
            </summary>
            <param name="name">The name of the module.</param>
            <returns><c>True</c> if the specified module has been loaded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.IKernel.Load(System.Collections.Generic.IEnumerable{Telerik.JustMock.AutoMock.Ninject.Modules.INinjectModule})">
            <summary>
            Loads the module(s) into the kernel.
            </summary>
            <param name="m">The modules to load.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.IKernel.Unload(System.String)">
            <summary>
            Unloads the plugin with the specified name.
            </summary>
            <param name="name">The plugin's name.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.IKernel.Inject(System.Object,Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Injects the specified existing instance, without managing its lifecycle.
            </summary>
            <param name="instance">The instance to inject.</param>
            <param name="parameters">The parameters to pass to the request.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.IKernel.GetBindings(System.Type)">
            <summary>
            Gets the bindings registered for the specified service.
            </summary>
            <param name="service">The service in question.</param>
            <returns>A series of bindings that are registered for the service.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.IKernel.BeginBlock">
            <summary>
            Begins a new activation block, which can be used to deterministically dispose resolved instances.
            </summary>
            <returns>The new activation block.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.IKernel.Settings">
            <summary>
            Gets the kernel settings.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.IKernel.Components">
            <summary>
            Gets the component container, which holds components that contribute to Ninject.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.AutoMock.Ninject.KernelBase.HandleMissingBindingLockObject">
            <summary>
            Lock used when adding missing bindings.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.KernelBase"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.#ctor(Telerik.JustMock.AutoMock.Ninject.Modules.INinjectModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.KernelBase"/> class.
            </summary>
            <param name="modules">The modules to load into the kernel.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.#ctor(Telerik.JustMock.AutoMock.Ninject.INinjectSettings,Telerik.JustMock.AutoMock.Ninject.Modules.INinjectModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.KernelBase"/> class.
            </summary>
            <param name="settings">The configuration to use.</param>
            <param name="modules">The modules to load into the kernel.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.#ctor(Telerik.JustMock.AutoMock.Ninject.Components.IComponentContainer,Telerik.JustMock.AutoMock.Ninject.INinjectSettings,Telerik.JustMock.AutoMock.Ninject.Modules.INinjectModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.KernelBase"/> class.
            </summary>
            <param name="components">The component container to use.</param>
            <param name="settings">The configuration to use.</param>
            <param name="modules">The modules to load into the kernel.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.Unbind(System.Type)">
            <summary>
            Unregisters all bindings for the specified service.
            </summary>
            <param name="service">The service to unbind.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.AddBinding(Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding)">
            <summary>
            Registers the specified binding.
            </summary>
            <param name="binding">The binding to add.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.RemoveBinding(Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding)">
            <summary>
            Unregisters the specified binding.
            </summary>
            <param name="binding">The binding to remove.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.HasModule(System.String)">
            <summary>
            Determines whether a module with the specified name has been loaded in the kernel.
            </summary>
            <param name="name">The name of the module.</param>
            <returns><c>True</c> if the specified module has been loaded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.GetModules">
            <summary>
            Gets the modules that have been loaded into the kernel.
            </summary>
            <returns>A series of loaded modules.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.Load(System.Collections.Generic.IEnumerable{Telerik.JustMock.AutoMock.Ninject.Modules.INinjectModule})">
            <summary>
            Loads the module(s) into the kernel.
            </summary>
            <param name="m">The modules to load.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.Unload(System.String)">
            <summary>
            Unloads the plugin with the specified name.
            </summary>
            <param name="name">The plugin's name.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.Inject(System.Object,Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Injects the specified existing instance, without managing its lifecycle.
            </summary>
            <param name="instance">The instance to inject.</param>
            <param name="parameters">The parameters to pass to the request.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.Release(System.Object)">
            <summary>
            Deactivates and releases the specified instance if it is currently managed by Ninject.
            </summary>
            <param name="instance">The instance to release.</param>
            <returns><see langword="True"/> if the instance was found and released; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.CanResolve(Telerik.JustMock.AutoMock.Ninject.Activation.IRequest)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="request">The request.</param>
            <returns><c>True</c> if the request can be resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.CanResolve(Telerik.JustMock.AutoMock.Ninject.Activation.IRequest,System.Boolean)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="request">The request.</param>
            <param name="ignoreImplicitBindings">if set to <c>true</c> implicit bindings are ignored.</param>
            <returns>
                <c>True</c> if the request can be resolved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.Resolve(Telerik.JustMock.AutoMock.Ninject.Activation.IRequest)">
            <summary>
            Resolves instances for the specified request. The instances are not actually resolved
            until a consumer iterates over the enumerator.
            </summary>
            <param name="request">The request to resolve.</param>
            <returns>An enumerator of instances that match the request.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.CreateRequest(System.Type,System.Func{Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},System.Collections.Generic.IEnumerable{Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter},System.Boolean,System.Boolean)">
            <summary>
            Creates a request for the specified service.
            </summary>
            <param name="service">The service that is being requested.</param>
            <param name="constraint">The constraint to apply to the bindings to determine if they match the request.</param>
            <param name="parameters">The parameters to pass to the resolution.</param>
            <param name="isOptional"><c>True</c> if the request is optional; otherwise, <c>false</c>.</param>
            <param name="isUnique"><c>True</c> if the request should return a unique result; otherwise, <c>false</c>.</param>
            <returns>The created request.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.BeginBlock">
            <summary>
            Begins a new activation block, which can be used to deterministically dispose resolved instances.
            </summary>
            <returns>The new activation block.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.GetBindings(System.Type)">
            <summary>
            Gets the bindings registered for the specified service.
            </summary>
            <param name="service">The service in question.</param>
            <returns>A series of bindings that are registered for the service.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.GetBindingPrecedenceComparer">
            <summary>
            Returns an IComparer that is used to determine resolution precedence.
            </summary>
            <returns>An IComparer that is used to determine resolution precedence.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.SatifiesRequest(Telerik.JustMock.AutoMock.Ninject.Activation.IRequest)">
            <summary>
            Returns a predicate that can determine if a given IBinding matches the request.
            </summary>
            <param name="request">The request/</param>
            <returns>A predicate that can determine if a given IBinding matches the request.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.AddComponents">
            <summary>
            Adds components to the kernel during startup.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.HandleMissingBinding(System.Type)">
            <summary>
            Attempts to handle a missing binding for a service.
            </summary>
            <param name="service">The service.</param>
            <returns><c>True</c> if the missing binding can be handled; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.HandleMissingBinding(Telerik.JustMock.AutoMock.Ninject.Activation.IRequest)">
            <summary>
            Attempts to handle a missing binding for a request.
            </summary>
            <param name="request">The request.</param>
            <returns><c>True</c> if the missing binding can be handled; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.TypeIsSelfBindable(System.Type)">
            <summary>
            Returns a value indicating whether the specified service is self-bindable.
            </summary>
            <param name="service">The service.</param>
            <returns><see langword="True"/> if the type is self-bindable; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.KernelBase.CreateContext(Telerik.JustMock.AutoMock.Ninject.Activation.IRequest,Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding)">
            <summary>
            Creates a context for the specified request and binding.
            </summary>
            <param name="request">The request.</param>
            <param name="binding">The binding.</param>
            <returns>The created context.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.KernelBase.Settings">
            <summary>
            Gets the kernel settings.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.KernelBase.Components">
            <summary>
            Gets the component container, which holds components that contribute to Ninject.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.StandardKernel.#ctor(Telerik.JustMock.AutoMock.Ninject.Modules.INinjectModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.StandardKernel"/> class.
            </summary>
            <param name="modules">The modules to load into the kernel.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.StandardKernel.#ctor(Telerik.JustMock.AutoMock.Ninject.INinjectSettings,Telerik.JustMock.AutoMock.Ninject.Modules.INinjectModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.StandardKernel"/> class.
            </summary>
            <param name="settings">The configuration to use.</param>
            <param name="modules">The modules to load into the kernel.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.StandardKernel.AddComponents">
            <summary>
            Adds components to the kernel during startup.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.StandardKernel.KernelInstance">
            <summary>
            Gets the kernel.
            </summary>
            <value>The kernel.</value>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.MockingContainer`1.#ctor(Telerik.JustMock.AutoMock.AutoMockSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.MockingContainer`1"/> class.
            </summary>
            <param name="settings">Optional settings that modify the way the auto-mocking container works.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.MockingContainer`1.Arrange``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Entry-point for setting expectations.
            </summary>
            <typeparam name="TInterface">Mocking interface</typeparam>
            <param name="expression">Target expression</param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.FuncExpectation`1"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.MockingContainer`1.Arrange``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Entry-point for setting expectations.
            </summary>
            <typeparam name="TInterface">
            Mocking interface
            </typeparam>
            <param name="expression">Target expression</param>
            <param name="take">Specifics the instance to resolve</param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.ActionExpectation"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.MockingContainer`1.AssertAll">
            <summary>
            Asserts all expected setups.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.MockingContainer`1.Assert">
            <summary>
            Asserts all expected calls that are marked as must or
            to be occurred a certain number of times.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.MockingContainer`1.Assert``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Asserts the specific call
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <param name="expression">Target expression.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.MockingContainer`1.Assert``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Asserts the specific call
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <param name="expression">Target expression</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.MockingContainer`1.Assert``1">
            <summary>
            Asserts a specific dependency
            </summary>
            <typeparam name="TService">Service type.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.MockingContainer`1.Assert``1(System.String)">
            <summary>
            Asserts a specific dependency
            </summary>
            <param name="bindingName">Name.</param>
            <typeparam name="TService">Service Type.</typeparam>
            <param name="take">Specifies the instance to resolve.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.MockingContainer`1.Assert``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Telerik.JustMock.Occurs)">
            <summary>
            Asserts the specific call
            </summary>
            <typeparam name="TService">Service Type.</typeparam>
            <param name="expression">Target expression.</param>
            <param name="occurs">Specifies the number of times a mock call should occur.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.MockingContainer`1.Assert``1(System.Linq.Expressions.Expression{System.Action{``0}},Telerik.JustMock.Occurs)">
            <summary>
            Asserts the specific call
            </summary>
            <typeparam name="TService">Service Type.</typeparam>
            <param name="expression">Target expression</param>
            <param name="occurs">Specifies the number of times a mock call should occur.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.MockingContainer`1.Assert``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Asserts the specific call
            </summary>
            <typeparam name="TService">Service Type.</typeparam>
            <param name="bindingName">Name.</param>
            <param name="expression">Target expression.</param>
            <param name="take">Specifies the instance to resolve.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.MockingContainer`1.Assert``1(System.String,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Asserts the specific call
            </summary>
            <typeparam name="TService">Service Type.</typeparam>
            <param name="bindingName">Name.</param>
            <param name="expression">Target expression.</param>
            <param name="take">Specifies the instance to resolve.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.MockingContainer`1.Assert``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Telerik.JustMock.Occurs)">
            <summary>
            Asserts the specific call
            </summary>
            <typeparam name="TService">Service Type.</typeparam>
            <param name="bindingName">Name.</param>
            <param name="expression">Target expression.</param>
            <param name="occurs">Specifies the number of times a mock call should occur.</param>
            <param name="take">Specifies the instance to resolve.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.MockingContainer`1.Assert``1(System.String,System.Linq.Expressions.Expression{System.Action{``0}},Telerik.JustMock.Occurs)">
            <summary>
            Asserts the specific call
            </summary>
            <typeparam name="TService">Service Type.</typeparam>
            <param name="bindingName">Name.</param>
            <param name="expression">Target expression.</param>
            <param name="occurs">Specifies the number of times a mock call should occur.</param>
            <param name="take">Specifies the instance to resolve.</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.MockingContainer`1.Settings">
            <summary>
            Gets the kernel settings.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.MockingContainer`1.Instance">
            <summary>
            Resolves the instance of the underlying type with all dependencies injected.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Components.INinjectComponent">
            <summary>
            A component that contributes to the internals of Ninject.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Components.INinjectComponent.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Resolvers.IMissingBindingResolver">
            <summary>
             Contains logic about which bindings to use for a given service request
             when other attempts have failed.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Resolvers.IMissingBindingResolver.Resolve(Telerik.JustMock.AutoMock.Ninject.Infrastructure.Multimap{System.Type,Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding},Telerik.JustMock.AutoMock.Ninject.Activation.IRequest)">
            <summary>
            Returns any bindings from the specified collection that match the specified request.
            </summary>
            <param name="bindings">The multimap of all registered bindings.</param>
            <param name="request">The request in question.</param>
            <returns>The series of matching bindings.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.IProvider">
            <summary>
            Creates instances of services.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.IProvider.Create(Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Creates an instance within the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>The created instance.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.IProvider.Type">
            <summary>
            Gets the type (or prototype) of instances the provider creates.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.NinjectMockSyntaxExtensions.ToMock``1(Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax{``0})">
            <summary>
            Indicates that the service should be mocked. The mock is activated in the singleton scope.
            </summary>
            <typeparam name="T">The service type.</typeparam>
            <param name="builder">The fluent syntax.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.NinjectMockSyntaxExtensions.AndArrange``1(Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingOnSyntax{``0},System.Action{``0})">
            <summary>
            Specifies the arrangements to make before the mock is injected.
            </summary>
            <typeparam name="T">The service type.</typeparam>
            <param name="arrangeActions">A delegate that contains the arrangements to make. Usually,
            it will contain a series of Mock.Arrange statements for the necessary arrangements and expectations.</param>
            <param name="builder">The fluent syntax.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.NinjectMockSyntaxExtensions.InjectedIntoParameter``1(Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax{``0},System.String)">
            <summary>
            Specifies that the binding should be considered only when injecting into a constructor parameter with the given name.
            </summary>
            <typeparam name="T">The service type.</typeparam>
            <param name="builder">The fluent syntax.</param>
            <param name="parameterName">The name of the constructor parameter.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.NinjectMockSyntaxExtensions.InjectedIntoProperty``3(Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax{``0},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Specifies that the binding should be considered only when injecting into the given property.
            </summary>
            <typeparam name="T">The service type.</typeparam>
            <typeparam name="TTarget">The type defining the property.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="builder">The fluent syntax.</param>
            <param name="propertyExpr">An expression referencing the property, e.g. <code>(TransactionService s) => s.CreditCardService</code></param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.NinjectMockSyntaxExtensions.InjectedIntoProperty``1(Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax{``0},System.String)">
            <summary>
            Specifies that the binding should be considered only when injecting into a property with the given name.
            </summary>
            <typeparam name="T">The service type.</typeparam>
            <param name="builder">The fluent syntax.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.ActivationException">
            <summary>
            Indicates that an error occured during activation of an instance.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ActivationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.ActivationException"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ActivationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.ActivationException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ActivationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.ActivationException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Blocks.ActivationBlock">
            <summary>
            A block used for deterministic disposal of activated instances. When the block is
            disposed, all instances activated via it will be deactivated.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Blocks.IActivationBlock">
            <summary>
            A block used for deterministic disposal of activated instances. When the block is
            disposed, all instances activated via it will be deactivated.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Disposal.INotifyWhenDisposed">
            <summary>
            An object that fires an event when it is disposed.
            </summary>
        </member>
        <member name="E:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Disposal.INotifyWhenDisposed.Disposed">
            <summary>
            Occurs when the object is disposed.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Blocks.ActivationBlock.#ctor(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Activation.Blocks.ActivationBlock"/> class.
            </summary>
            <param name="parent">The parent resolution root.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Blocks.ActivationBlock.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Blocks.ActivationBlock.CanResolve(Telerik.JustMock.AutoMock.Ninject.Activation.IRequest)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="request">The request.</param>
            <returns><c>True</c> if the request can be resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Blocks.ActivationBlock.CanResolve(Telerik.JustMock.AutoMock.Ninject.Activation.IRequest,System.Boolean)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="request">The request.</param>
            <param name="ignoreImplicitBindings">if set to <c>true</c> implicit bindings are ignored.</param>
            <returns>
                <c>True</c> if the request can be resolved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Blocks.ActivationBlock.Resolve(Telerik.JustMock.AutoMock.Ninject.Activation.IRequest)">
            <summary>
            Resolves instances for the specified request. The instances are not actually resolved
            until a consumer iterates over the enumerator.
            </summary>
            <param name="request">The request to resolve.</param>
            <returns>An enumerator of instances that match the request.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Blocks.ActivationBlock.CreateRequest(System.Type,System.Func{Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},System.Collections.Generic.IEnumerable{Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter},System.Boolean,System.Boolean)">
            <summary>
            Creates a request for the specified service.
            </summary>
            <param name="service">The service that is being requested.</param>
            <param name="constraint">The constraint to apply to the bindings to determine if they match the request.</param>
            <param name="parameters">The parameters to pass to the resolution.</param>
            <param name="isOptional"><c>True</c> if the request is optional; otherwise, <c>false</c>.</param>
            <param name="isUnique"><c>True</c> if the request should return a unique result; otherwise, <c>false</c>.</param>
            <returns>The created request.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Blocks.ActivationBlock.Release(System.Object)">
            <summary>
            Deactivates and releases the specified instance if it is currently managed by Ninject.
            </summary>
            <param name="instance">The instance to release.</param>
            <returns><see langword="True"/> if the instance was found and released; otherwise <see langword="false"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Blocks.ActivationBlock.Parent">
            <summary>
            Gets or sets the parent resolution root (usually the kernel).
            </summary>
        </member>
        <member name="E:Telerik.JustMock.AutoMock.Ninject.Activation.Blocks.ActivationBlock.Disposed">
            <summary>
            Occurs when the object is disposed.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ActivationCache">
            <summary>
            Stores the objects that were activated
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Components.NinjectComponent">
            <summary>
            A component that contributes to the internals of Ninject.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Components.NinjectComponent.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.IActivationCache">
            <summary>
            Stores the objects that were activated
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.IActivationCache.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.IActivationCache.AddActivatedInstance(System.Object)">
            <summary>
            Adds an activated instance.
            </summary>
            <param name="instance">The instance to be added.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.IActivationCache.AddDeactivatedInstance(System.Object)">
            <summary>
            Adds an deactivated instance.
            </summary>
            <param name="instance">The instance to be added.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.IActivationCache.IsActivated(System.Object)">
            <summary>
            Determines whether the specified instance is activated.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
                <c>true</c> if the specified instance is activated; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.IActivationCache.IsDeactivated(System.Object)">
            <summary>
            Determines whether the specified instance is deactivated.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
                <c>true</c> if the specified instance is deactivated; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.IPruneable">
            <summary>
            An object that is prunealble.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.IPruneable.Prune">
            <summary>
            Removes instances from the cache which should no longer be re-used.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ActivationCache.activatedObjects">
            <summary>
            The objects that were activated as reference equal weak references.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ActivationCache.deactivatedObjects">
            <summary>
            The objects that were activated as reference equal weak references.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ActivationCache.#ctor(Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ICachePruner)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ActivationCache"/> class.
            </summary>
            <param name="cachePruner">The cache pruner.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ActivationCache.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ActivationCache.AddActivatedInstance(System.Object)">
            <summary>
            Adds an activated instance.
            </summary>
            <param name="instance">The instance to be added.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ActivationCache.AddDeactivatedInstance(System.Object)">
            <summary>
            Adds an deactivated instance.
            </summary>
            <param name="instance">The instance to be added.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ActivationCache.IsActivated(System.Object)">
            <summary>
            Determines whether the specified instance is activated.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
                <c>true</c> if the specified instance is activated; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ActivationCache.IsDeactivated(System.Object)">
            <summary>
            Determines whether the specified instance is deactivated.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
                <c>true</c> if the specified instance is deactivated; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ActivationCache.Prune">
            <summary>
            Prunes this instance.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ActivationCache.RemoveDeadObjects(System.Collections.Generic.HashSet{System.Object})">
            <summary>
            Removes all dead objects.
            </summary>
            <param name="objects">The objects collection to be freed of dead objects.</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ActivationCache.ActivatedObjectCount">
            <summary>
            Gets the activated object count.
            </summary>
            <value>The activated object count.</value>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ActivationCache.DeactivatedObjectCount">
            <summary>
            Gets the deactivated object count.
            </summary>
            <value>The deactivated object count.</value>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache">
            <summary>
            Tracks instances for re-use in certain scopes.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ICache">
            <summary>
            Tracks instances for re-use in certain scopes.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ICache.Remember(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference)">
            <summary>
            Stores the specified instance in the cache.
            </summary>
            <param name="context">The context to store.</param>
            <param name="reference">The instance reference.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ICache.TryGet(Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Tries to retrieve an instance to re-use in the specified context.
            </summary>
            <param name="context">The context that is being activated.</param>
            <returns>The instance for re-use, or <see langword="null"/> if none has been stored.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ICache.Release(System.Object)">
            <summary>
            Deactivates and releases the specified instance from the cache.
            </summary>
            <param name="instance">The instance to release.</param>
            <returns><see langword="True"/> if the instance was found and released; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ICache.Clear(System.Object)">
            <summary>
            Immediately deactivates and removes all instances in the cache that are owned by
            the specified scope.
            </summary>
            <param name="scope">The scope whose instances should be deactivated.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ICache.Clear">
            <summary>
            Immediately deactivates and removes all instances in the cache, regardless of scope.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ICache.Count">
            <summary>
            Gets the number of entries currently stored in the cache.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.entries">
            <summary>
            Contains all cached instances.
            This is a dictionary of scopes to a multimap for bindings to cache entries.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.#ctor(Telerik.JustMock.AutoMock.Ninject.Activation.IPipeline,Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ICachePruner)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache"/> class.
            </summary>
            <param name="pipeline">The pipeline component.</param>
            <param name="cachePruner">The cache pruner component.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.Remember(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference)">
            <summary>
            Stores the specified context in the cache.
            </summary>
            <param name="context">The context to store.</param>
            <param name="reference">The instance reference.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.TryGet(Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Tries to retrieve an instance to re-use in the specified context.
            </summary>
            <param name="context">The context that is being activated.</param>
            <returns>The instance for re-use, or <see langword="null"/> if none has been stored.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.Release(System.Object)">
            <summary>
            Deactivates and releases the specified instance from the cache.
            </summary>
            <param name="instance">The instance to release.</param>
            <returns><see langword="True"/> if the instance was found and released; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.Prune">
            <summary>
            Removes instances from the cache which should no longer be re-used.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.Clear(System.Object)">
            <summary>
            Immediately deactivates and removes all instances in the cache that are owned by
            the specified scope.
            </summary>
            <param name="scope">The scope whose instances should be deactivated.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.Clear">
            <summary>
            Immediately deactivates and removes all instances in the cache, regardless of scope.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.GetAllBindingEntries(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingConfiguration,System.Collections.Generic.ICollection{Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.CacheEntry}}})">
            <summary>
            Gets all entries for a binding withing the selected scope.
            </summary>
            <param name="bindings">The bindings.</param>
            <returns>All bindings of a binding.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.GetAllCacheEntries">
            <summary>
            Gets all cache entries.
            </summary>
            <returns>Returns all cache entries.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.Forget(System.Collections.Generic.IEnumerable{Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.CacheEntry})">
            <summary>
            Forgets the specified cache entries.
            </summary>
            <param name="cacheEntries">The cache entries.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.Forget(Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.CacheEntry)">
            <summary>
            Forgets the specified entry.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.Pipeline">
            <summary>
            Gets the pipeline component.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.Count">
            <summary>
            Gets the number of entries currently stored in the cache.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.CacheEntry">
            <summary>
            An entry in the cache.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.CacheEntry.#ctor(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.CacheEntry"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">The instance reference.</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.CacheEntry.Context">
            <summary>
            Gets the context of the instance.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.Cache.CacheEntry.Reference">
            <summary>
            Gets the instance reference.
            </summary>
            <value>The instance reference.</value>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.GarbageCollectionCachePruner">
            <summary>
            Uses a <see cref="T:System.Threading.Timer"/> and some <see cref="T:System.WeakReference"/> magic to poll
            the garbage collector to see if it has run.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ICachePruner">
            <summary>
            Prunes instances from an <see cref="T:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ICache"/> based on environmental information.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ICachePruner.Start(Telerik.JustMock.AutoMock.Ninject.Activation.Caching.IPruneable)">
            <summary>
            Starts pruning the specified cache based on the rules of the pruner.
            </summary>
            <param name="cache">The cache that will be pruned.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ICachePruner.Stop">
            <summary>
            Stops pruning.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.GarbageCollectionCachePruner.indicator">
            <summary>
            indicator for if GC has been run.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.GarbageCollectionCachePruner.caches">
            <summary>
            The caches that are being pruned.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.GarbageCollectionCachePruner.timer">
            <summary>
            The timer used to trigger the cache pruning
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.GarbageCollectionCachePruner.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.GarbageCollectionCachePruner.Start(Telerik.JustMock.AutoMock.Ninject.Activation.Caching.IPruneable)">
            <summary>
            Starts pruning the specified pruneable based on the rules of the pruner.
            </summary>
            <param name="pruneable">The pruneable that will be pruned.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.GarbageCollectionCachePruner.Stop">
            <summary>
            Stops pruning.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.WeakReferenceEqualityComparer">
            <summary>
            Compares ReferenceEqualWeakReferences to objects
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.WeakReferenceEqualityComparer.Equals(System.Object,System.Object)">
            <summary>
            Returns if the specifed objects are equal.
            </summary>
            <param name="x">The first object.</param>
            <param name="y">The second object.</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Caching.WeakReferenceEqualityComparer.GetHashCode(System.Object)">
            <summary>
            Returns the hash code of the specified object.
            </summary>
            <param name="obj">The object for which the hash code is calculated.</param>
            <returns>The hash code of the specified object.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Context">
            <summary>
            Contains information about the activation of a single instance.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.IContext">
            <summary>
            Contains information about the activation of a single instance.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.IContext.GetProvider">
            <summary>
            Gets the provider that should be used to create the instance for this context.
            </summary>
            <returns>The provider that should be used.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.IContext.GetScope">
            <summary>
            Gets the scope for the context that "owns" the instance activated therein.
            </summary>
            <returns>The object that acts as the scope.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.IContext.Resolve">
            <summary>
            Resolves this instance for this context.
            </summary>
            <returns>The resolved instance.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.IContext.Kernel">
            <summary>
            Gets the kernel that is driving the activation.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.IContext.Request">
            <summary>
            Gets the request.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.IContext.Binding">
            <summary>
            Gets the binding.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.IContext.Plan">
            <summary>
            Gets or sets the activation plan.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.IContext.Parameters">
            <summary>
            Gets the parameters that were passed to manipulate the activation process.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.IContext.GenericArguments">
            <summary>
            Gets the generic arguments for the request, if any.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.IContext.HasInferredGenericArguments">
            <summary>
            Gets a value indicating whether the request involves inferred generic arguments.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Context.#ctor(Telerik.JustMock.AutoMock.Ninject.IKernel,Telerik.JustMock.AutoMock.Ninject.Activation.IRequest,Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding,Telerik.JustMock.AutoMock.Ninject.Activation.Caching.ICache,Telerik.JustMock.AutoMock.Ninject.Planning.IPlanner,Telerik.JustMock.AutoMock.Ninject.Activation.IPipeline)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Activation.Context"/> class.
            </summary>
            <param name="kernel">The kernel managing the resolution.</param>
            <param name="request">The context's request.</param>
            <param name="binding">The context's binding.</param>
            <param name="cache">The cache component.</param>
            <param name="planner">The planner component.</param>
            <param name="pipeline">The pipeline component.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Context.GetScope">
            <summary>
            Gets the scope for the context that "owns" the instance activated therein.
            </summary>
            <returns>The object that acts as the scope.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Context.GetProvider">
            <summary>
            Gets the provider that should be used to create the instance for this context.
            </summary>
            <returns>The provider that should be used.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Context.Resolve">
            <summary>
            Resolves the instance associated with this hook.
            </summary>
            <returns>The resolved instance.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Context.Kernel">
            <summary>
            Gets the kernel that is driving the activation.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Context.Request">
            <summary>
            Gets the request.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Context.Binding">
            <summary>
            Gets the binding.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Context.Plan">
            <summary>
            Gets or sets the activation plan.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Context.Parameters">
            <summary>
            Gets the parameters that were passed to manipulate the activation process.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Context.GenericArguments">
            <summary>
            Gets the generic arguments for the request, if any.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Context.HasInferredGenericArguments">
            <summary>
            Gets a value indicating whether the request involves inferred generic arguments.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Context.Cache">
            <summary>
            Gets or sets the cache component.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Context.Planner">
            <summary>
            Gets or sets the planner component.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Context.Pipeline">
            <summary>
            Gets or sets the pipeline component.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference">
            <summary>
            Holds an instance during activation or after it has been cached.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference.Is``1">
            <summary>
            Returns a value indicating whether the instance is of the specified type.
            </summary>
            <typeparam name="T">The type in question.</typeparam>
            <returns><see langword="True"/> if the instance is of the specified type, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference.As``1">
            <summary>
            Returns the instance as the specified type.
            </summary>
            <typeparam name="T">The requested type.</typeparam>
            <returns>The instance.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference.IfInstanceIs``1(System.Action{``0})">
            <summary>
            Executes the specified action if the instance if of the specified type.
            </summary>
            <typeparam name="T">The type in question.</typeparam>
            <param name="action">The action to execute.</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference.Instance">
            <summary>
            Gets or sets the instance.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.IPipeline">
            <summary>
            Drives the activation (injection, etc.) of an instance.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.IPipeline.Activate(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference)">
            <summary>
            Activates the instance in the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">The instance reference.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.IPipeline.Deactivate(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference)">
            <summary>
            Deactivates the instance in the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">The instance reference.</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.IPipeline.Strategies">
            <summary>
            Gets the strategies that contribute to the activation and deactivation processes.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.IProvider`1">
            <summary>
            Provides instances ot the type T
            </summary>
            <typeparam name="T">The type provides by this implementation.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.IRequest">
            <summary>
            Describes the request for a service resolution.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.IRequest.Matches(Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding)">
            <summary>
            Determines whether the specified binding satisfies the constraint defined on this request.
            </summary>
            <param name="binding">The binding.</param>
            <returns><c>True</c> if the binding satisfies the constraint; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.IRequest.GetScope">
            <summary>
            Gets the scope if one was specified in the request.
            </summary>
            <returns>The object that acts as the scope.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.IRequest.CreateChild(System.Type,Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget)">
            <summary>
            Creates a child request.
            </summary>
            <param name="service">The service that is being requested.</param>
            <param name="parentContext">The context in which the request was made.</param>
            <param name="target">The target that will receive the injection.</param>
            <returns>The child request.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.IRequest.Service">
            <summary>
            Gets the service that was requested.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.IRequest.ParentRequest">
            <summary>
            Gets the parent request.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.IRequest.ParentContext">
            <summary>
            Gets the parent context.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.IRequest.Target">
            <summary>
            Gets the target that will receive the injection, if any.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.IRequest.Constraint">
            <summary>
            Gets the constraint that will be applied to filter the bindings used for the request.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.IRequest.Parameters">
            <summary>
            Gets the parameters that affect the resolution.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.IRequest.ActiveBindings">
            <summary>
            Gets the stack of bindings which have been activated by either this request or its ancestors.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.IRequest.Depth">
            <summary>
            Gets the recursive depth at which this request occurs.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.IRequest.IsOptional">
            <summary>
            Gets or sets value indicating whether the request is optional.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.IRequest.IsUnique">
            <summary>
            Gets or sets value indicating whether the request should return a unique result.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Pipeline">
            <summary>
            Drives the activation (injection, etc.) of an instance.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.AutoMock.Ninject.Activation.Pipeline.activationCache">
            <summary>
            The activation cache.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Pipeline.#ctor(System.Collections.Generic.IEnumerable{Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.IActivationStrategy},Telerik.JustMock.AutoMock.Ninject.Activation.Caching.IActivationCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Activation.Pipeline"/> class.
            </summary>
            <param name="strategies">The strategies to execute during activation and deactivation.</param>
            <param name="activationCache">The activation cache.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Pipeline.Activate(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference)">
            <summary>
            Activates the instance in the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">The instance reference.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Pipeline.Deactivate(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference)">
            <summary>
            Deactivates the instance in the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">The instance reference.</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Pipeline.Strategies">
            <summary>
            Gets the strategies that contribute to the activation and deactivation processes.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Provider`1">
            <summary>
            A simple abstract provider for instances of a specific type.
            </summary>
            <typeparam name="T">The type of instances the provider creates.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Provider`1.Create(Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Creates an instance within the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>The created instance.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Provider`1.CreateInstance(Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Creates an instance within the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>The created instance.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Provider`1.Type">
            <summary>
            Gets the type (or prototype) of instances the provider creates.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Providers.CallbackProvider`1">
            <summary>
            A provider that delegates to a callback method to create instances.
            </summary>
            <typeparam name="T">The type of instances the provider creates.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Providers.CallbackProvider`1.#ctor(System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,`0})">
            <summary>
            Initializes a new instance of the CallbackProvider&lt;T&gt; class.
            </summary>
            <param name="method">The callback method that will be called to create instances.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Providers.CallbackProvider`1.CreateInstance(Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Invokes the callback method to create an instance.
            </summary>
            <param name="context">The context.</param>
            <returns>The created instance.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Providers.CallbackProvider`1.Method">
            <summary>
            Gets the callback method used by the provider.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Providers.ConstantProvider`1">
            <summary>
            A provider that always returns the same constant value.
            </summary>
            <typeparam name="T">The type of value that is returned.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Providers.ConstantProvider`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the ConstantProvider&lt;T&gt; class.
            </summary>
            <param name="value">The value that the provider should return.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Providers.ConstantProvider`1.CreateInstance(Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Creates an instance within the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>The constant value this provider returns.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Providers.ConstantProvider`1.Value">
            <summary>
            Gets the value that the provider will return.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Providers.StandardProvider">
            <summary>
            The standard provider for types, which activates instances via a <see cref="T:Telerik.JustMock.AutoMock.Ninject.Activation.IPipeline"/>.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Providers.StandardProvider.#ctor(System.Type,Telerik.JustMock.AutoMock.Ninject.Planning.IPlanner,Telerik.JustMock.AutoMock.Ninject.Selection.Heuristics.IConstructorScorer)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Activation.Providers.StandardProvider"/> class.
            </summary>
            <param name="type">The type (or prototype) of instances the provider creates.</param>
            <param name="planner">The planner component.</param>
            <param name="constructorScorer">The constructor scorer component.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Providers.StandardProvider.Create(Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Creates an instance within the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>The created instance.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Providers.StandardProvider.GetValue(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget)">
            <summary>
            Gets the value to inject into the specified target.
            </summary>
            <param name="context">The context.</param>
            <param name="target">The target.</param>
            <returns>The value to inject into the specified target.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Providers.StandardProvider.GetImplementationType(System.Type)">
            <summary>
            Gets the implementation type that the provider will activate an instance of
            for the specified service.
            </summary>
            <param name="service">The service in question.</param>
            <returns>The implementation type that will be activated.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Providers.StandardProvider.GetCreationCallback(System.Type)">
            <summary>
            Gets a callback that creates an instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Activation.Providers.StandardProvider"/>
            for the specified type.
            </summary>
            <param name="prototype">The prototype the provider instance will create.</param>
            <returns>The created callback.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Providers.StandardProvider.GetCreationCallback(System.Type,System.Reflection.ConstructorInfo)">
            <summary>
            Gets a callback that creates an instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Activation.Providers.StandardProvider"/>
            for the specified type and constructor.
            </summary>
            <param name="prototype">The prototype the provider instance will create.</param>
            <param name="constructor">The constructor.</param>
            <returns>The created callback.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Providers.StandardProvider.Type">
            <summary>
            Gets the type (or prototype) of instances the provider creates.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Providers.StandardProvider.Planner">
            <summary>
            Gets or sets the planner component.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Providers.StandardProvider.ConstructorScorer">
            <summary>
            Gets or sets the selector component.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Request">
            <summary>
            Describes the request for a service resolution.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Request.#ctor(System.Type,System.Func{Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},System.Collections.Generic.IEnumerable{Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter},System.Func{System.Object},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Activation.Request"/> class.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="constraint">The constraint that will be applied to filter the bindings used for the request.</param>
            <param name="parameters">The parameters that affect the resolution.</param>
            <param name="scopeCallback">The scope callback, if an external scope was specified.</param>
            <param name="isOptional"><c>True</c> if the request is optional; otherwise, <c>false</c>.</param>
            <param name="isUnique"><c>True</c> if the request should return a unique result; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Request.#ctor(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,System.Type,Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget,System.Func{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Activation.Request"/> class.
            </summary>
            <param name="parentContext">The parent context.</param>
            <param name="service">The service that was requested.</param>
            <param name="target">The target that will receive the injection.</param>
            <param name="scopeCallback">The scope callback, if an external scope was specified.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Request.Matches(Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding)">
            <summary>
            Determines whether the specified binding satisfies the constraints defined on this request.
            </summary>
            <param name="binding">The binding.</param>
            <returns><c>True</c> if the binding satisfies the constraints; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Request.GetScope">
            <summary>
            Gets the scope if one was specified in the request.
            </summary>
            <returns>The object that acts as the scope.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Request.CreateChild(System.Type,Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget)">
            <summary>
            Creates a child request.
            </summary>
            <param name="service">The service that is being requested.</param>
            <param name="parentContext">The context in which the request was made.</param>
            <param name="target">The target that will receive the injection.</param>
            <returns>The child request.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Request.Service">
            <summary>
            Gets the service that was requested.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Request.ParentRequest">
            <summary>
            Gets the parent request.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Request.ParentContext">
            <summary>
            Gets the parent context.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Request.Target">
            <summary>
            Gets the target that will receive the injection, if any.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Request.Constraint">
            <summary>
            Gets the constraint that will be applied to filter the bindings used for the request.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Request.Parameters">
            <summary>
            Gets the parameters that affect the resolution.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Request.ActiveBindings">
            <summary>
            Gets the stack of bindings which have been activated by either this request or its ancestors.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Request.Depth">
            <summary>
            Gets the recursive depth at which this request occurs.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Request.IsOptional">
            <summary>
            Gets or sets value indicating whether the request is optional.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Request.IsUnique">
            <summary>
            Gets or sets value indicating whether the request is for a single service.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Request.ScopeCallback">
            <summary>
            Gets the callback that resolves the scope for the request, if an external scope was provided.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.ActivationCacheStrategy">
            <summary>
            Adds all activated instances to the activation cache.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.IActivationStrategy">
            <summary>
            Contributes to a <see cref="T:Telerik.JustMock.AutoMock.Ninject.Activation.IPipeline"/>, and is called during the activation
            and deactivation of an instance.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.IActivationStrategy.Activate(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference)">
            <summary>
            Contributes to the activation of the instance in the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being activated.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.IActivationStrategy.Deactivate(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference)">
            <summary>
            Contributes to the deactivation of the instance in the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being deactivated.</param>
        </member>
        <member name="F:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.ActivationCacheStrategy.activationCache">
            <summary>
            The activation cache.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.ActivationCacheStrategy.#ctor(Telerik.JustMock.AutoMock.Ninject.Activation.Caching.IActivationCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.ActivationCacheStrategy"/> class.
            </summary>
            <param name="activationCache">The activation cache.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.ActivationCacheStrategy.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.ActivationCacheStrategy.Activate(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference)">
            <summary>
            Contributes to the activation of the instance in the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being activated.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.ActivationCacheStrategy.Deactivate(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference)">
            <summary>
            Contributes to the deactivation of the instance in the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being deactivated.</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.ActivationCacheStrategy.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>The ninject settings.</value>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.ActivationStrategy">
            <summary>
            Contributes to a <see cref="T:Telerik.JustMock.AutoMock.Ninject.Activation.IPipeline"/>, and is called during the activation
            and deactivation of an instance.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.ActivationStrategy.Activate(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference)">
            <summary>
            Contributes to the activation of the instance in the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being activated.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.ActivationStrategy.Deactivate(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference)">
            <summary>
            Contributes to the deactivation of the instance in the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being deactivated.</param>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.BindingActionStrategy">
            <summary>
            Executes actions defined on the binding during activation and deactivation.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.BindingActionStrategy.Activate(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference)">
            <summary>
            Calls the activation actions defined on the binding.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being activated.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.BindingActionStrategy.Deactivate(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference)">
            <summary>
            Calls the deactivation actions defined on the binding.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being deactivated.</param>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.DisposableStrategy">
            <summary>
            During deactivation, disposes instances that implement <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.DisposableStrategy.Deactivate(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference)">
            <summary>
            Disposes the specified instance.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being deactivated.</param>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.InitializableStrategy">
            <summary>
            During activation, initializes instances that implement <see cref="T:Telerik.JustMock.AutoMock.Ninject.IInitializable"/>.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.InitializableStrategy.Activate(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference)">
            <summary>
            Initializes the specified instance.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being activated.</param>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.MethodInjectionStrategy">
            <summary>
            Injects methods on an instance during activation.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.MethodInjectionStrategy.Activate(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference)">
            <summary>
            Injects values into the properties as described by <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.MethodInjectionDirective"/>s
            contained in the plan.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being activated.</param>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.PropertyInjectionStrategy">
            <summary>
            Injects properties on an instance during activation.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.PropertyInjectionStrategy.#ctor(Telerik.JustMock.AutoMock.Ninject.Injection.IInjectorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.PropertyInjectionStrategy"/> class.
            </summary>
            <param name="injectorFactory">The injector factory component.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.PropertyInjectionStrategy.Activate(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference)">
            <summary>
            Injects values into the properties as described by <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.PropertyInjectionDirective"/>s
            contained in the plan.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being activated.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.PropertyInjectionStrategy.AssignProperyOverrides(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference,System.Collections.Generic.IList{Telerik.JustMock.AutoMock.Ninject.Parameters.IPropertyValue})">
            <summary>
            Applies user supplied override values to instance properties.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being activated.</param>
            <param name="propertyValues">The parameter override value accessors.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.PropertyInjectionStrategy.GetValue(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget,System.Collections.Generic.IEnumerable{Telerik.JustMock.AutoMock.Ninject.Parameters.IPropertyValue})">
            <summary>
            Gets the value to inject into the specified target.
            </summary>
            <param name="context">The context.</param>
            <param name="target">The target.</param>
            <param name="allPropertyValues">all property values of the current request.</param>
            <returns>The value to inject into the specified target.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.PropertyInjectionStrategy.InjectorFactory">
            <summary>
            Gets the injector factory component.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.StartableStrategy">
            <summary>
            Starts instances that implement <see cref="T:Telerik.JustMock.AutoMock.Ninject.IStartable"/> during activation,
            and stops them during deactivation.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.StartableStrategy.Activate(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference)">
            <summary>
            Starts the specified instance.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being activated.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Activation.Strategies.StartableStrategy.Deactivate(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Activation.InstanceReference)">
            <summary>
            Stops the specified instance.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being deactivated.</param>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.ConstraintAttribute">
            <summary>
            Defines a constraint on the decorated member.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ConstraintAttribute.Matches(Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingMetadata)">
            <summary>
            Determines whether the specified binding metadata matches the constraint.
            </summary>
            <param name="metadata">The metadata in question.</param>
            <returns><c>True</c> if the metadata matches; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.InjectAttribute">
            <summary>
            Indicates that the decorated member should be injected.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.NamedAttribute">
            <summary>
            Indicates that the decorated member should only be injected using binding(s) registered
            with the specified name.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.NamedAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.NamedAttribute"/> class.
            </summary>
            <param name="name">The name of the binding(s) to use.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.NamedAttribute.Matches(Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingMetadata)">
            <summary>
            Determines whether the specified binding metadata matches the constraint.
            </summary>
            <param name="metadata">The metadata in question.</param>
            <returns><c>True</c> if the metadata matches; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.NamedAttribute.Name">
            <summary>
            Gets the binding name.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.OptionalAttribute">
            <summary>
            Indicates that the decorated member represents an optional dependency.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Components.ComponentContainer">
            <summary>
            An internal container that manages and resolves components that contribute to Ninject.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Components.IComponentContainer">
            <summary>
            An internal container that manages and resolves components that contribute to Ninject.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Components.IComponentContainer.Add``2">
            <summary>
            Registers a component in the container.
            </summary>
            <typeparam name="TComponent">The component type.</typeparam>
            <typeparam name="TImplementation">The component's implementation type.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Components.IComponentContainer.RemoveAll``1">
            <summary>
            Removes all registrations for the specified component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Components.IComponentContainer.RemoveAll(System.Type)">
            <summary>
            Removes all registrations for the specified component.
            </summary>
            <param name="component">The component's type.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Components.IComponentContainer.Get``1">
            <summary>
            Gets one instance of the specified component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <returns>The instance of the component.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Components.IComponentContainer.GetAll``1">
            <summary>
            Gets all available instances of the specified component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <returns>A series of instances of the specified component.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Components.IComponentContainer.Get(System.Type)">
            <summary>
            Gets one instance of the specified component.
            </summary>
            <param name="component">The component type.</param>
            <returns>The instance of the component.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Components.IComponentContainer.GetAll(System.Type)">
            <summary>
            Gets all available instances of the specified component.
            </summary>
            <param name="component">The component type.</param>
            <returns>A series of instances of the specified component.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Components.IComponentContainer.AddTransient``2">
            <summary>
            Registers a transient component in the container.
            </summary>
            <typeparam name="TComponent">The component type.</typeparam>
            <typeparam name="TImplementation">The component's implementation type.</typeparam>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Components.IComponentContainer.Kernel">
            <summary>
            Gets or sets the kernel that owns the component container.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Components.ComponentContainer.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Components.ComponentContainer.Add``2">
            <summary>
            Registers a component in the container.
            </summary>
            <typeparam name="TComponent">The component type.</typeparam>
            <typeparam name="TImplementation">The component's implementation type.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Components.ComponentContainer.AddTransient``2">
            <summary>
            Registers a transient component in the container.
            </summary>
            <typeparam name="TComponent">The component type.</typeparam>
            <typeparam name="TImplementation">The component's implementation type.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Components.ComponentContainer.RemoveAll``1">
            <summary>
            Removes all registrations for the specified component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Components.ComponentContainer.RemoveAll(System.Type)">
            <summary>
            Removes all registrations for the specified component.
            </summary>
            <param name="component">The component type.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Components.ComponentContainer.Get``1">
            <summary>
            Gets one instance of the specified component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <returns>The instance of the component.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Components.ComponentContainer.GetAll``1">
            <summary>
            Gets all available instances of the specified component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <returns>A series of instances of the specified component.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Components.ComponentContainer.Get(System.Type)">
            <summary>
            Gets one instance of the specified component.
            </summary>
            <param name="component">The component type.</param>
            <returns>The instance of the component.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Components.ComponentContainer.GetAll(System.Type)">
            <summary>
            Gets all available instances of the specified component.
            </summary>
            <param name="component">The component type.</param>
            <returns>A series of instances of the specified component.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Components.ComponentContainer.Kernel">
            <summary>
            Gets or sets the kernel that owns the component container.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.GlobalKernelRegistration">
            <summary>
            Allows to register kernel globally to perform some tasks on all kernels.
            The registration is done by loading the GlobalKernelRegistrationModule to the kernel.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.GlobalKernelRegistration.MapKernels(System.Action{Telerik.JustMock.AutoMock.Ninject.IKernel})">
            <summary>
            Performs an action on all registered kernels.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.IInitializable">
            <summary>
            A service that requires initialization after it is activated.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.IInitializable.Initialize">
            <summary>
            Initializes the instance. Called during activation.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Infrastructure.BaseWeakReference">
            <summary>
            Inheritable weak reference base class for Silverlight
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.BaseWeakReference.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Infrastructure.ReferenceEqualWeakReference"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.BaseWeakReference.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Infrastructure.ReferenceEqualWeakReference"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="trackResurrection">if set to <c>true</c> [track resurrection].</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Infrastructure.BaseWeakReference.IsAlive">
            <summary>
            Gets a value indicating whether this instance is alive.
            </summary>
            <value><c>true</c> if this instance is alive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Infrastructure.BaseWeakReference.Target">
            <summary>
            Gets or sets the target of this weak reference.
            </summary>
            <value>The target of this weak reference.</value>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Future`1">
            <summary>
            Represents a future value.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Future`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the Future&lt;T&gt; class.
            </summary>
            <param name="callback">The callback that will be triggered to read the value.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Future`1.op_Implicit(Telerik.JustMock.AutoMock.Ninject.Infrastructure.Future{`0})~`0">
            <summary>
            Gets the value from the future.
            </summary>
            <param name="future">The future.</param>
            <returns>The future value.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Future`1.Value">
            <summary>
            Gets the value, resolving it if necessary.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Future`1.Callback">
            <summary>
            Gets the callback that will be called to resolve the value.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Infrastructure.IHaveBindingConfiguration">
            <summary>
            Indicates the object has a reference to a <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding"/>.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Infrastructure.IHaveBindingConfiguration.BindingConfiguration">
            <summary>
            Gets the binding.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Infrastructure.IHaveKernel">
            <summary>
            Indicates that the object has a reference to an <see cref="T:Telerik.JustMock.AutoMock.Ninject.IKernel"/>.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Infrastructure.IHaveKernel.Kernel">
            <summary>
            Gets the kernel.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.ExceptionFormatter">
            <summary>
            Provides meaningful exception messages.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.ExceptionFormatter.ModulesWithNullOrEmptyNamesAreNotSupported">
            <summary>
            Generates a message saying that modules without names are not supported.
            </summary>
            <returns>The exception message.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.ExceptionFormatter.TargetDoesNotHaveADefaultValue(Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget)">
            <summary>
            Generates a message saying that modules without names are not supported.
            </summary>
            <returns>The exception message.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.ExceptionFormatter.ModuleWithSameNameIsAlreadyLoaded(Telerik.JustMock.AutoMock.Ninject.Modules.INinjectModule,Telerik.JustMock.AutoMock.Ninject.Modules.INinjectModule)">
            <summary>
            Generates a message saying that a module with the same name is already loaded.
            </summary>
            <param name="newModule">The new module.</param>
            <param name="existingModule">The existing module.</param>
            <returns>The exception message.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.ExceptionFormatter.NoModuleLoadedWithTheSpecifiedName(System.String)">
            <summary>
            Generates a message saying that no module has been loaded with the specified name.
            </summary>
            <param name="name">The module name.</param>
            <returns>The exception message.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.ExceptionFormatter.CouldNotUniquelyResolveBinding(Telerik.JustMock.AutoMock.Ninject.Activation.IRequest,System.String[])">
            <summary>
            Generates a message saying that the binding could not be uniquely resolved.
            </summary>
            <param name="request">The request.</param>
            <param name="formattedMatchingBindings">The matching bindings, already formatted as strings</param>
            <returns>The exception message.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.ExceptionFormatter.CouldNotResolveBinding(Telerik.JustMock.AutoMock.Ninject.Activation.IRequest)">
            <summary>
            Generates a message saying that the binding could not be resolved on the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns>The exception message.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.ExceptionFormatter.CyclicalDependenciesDetected(Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Generates a message saying that the specified context has cyclic dependencies.
            </summary>
            <param name="context">The context.</param>
            <returns>The exception message.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.ExceptionFormatter.InvalidAttributeTypeUsedInBindingCondition(System.String,System.String,System.Type)">
            <summary>
            Generates a message saying that an invalid attribute type is used in the binding condition.
            </summary>
            <param name="serviceNames">The names of the services.</param>
            <param name="methodName">Name of the method.</param>
            <param name="type">The type.</param>
            <returns>The exception message.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.ExceptionFormatter.NoConstructorsAvailable(Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Generates a message saying that no constructors are available on the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>The exception message.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.ExceptionFormatter.NoConstructorsAvailableForComponent(System.Type,System.Type)">
            <summary>
            Generates a message saying that no constructors are available for the given component.
            </summary>
            <param name="component">The component.</param>
            <param name="implementation">The implementation.</param>
            <returns>The exception message.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.ExceptionFormatter.NoSuchComponentRegistered(System.Type)">
            <summary>
            Generates a message saying that the specified component is not registered.
            </summary>
            <param name="component">The component.</param>
            <returns>The exception message.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.ExceptionFormatter.CouldNotResolvePropertyForValueInjection(Telerik.JustMock.AutoMock.Ninject.Activation.IRequest,System.String)">
            <summary>
            Generates a message saying that the specified property could not be resolved on the specified request.
            </summary>
            <param name="request">The request.</param>
            <param name="propertyName">The property name.</param>
            <returns>The exception message.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.ExceptionFormatter.ProviderReturnedNull(Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Generates a message saying that the provider on the specified context returned null.
            </summary>
            <param name="context">The context.</param>
            <returns>The exception message.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.ExceptionFormatter.ConstructorsAmbiguous(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,System.Linq.IGrouping{System.Int32,Telerik.JustMock.AutoMock.Ninject.Planning.Directives.ConstructorInjectionDirective})">
            <summary>
            Generates a message saying that the constructor is ambiguous.
            </summary>
            <param name="context">The context.</param>
            <param name="bestDirectives">The best constructor directives.</param>
            <returns>The exception message.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.ExceptionFormatter.FormatConstructor(System.Reflection.ConstructorInfo,System.IO.StringWriter)">
            <summary>
            Formats the constructor.
            </summary>
            <param name="constructor">The constructor.</param>
            <param name="sw">The string writer.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.ExceptionFormatter.FormatAttribute(System.IO.StringWriter,System.Attribute)">
            <summary>
            Formats the attribute.
            </summary>
            <param name="sw">The string writer.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.FormatExtensions">
            <summary>
            Provides extension methods for string formatting
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.FormatExtensions.FormatActivationPath(Telerik.JustMock.AutoMock.Ninject.Activation.IRequest)">
            <summary>
            Formats the activation path into a meaningful string representation.
            </summary>
            <param name="request">The request to be formatted.</param>
            <returns>The activation path formatted as string.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.FormatExtensions.Format(Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding,Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Formats the given binding into a meaningful string representation. 
            </summary>
            <param name="binding">The binding to be formatted.</param>
            <param name="context">The context.</param>
            <returns>The binding formatted as string</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.FormatExtensions.Format(Telerik.JustMock.AutoMock.Ninject.Activation.IRequest)">
            <summary>
            Formats the specified request into a meaningful string representation.
            </summary>
            <param name="request">The request to be formatted.</param>
            <returns>The request formatted as string.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.FormatExtensions.Format(Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget)">
            <summary>
            Formats the specified target into a meaningful string representation..
            </summary>
            <param name="target">The target to be formatted.</param>
            <returns>The target formatted as string.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Introspection.FormatExtensions.Format(System.Type)">
            <summary>
            Formats the specified type into a meaningful string representation..
            </summary>
            <param name="type">The type to be formatted.</param>
            <returns>The type formatted as string.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Language.ExtensionsForIEnumerableOfT">
            <summary>
            Provides extension methods for see cref="IEnumerable{T}"/>
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Language.ExtensionsForIEnumerableOfT.Map``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes the given action for each of the elements in the enumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="series">The series.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Language.ExtensionsForIEnumerableOfT.ToEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the given enumerable type to prevent changed on the type behind.
            </summary>
            <typeparam name="T">The type of the enumerable.</typeparam>
            <param name="series">The series.</param>
            <returns>The input type as real enumerable not castable to the original type.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Language.ExtensionsForMemberInfo">
            <summary>
            Extensions for MemberInfo
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Language.ExtensionsForMemberInfo.HasAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified member has attribute.
            </summary>
            <typeparam name="T">The type of the attribute.</typeparam>
            <param name="member">The member.</param>
            <returns>
            	<c>true</c> if the specified member has attribute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Language.ExtensionsForMemberInfo.HasAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Determines whether the specified member has attribute.
            </summary>
            <param name="member">The member.</param>
            <param name="type">The type of the attribute.</param>
            <returns>
            	<c>true</c> if the specified member has attribute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Language.ExtensionsForMemberInfo.GetPropertyFromDeclaredType(System.Reflection.MemberInfo,System.Reflection.PropertyInfo,System.Reflection.BindingFlags)">
            <summary>
            Gets the property info from its declared tpe.
            </summary>
            <param name="memberInfo">The member info.</param>
            <param name="propertyDefinition">The property definition.</param>
            <param name="flags">The flags.</param>
            <returns>The property info from the declared type of the property.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Language.ExtensionsForMemberInfo.IsPrivate(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the specified property info is private.
            </summary>
            <param name="propertyInfo">The property info.</param>
            <returns>
            	<c>true</c> if the specified property info is private; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Language.ExtensionsForMemberInfo.GetCustomAttributesExtended(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes.
            This version is able to get custom attributes for properties from base types even if the property is none public.
            </summary>
            <param name="member">The member.</param>
            <param name="attributeType">Type of the attribute.</param>
            <param name="inherited">if set to <c>true</c> [inherited].</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Language.ExtensionsForType">
            <summary>
            Extension methods for type
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Language.ExtensionsForType.GetAllBaseTypes(System.Type)">
            <summary>
            Gets an enumerable containing the given type and all its base types
            </summary>
            <param name="type">The type.</param>
            <returns>An enumerable containing the given type and all its base types</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Multimap`2">
            <summary>
            A data structure that contains multiple values for a each key.
            </summary>
            <typeparam name="K">The type of key.</typeparam>
            <typeparam name="V">The type of value.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Multimap`2.Add(`0,`1)">
            <summary>
            Adds the specified value for the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Multimap`2.Remove(`0,`1)">
            <summary>
            Removes the specified value for the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns><c>True</c> if such a value existed and was removed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Multimap`2.RemoveAll(`0)">
            <summary>
            Removes all values for the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>True</c> if any such values existed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Multimap`2.Clear">
            <summary>
            Removes all values.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Multimap`2.ContainsKey(`0)">
            <summary>
            Determines whether the multimap contains any values for the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>True</c> if the multimap has one or more values for the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Multimap`2.ContainsValue(`0,`1)">
            <summary>
            Determines whether the multimap contains the specified value for the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns><c>True</c> if the multimap contains such a value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Multimap`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a the multimap.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the multimap.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Multimap`2.Item(`0)">
            <summary>
            Gets the collection of values stored under the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Multimap`2.Keys">
            <summary>
            Gets the collection of keys.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Infrastructure.Multimap`2.Values">
            <summary>
            Gets the collection of collections of values.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Infrastructure.ReferenceEqualWeakReference">
            <summary>
            Weak reference that can be used in collections. It is equal to the
            object it references and has the same hash code.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.ReferenceEqualWeakReference.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Infrastructure.ReferenceEqualWeakReference"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.ReferenceEqualWeakReference.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Infrastructure.ReferenceEqualWeakReference"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="trackResurrection">if set to <c>true</c> [track resurrection].</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.ReferenceEqualWeakReference.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Infrastructure.ReferenceEqualWeakReference.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Infrastructure.StandardScopeCallbacks">
            <summary>
            Scope callbacks for standard scopes.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.AutoMock.Ninject.Infrastructure.StandardScopeCallbacks.Transient">
            <summary>
            Gets the callback for transient scope.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.AutoMock.Ninject.Infrastructure.StandardScopeCallbacks.Singleton">
            <summary>
            Gets the callback for singleton scope.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.AutoMock.Ninject.Infrastructure.StandardScopeCallbacks.Thread">
            <summary>
            Gets the callback for thread scope.
            </summary>
        </member>
        <member name="T:System.Threading.ReaderWriterLock">
            <summary>
            A reader-writer lock implementation that is intended to be simple, yet very
            efficient.  In particular only 1 interlocked operation is taken for any lock 
            operation (we use spin locks to achieve this).  The spin lock is never held
            for more than a few instructions (in particular, we never call event APIs
            or in fact any non-trivial API while holding the spin lock).   
            
            Currently this ReaderWriterLock does not support recurision, however it is 
            not hard to add 
            </summary>
            <remarks>
            By Vance Morrison
            Taken from - http://blogs.msdn.com/vancem/archive/2006/03/28/563180.aspx
            Code at - http://blogs.msdn.com/vancem/attachment/563180.ashx
            </remarks>
        </member>
        <member name="F:System.Threading.ReaderWriterLock.myLock">
            <summary>
            The my lock.
            </summary>
        </member>
        <member name="F:System.Threading.ReaderWriterLock.numReadWaiters">
            <summary>
            The number read waiters.
            </summary>
        </member>
        <member name="F:System.Threading.ReaderWriterLock.numUpgradeWaiters">
            <summary>
            The number upgrade waiters.
            </summary>
        </member>
        <member name="F:System.Threading.ReaderWriterLock.numWriteWaiters">
            <summary>
            The number write waiters.
            </summary>
        </member>
        <member name="F:System.Threading.ReaderWriterLock.owners">
            <summary>
            The owners.
            </summary>
        </member>
        <member name="F:System.Threading.ReaderWriterLock.readEvent">
            <summary>
            The read event.
            </summary>
        </member>
        <member name="F:System.Threading.ReaderWriterLock.upgradeEvent">
            <summary>
            The upgrade event.
            </summary>
        </member>
        <member name="F:System.Threading.ReaderWriterLock.writeEvent">
            <summary>
            The write event.
            </summary>
        </member>
        <member name="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
            <summary>
            The acquire reader lock.
            </summary>
            <param name="millisecondsTimeout">
            The milliseconds timeout.
            </param>
        </member>
        <member name="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
            <summary>
            The acquire writer lock.
            </summary>
            <param name="millisecondsTimeout">
            The milliseconds timeout.
            </param>
        </member>
        <member name="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Int32@)">
            <summary>
            The downgrade to reader lock.
            </summary>
            <param name="lockCookie">The lock cookie.</param>
        </member>
        <member name="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
            <summary>
            The release reader lock.
            </summary>
        </member>
        <member name="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
            <summary>
            The release writer lock.
            </summary>
        </member>
        <member name="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
            <summary>
            The upgrade to writer lock.
            </summary>
            <param name="millisecondsTimeout">
            The milliseconds timeout.
            </param>
            <exception cref="T:System.InvalidOperationException">
            </exception>
        </member>
        <member name="M:System.Threading.ReaderWriterLock.EnterMyLock">
            <summary>
            The enter my lock.
            </summary>
        </member>
        <member name="M:System.Threading.ReaderWriterLock.EnterMyLockSpin">
            <summary>
            The enter my lock spin.
            </summary>
        </member>
        <member name="M:System.Threading.ReaderWriterLock.ExitAndWakeUpAppropriateWaiters">
            <summary>
            Determines the appropriate events to set, leaves the locks, and sets the events. 
            </summary>
        </member>
        <member name="M:System.Threading.ReaderWriterLock.ExitMyLock">
            <summary>
            The exit my lock.
            </summary>
        </member>
        <member name="M:System.Threading.ReaderWriterLock.LazyCreateEvent(System.Threading.EventWaitHandle@,System.Boolean)">
            <summary>
            A routine for lazily creating a event outside the lock (so if errors
            happen they are outside the lock and that we don't do much work
            while holding a spin lock).  If all goes well, reenter the lock and
            set 'waitEvent' 
            </summary>
            <param name="waitEvent">
            The wait Event.
            </param>
            <param name="makeAutoResetEvent">
            The make Auto Reset Event.
            </param>
        </member>
        <member name="M:System.Threading.ReaderWriterLock.WaitOnEvent(System.Threading.EventWaitHandle,System.UInt32@,System.Int32)">
            <summary>
            Waits on 'waitEvent' with a timeout of 'millisceondsTimeout.  
            Before the wait 'numWaiters' is incremented and is restored before leaving this routine.
            </summary>
            <param name="waitEvent">
            The wait Event.
            </param>
            <param name="numWaiters">
            The num Waiters.
            </param>
            <param name="millisecondsTimeout">
            The milliseconds Timeout.
            </param>
        </member>
        <member name="P:System.Threading.ReaderWriterLock.MyLockHeld">
            <summary>
            Gets a value indicating whether MyLockHeld.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Injection.ConstructorInjector">
            <summary>
            A delegate that can inject values into a constructor.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Injection.DynamicMethodInjectorFactory">
            <summary>
            Creates injectors for members via <see cref="T:System.Reflection.Emit.DynamicMethod"/>s.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Injection.IInjectorFactory">
            <summary>
            Creates injectors from members.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Injection.IInjectorFactory.Create(System.Reflection.ConstructorInfo)">
            <summary>
            Gets or creates an injector for the specified constructor.
            </summary>
            <param name="constructor">The constructor.</param>
            <returns>The created injector.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Injection.IInjectorFactory.Create(System.Reflection.PropertyInfo)">
            <summary>
            Gets or creates an injector for the specified property.
            </summary>
            <param name="property">The property.</param>
            <returns>The created injector.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Injection.IInjectorFactory.Create(System.Reflection.MethodInfo)">
            <summary>
            Gets or creates an injector for the specified method.
            </summary>
            <param name="method">The method.</param>
            <returns>The created injector.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Injection.DynamicMethodInjectorFactory.Create(System.Reflection.ConstructorInfo)">
            <summary>
            Gets or creates an injector for the specified constructor.
            </summary>
            <param name="constructor">The constructor.</param>
            <returns>The created injector.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Injection.DynamicMethodInjectorFactory.Create(System.Reflection.PropertyInfo)">
            <summary>
            Gets or creates an injector for the specified property.
            </summary>
            <param name="property">The property.</param>
            <returns>The created injector.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Injection.DynamicMethodInjectorFactory.Create(System.Reflection.MethodInfo)">
            <summary>
            Gets or creates an injector for the specified method.
            </summary>
            <param name="method">The method.</param>
            <returns>The created injector.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Injection.MethodInjector">
            <summary>
            A delegate that can inject values into a method.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Injection.PropertyInjector">
            <summary>
            A delegate that can inject values into a property.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Injection.ReflectionInjectorFactory">
            <summary>
            Creates injectors from members via reflective invocation.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Injection.ReflectionInjectorFactory.Create(System.Reflection.ConstructorInfo)">
            <summary>
            Gets or creates an injector for the specified constructor.
            </summary>
            <param name="constructor">The constructor.</param>
            <returns>The created injector.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Injection.ReflectionInjectorFactory.Create(System.Reflection.PropertyInfo)">
            <summary>
            Gets or creates an injector for the specified property.
            </summary>
            <param name="property">The property.</param>
            <returns>The created injector.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Injection.ReflectionInjectorFactory.Create(System.Reflection.MethodInfo)">
            <summary>
            Gets or creates an injector for the specified method.
            </summary>
            <param name="method">The method.</param>
            <returns>The created injector.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.IStartable">
            <summary>
            A service that is started when activated, and stopped when deactivated.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.IStartable.Start">
            <summary>
            Starts this instance. Called during activation.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.IStartable.Stop">
            <summary>
            Stops this instance. Called during deactivation.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Modules.INinjectModule">
            <summary>
            A pluggable unit that can be loaded into an <see cref="T:Telerik.JustMock.AutoMock.Ninject.IKernel"/>.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Modules.INinjectModule.OnLoad(Telerik.JustMock.AutoMock.Ninject.IKernel)">
            <summary>
            Called when the module is loaded into a kernel.
            </summary>
            <param name="kernel">The kernel that is loading the module.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Modules.INinjectModule.OnUnload(Telerik.JustMock.AutoMock.Ninject.IKernel)">
            <summary>
            Called when the module is unloaded from a kernel.
            </summary>
            <param name="kernel">The kernel that is unloading the module.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Modules.INinjectModule.OnVerifyRequiredModules">
            <summary>
            Called after loading the modules. A module can verify here if all other required modules are loaded.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Modules.INinjectModule.Name">
            <summary>
            Gets the module's name.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Modules.NinjectModule">
            <summary>
            A loadable unit that defines bindings for your application.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Modules.NinjectModule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Modules.NinjectModule"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Modules.NinjectModule.OnLoad(Telerik.JustMock.AutoMock.Ninject.IKernel)">
            <summary>
            Called when the module is loaded into a kernel.
            </summary>
            <param name="kernel">The kernel that is loading the module.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Modules.NinjectModule.OnUnload(Telerik.JustMock.AutoMock.Ninject.IKernel)">
            <summary>
            Called when the module is unloaded from a kernel.
            </summary>
            <param name="kernel">The kernel that is unloading the module.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Modules.NinjectModule.OnVerifyRequiredModules">
            <summary>
            Called after loading the modules. A module can verify here if all other required modules are loaded.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Modules.NinjectModule.Load">
            <summary>
            Loads the module into the kernel.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Modules.NinjectModule.Unload">
            <summary>
            Unloads the module from the kernel.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Modules.NinjectModule.VerifyRequiredModulesAreLoaded">
            <summary>
            Called after loading the modules. A module can verify here if all other required modules are loaded.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Modules.NinjectModule.Unbind(System.Type)">
            <summary>
            Unregisters all bindings for the specified service.
            </summary>
            <param name="service">The service to unbind.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Modules.NinjectModule.AddBinding(Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding)">
            <summary>
            Registers the specified binding.
            </summary>
            <param name="binding">The binding to add.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Modules.NinjectModule.RemoveBinding(Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding)">
            <summary>
            Unregisters the specified binding.
            </summary>
            <param name="binding">The binding to remove.</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Modules.NinjectModule.Kernel">
            <summary>
            Gets the kernel that the module is loaded into.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Modules.NinjectModule.Name">
            <summary>
            Gets the module's name. Only a single module with a given name can be loaded at one time.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Modules.NinjectModule.Bindings">
            <summary>
            Gets the bindings that were registered by the module.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Modules.NinjectModule.KernelInstance">
            <summary>
            Gets the kernel.
            </summary>
            <value>The kernel.</value>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Parameters.ConstructorArgument">
            <summary>
            Overrides the injected value of a constructor argument.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Parameters.Parameter">
            <summary>
            Modifies an activation process in some way.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter">
            <summary>
            Modifies an activation process in some way.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter.GetValue(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget)">
            <summary>
            Gets the value for the parameter within the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="target">The target.</param>
            <returns>The value for the parameter.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter.ShouldInherit">
            <summary>
            Gets a value indicating whether the parameter should be inherited into child requests.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.Parameter.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Parameters.Parameter"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="shouldInherit">Whether the parameter should be inherited into child requests.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.Parameter.#ctor(System.String,System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,System.Object},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Parameters.Parameter"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="valueCallback">The callback that will be triggered to get the parameter's value.</param>
            <param name="shouldInherit">Whether the parameter should be inherited into child requests.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.Parameter.#ctor(System.String,System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget,System.Object},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Parameters.Parameter"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="valueCallback">The callback that will be triggered to get the parameter's value.</param>
            <param name="shouldInherit">Whether the parameter should be inherited into child requests.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.Parameter.GetValue(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget)">
            <summary>
            Gets the value for the parameter within the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="target">The target.</param>
            <returns>The value for the parameter.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.Parameter.Equals(System.Object)">
            <summary>
            Determines whether the object equals the specified object.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns><c>True</c> if the objects are equal; otherwise <c>false</c></returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.Parameter.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the object.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.Parameter.Equals(Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>True</c> if the objects are equal; otherwise <c>false</c></returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Parameters.Parameter.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Parameters.Parameter.ShouldInherit">
            <summary>
            Gets a value indicating whether the parameter should be inherited into child requests.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Parameters.Parameter.ValueCallback">
            <summary>
            Gets or sets the callback that will be triggered to get the parameter's value.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Parameters.IConstructorArgument">
            <summary>
            Defines the interface for constructor arguments.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.IConstructorArgument.AppliesToTarget(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget)">
            <summary>
            Determines if the parameter applies to the given target.
            </summary>
            <remarks>
            Only one parameter may return true.
            </remarks>
            <param name="context">The context.</param>
            <param name="target">The target.</param>
            <returns>Tre if the parameter applies in the specified context to the specified target.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.ConstructorArgument.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Parameters.ConstructorArgument"/> class.
            </summary>
            <param name="name">The name of the argument to override.</param>
            <param name="value">The value to inject into the property.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.ConstructorArgument.#ctor(System.String,System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Parameters.ConstructorArgument"/> class.
            </summary>
            <param name="name">The name of the argument to override.</param>
            <param name="valueCallback">The callback to invoke to get the value that should be injected.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.ConstructorArgument.#ctor(System.String,System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Parameters.ConstructorArgument"/> class.
            </summary>
            <param name="name">The name of the argument to override.</param>
            <param name="valueCallback">The callback to invoke to get the value that should be injected.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.ConstructorArgument.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Parameters.ConstructorArgument"/> class.
            </summary>
            <param name="name">The name of the argument to override.</param>
            <param name="value">The value to inject into the property.</param>
            <param name="shouldInherit">Whether the parameter should be inherited into child requests.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.ConstructorArgument.#ctor(System.String,System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,System.Object},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Parameters.ConstructorArgument"/> class.
            </summary>
            <param name="name">The name of the argument to override.</param>
            <param name="valueCallback">The callback to invoke to get the value that should be injected.</param>
            <param name="shouldInherit">if set to <c>true</c> [should inherit].</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.ConstructorArgument.#ctor(System.String,System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget,System.Object},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Parameters.ConstructorArgument"/> class.
            </summary>
            <param name="name">The name of the argument to override.</param>
            <param name="valueCallback">The callback to invoke to get the value that should be injected.</param>
            <param name="shouldInherit">if set to <c>true</c> [should inherit].</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.ConstructorArgument.AppliesToTarget(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget)">
            <summary>
            Determines if the parameter applies to the given target.
            </summary>
            <param name="context">The context.</param>
            <param name="target">The target.</param>
            <returns>
            Tre if the parameter applies in the specified context to the specified target.
            </returns>
            <remarks>
            Only one parameter may return true.
            </remarks>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Parameters.IPropertyValue">
            <summary>
            Overrides the injected value of a property.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Parameters.PropertyValue">
            <summary>
            Overrides the injected value of a property.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.PropertyValue.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Parameters.PropertyValue"/> class.
            </summary>
            <param name="name">The name of the property to override.</param>
            <param name="value">The value to inject into the property.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.PropertyValue.#ctor(System.String,System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Parameters.PropertyValue"/> class.
            </summary>
            <param name="name">The name of the property to override.</param>
            <param name="valueCallback">The callback to invoke to get the value that should be injected.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.PropertyValue.#ctor(System.String,System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Parameters.PropertyValue"/> class.
            </summary>
            <param name="name">The name of the property to override.</param>
            <param name="valueCallback">The callback to invoke to get the value that should be injected.</param>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Parameters.WeakConstructorArgument">
            <summary>
            Overrides the injected value of a constructor argument.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.AutoMock.Ninject.Parameters.WeakConstructorArgument.weakReference">
            <summary>
            A weak reference to the constructor argument value.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.WeakConstructorArgument.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Parameters.ConstructorArgument"/> class.
            </summary>
            <param name="name">The name of the argument to override.</param>
            <param name="value">The value to inject into the property.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.WeakConstructorArgument.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Parameters.ConstructorArgument"/> class.
            </summary>
            <param name="name">The name of the argument to override.</param>
            <param name="value">The value to inject into the property.</param>
            <param name="shouldInherit">Whether the parameter should be inherited into child requests.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.WeakConstructorArgument.AppliesToTarget(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget)">
            <summary>
            Determines if the parameter applies to the given target.
            </summary>
            <param name="context">The context.</param>
            <param name="target">The target.</param>
            <returns>
            Tre if the parameter applies in the specified context to the specified target.
            </returns>
            <remarks>
            Only one parameter may return true.
            </remarks>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Parameters.WeakPropertyValue">
            <summary>
            Overrides the injected value of a property.
            Keeps a weak reference to the value.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Parameters.WeakPropertyValue.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Parameters.WeakPropertyValue"/> class.
            </summary>
            <param name="name">The name of the property to override.</param>
            <param name="value">The value to inject into the property.</param>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Binding">
            <summary>
            Contains information about a service registration.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding">
            <summary>
            Contains information about a service registration.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingConfiguration">
            <summary>
            The configuration of a binding.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingConfiguration.GetProvider(Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Gets the provider for the binding.
            </summary>
            <param name="context">The context.</param>
            <returns>The provider to use.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingConfiguration.GetScope(Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Gets the scope for the binding, if any.
            </summary>
            <param name="context">The context.</param>
            <returns>The object that will act as the scope, or <see langword="null"/> if the service is transient.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingConfiguration.Matches(Telerik.JustMock.AutoMock.Ninject.Activation.IRequest)">
            <summary>
            Determines whether the specified request satisfies the condition defined on the binding,
            if one was defined.
            </summary>
            <param name="request">The request.</param>
            <returns><c>True</c> if the request satisfies the condition; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingConfiguration.Metadata">
            <summary>
            Gets the binding's metadata.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingConfiguration.Target">
            <summary>
            Gets or sets the type of target for the binding.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingConfiguration.IsImplicit">
            <summary>
            Gets or sets a value indicating whether the binding was implicitly registered.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingConfiguration.IsConditional">
            <summary>
            Gets a value indicating whether the binding has a condition associated with it.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingConfiguration.Condition">
            <summary>
            Gets or sets the condition defined for the binding.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingConfiguration.ProviderCallback">
            <summary>
            Gets or sets the callback that returns the provider that should be used by the binding.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingConfiguration.ScopeCallback">
            <summary>
            Gets or sets the callback that returns the object that will act as the binding's scope.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingConfiguration.Parameters">
            <summary>
            Gets the parameters defined for the binding.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingConfiguration.ActivationActions">
            <summary>
            Gets the actions that should be called after instances are activated via the binding.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingConfiguration.DeactivationActions">
            <summary>
            Gets the actions that should be called before instances are deactivated via the binding.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding.BindingConfiguration">
            <summary>
            Gets the binding configuration.
            </summary>
            <value>The binding configuration.</value>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding.Service">
            <summary>
            Gets the service type that is controlled by the binding.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Binding.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Binding"/> class.
            </summary>
            <param name="service">The service that is controlled by the binding.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Binding.#ctor(System.Type,Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Binding"/> class.
            </summary>
            <param name="service">The service that is controlled by the binding.</param>
            <param name="configuration">The binding configuration.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Binding.GetProvider(Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Gets the provider for the binding.
            </summary>
            <param name="context">The context.</param>
            <returns>The provider to use.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Binding.GetScope(Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Gets the scope for the binding, if any.
            </summary>
            <param name="context">The context.</param>
            <returns>
            The object that will act as the scope, or <see langword="null"/> if the service is transient.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Binding.Matches(Telerik.JustMock.AutoMock.Ninject.Activation.IRequest)">
            <summary>
            Determines whether the specified request satisfies the condition defined on the binding,
            if one was defined.
            </summary>
            <param name="request">The request.</param>
            <returns>
                <c>True</c> if the request satisfies the condition; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Binding.BindingConfiguration">
            <summary>
            Gets or sets the binding configuration.
            </summary>
            <value>The binding configuration.</value>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Binding.Service">
            <summary>
            Gets the service type that is controlled by the binding.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Binding.Metadata">
            <summary>
            Gets the binding's metadata.
            </summary>
            <value></value>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Binding.Target">
            <summary>
            Gets or sets the type of target for the binding.
            </summary>
            <value></value>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Binding.IsImplicit">
            <summary>
            Gets or sets a value indicating whether the binding was implicitly registered.
            </summary>
            <value></value>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Binding.IsConditional">
            <summary>
            Gets a value indicating whether the binding has a condition associated with it.
            </summary>
            <value></value>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Binding.Condition">
            <summary>
            Gets or sets the condition defined for the binding.
            </summary>
            <value></value>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Binding.ProviderCallback">
            <summary>
            Gets or sets the callback that returns the provider that should be used by the binding.
            </summary>
            <value></value>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Binding.ScopeCallback">
            <summary>
            Gets or sets the callback that returns the object that will act as the binding's scope.
            </summary>
            <value></value>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Binding.Parameters">
            <summary>
            Gets the parameters defined for the binding.
            </summary>
            <value></value>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Binding.ActivationActions">
            <summary>
            Gets the actions that should be called after instances are activated via the binding.
            </summary>
            <value></value>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Binding.DeactivationActions">
            <summary>
            Gets the actions that should be called before instances are deactivated via the binding.
            </summary>
            <value></value>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder">
            <summary>
            Provides a root for the fluent syntax associated with an <see cref="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.BindingConfiguration"/>.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.#ctor(Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingConfiguration,Telerik.JustMock.AutoMock.Ninject.IKernel,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder"/> class.
            </summary>
            <param name="bindingConfiguration">The binding to build.</param>
            <param name="kernel">The kernel.</param>
            <param name="serviceNames">The names of the services.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.InternalTo``1">
            <summary>
            Indicates that the service should be bound to the specified implementation type.
            </summary>
            <typeparam name="TImplementation">The implementation type.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.InternalTo``1(System.Type)">
            <summary>
            Indicates that the service should be bound to the specified implementation type.
            </summary>
            <typeparam name="T">The type of the returned syntax.</typeparam>
            <param name="implementation">The implementation type.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.InternalToConfiguration``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="value">The constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.InternalToMethod``1(System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,``0})">
            <summary>
            Indicates that the service should be bound to the specified callback method.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="method">The method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.InternalToProvider``1(Telerik.JustMock.AutoMock.Ninject.Activation.IProvider{``0})">
            <summary>
            Indicates that the service should be bound to the specified provider.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="provider">The provider.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.ToProviderInternal``2">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <typeparam name="TProvider">The type of provider to activate.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.ToProviderInternal``1(System.Type)">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <typeparam name="T">The type of the returned fleunt syntax</typeparam>
            <param name="providerType">The type of provider to activate.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.InternalToConstructor``1(System.Linq.Expressions.Expression{System.Func{Telerik.JustMock.AutoMock.Ninject.Syntax.IConstructorArgumentSyntax,``0}})">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="newExpression">The expression that specifies the constructor.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.AddConstructorArguments(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Adds the constructor arguments for the specified constructor expression.
            </summary>
            <param name="ctorExpression">The ctor expression.</param>
            <param name="constructorArgumentSyntaxParameterExpression">The constructor argument syntax parameter expression.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.AddConstructorArgument(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Adds a constructor argument for the specified argument expression.
            </summary>
            <param name="argument">The argument.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="constructorArgumentSyntaxParameterExpression">The constructor argument syntax parameter expression.</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.BindingConfiguration">
            <summary>
            Gets the binding being built.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.Kernel">
            <summary>
            Gets the kernel.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.ServiceNames">
            <summary>
            Gets the names of the services.
            </summary>
            <value>The names of the services.</value>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.ConstructorArgumentSyntax">
            <summary>
            Passed to ToConstructor to specify that a constructor value is Injected.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Syntax.IConstructorArgumentSyntax">
            <summary>
            Passed to ToConstructor to specify that a constructor value is Injected.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IConstructorArgumentSyntax.Inject``1">
            <summary>
            Specifies that the argument is injected.
            </summary>
            <typeparam name="T">The type of the parameter</typeparam>
            <returns>Not used. This interface has no implementation.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Syntax.IConstructorArgumentSyntax.Context">
            <summary>
            Gets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.ConstructorArgumentSyntax.#ctor(Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.ConstructorArgumentSyntax"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.ConstructorArgumentSyntax.Inject``1">
            <summary>
            Specifies that the argument is injected.
            </summary>
            <typeparam name="T1">The type of the parameter</typeparam>
            <returns>Not used. This interface has no implementation.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.ConstructorArgumentSyntax.Context">
            <summary>
            Gets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`4">
            <summary>
            Provides a root for the fluent syntax associated with an <see cref="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.BindingConfiguration"/>.
            </summary>
            <typeparam name="T1">The first service type.</typeparam>
            <typeparam name="T2">The second service type.</typeparam>
            <typeparam name="T3">The third service type.</typeparam>
            <typeparam name="T4">The fourth service type.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`4">
            <summary>
            Used to define the target of a binding.
            </summary>
            <typeparam name="T1">The first service type to be bound.</typeparam>
            <typeparam name="T2">The second service type to be bound.</typeparam>
            <typeparam name="T3">The third service type to be bound.</typeparam>
            <typeparam name="T4">The fourth service type to be bound.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingSyntax">
            <summary>
            Used to define a basic binding syntax builder.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`4.To``1">
            <summary>
            Indicates that the service should be bound to the specified implementation type.
            </summary>
            <typeparam name="TImplementation">The implementation type.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`4.To(System.Type)">
            <summary>
            Indicates that the service should be bound to the specified implementation type.
            </summary>
            <param name="implementation">The implementation type.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`4.ToProvider``1">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <typeparam name="TProvider">The type of provider to activate.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`4.ToProvider``2">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <typeparam name="TProvider">The type of provider to activate.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`4.ToProvider(System.Type)">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <param name="providerType">The type of provider to activate.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`4.ToProvider``1(Telerik.JustMock.AutoMock.Ninject.Activation.IProvider{``0})">
            <summary>
            Indicates that the service should be bound to the specified provider.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="provider">The provider.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`4.ToMethod``1(System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,``0})">
            <summary>
            Indicates that the service should be bound to the specified callback method.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="method">The method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`4.ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="value">The constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`4.ToConstructor``1(System.Linq.Expressions.Expression{System.Func{Telerik.JustMock.AutoMock.Ninject.Syntax.IConstructorArgumentSyntax,``0}})">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="newExpression">The expression that specifies the constructor.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`4.#ctor(Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingConfiguration,Telerik.JustMock.AutoMock.Ninject.IKernel,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`4"/> class.
            </summary>
            <param name="bindingConfigurationConfiguration">The binding to build.</param>
            <param name="kernel">The kernel.</param>
            <param name="serviceNames">The names of the services.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`4.To``1">
            <summary>
            Indicates that the service should be bound to the specified implementation type.
            </summary>
            <typeparam name="TImplementation">The implementation type.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`4.To(System.Type)">
            <summary>
            Indicates that the service should be bound to the specified implementation type.
            </summary>
            <param name="implementation">The implementation type.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`4.ToConstructor``1(System.Linq.Expressions.Expression{System.Func{Telerik.JustMock.AutoMock.Ninject.Syntax.IConstructorArgumentSyntax,``0}})">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="newExpression">The expression that specifies the constructor.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`4.ToProvider``1">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <typeparam name="TProvider">The type of provider to activate.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`4.ToProvider``2">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <typeparam name="TProvider">The type of provider to activate.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`4.ToProvider(System.Type)">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <param name="providerType">The type of provider to activate.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`4.ToProvider``1(Telerik.JustMock.AutoMock.Ninject.Activation.IProvider{``0})">
            <summary>
            Indicates that the service should be bound to the specified provider.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="provider">The provider.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`4.ToMethod``1(System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,``0})">
            <summary>
            Indicates that the service should be bound to the specified callback method.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="method">The method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`4.ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="value">The constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`3">
            <summary>
            Provides a root for the fluent syntax associated with an <see cref="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.BindingConfiguration"/>.
            </summary>
            <typeparam name="T1">The first service type.</typeparam>
            <typeparam name="T2">The second service type.</typeparam>
            <typeparam name="T3">The third service type.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`3">
            <summary>
            Used to define the target of a binding.
            </summary>
            <typeparam name="T1">The first service type to be bound.</typeparam>
            <typeparam name="T2">The second service type to be bound.</typeparam>
            <typeparam name="T3">The third service type to be bound.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`3.To``1">
            <summary>
            Indicates that the service should be bound to the specified implementation type.
            </summary>
            <typeparam name="TImplementation">The implementation type.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`3.To(System.Type)">
            <summary>
            Indicates that the service should be bound to the specified implementation type.
            </summary>
            <param name="implementation">The implementation type.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`3.ToProvider``1">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <typeparam name="TProvider">The type of provider to activate.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`3.ToProvider``2">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <typeparam name="TProvider">The type of provider to activate.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`3.ToProvider(System.Type)">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <param name="providerType">The type of provider to activate.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`3.ToProvider``1(Telerik.JustMock.AutoMock.Ninject.Activation.IProvider{``0})">
            <summary>
            Indicates that the service should be bound to the specified provider.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="provider">The provider.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`3.ToMethod``1(System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,``0})">
            <summary>
            Indicates that the service should be bound to the specified callback method.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="method">The method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`3.ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="value">The constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`3.ToConstructor``1(System.Linq.Expressions.Expression{System.Func{Telerik.JustMock.AutoMock.Ninject.Syntax.IConstructorArgumentSyntax,``0}})">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="newExpression">The expression that specifies the constructor.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`3.#ctor(Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingConfiguration,Telerik.JustMock.AutoMock.Ninject.IKernel,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`3"/> class.
            </summary>
            <param name="bindingConfigurationConfiguration">The binding to build.</param>
            <param name="kernel">The kernel.</param>
            <param name="serviceNames">The names of the services.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`3.To``1">
            <summary>
            Indicates that the service should be bound to the specified implementation type.
            </summary>
            <typeparam name="TImplementation">The implementation type.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`3.To(System.Type)">
            <summary>
            Indicates that the service should be bound to the specified implementation type.
            </summary>
            <param name="implementation">The implementation type.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`3.ToConstructor``1(System.Linq.Expressions.Expression{System.Func{Telerik.JustMock.AutoMock.Ninject.Syntax.IConstructorArgumentSyntax,``0}})">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="newExpression">The expression that specifies the constructor.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`3.ToProvider``1">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <typeparam name="TProvider">The type of provider to activate.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`3.ToProvider``2">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <typeparam name="TProvider">The type of provider to activate.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`3.ToProvider(System.Type)">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <param name="providerType">The type of provider to activate.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`3.ToProvider``1(Telerik.JustMock.AutoMock.Ninject.Activation.IProvider{``0})">
            <summary>
            Indicates that the service should be bound to the specified provider.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="provider">The provider.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`3.ToMethod``1(System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,``0})">
            <summary>
            Indicates that the service should be bound to the specified callback method.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="method">The method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`3.ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="value">The constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`2">
            <summary>
            Provides a root for the fluent syntax associated with an <see cref="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder.BindingConfiguration"/>.
            </summary>
            <typeparam name="T1">The first service type.</typeparam>
            <typeparam name="T2">The second service type.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`2">
            <summary>
            Used to define the target of a binding.
            </summary>
            <typeparam name="T1">The first service type to be bound.</typeparam>
            <typeparam name="T2">The second service type to be bound.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`2.To``1">
            <summary>
            Indicates that the service should be bound to the specified implementation type.
            </summary>
            <typeparam name="TImplementation">The implementation type.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`2.To(System.Type)">
            <summary>
            Indicates that the service should be bound to the specified implementation type.
            </summary>
            <param name="implementation">The implementation type.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`2.ToProvider``1">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <typeparam name="TProvider">The type of provider to activate.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`2.ToProvider``2">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <typeparam name="TProvider">The type of provider to activate.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`2.ToProvider(System.Type)">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <param name="providerType">The type of provider to activate.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`2.ToProvider``1(Telerik.JustMock.AutoMock.Ninject.Activation.IProvider{``0})">
            <summary>
            Indicates that the service should be bound to the specified provider.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="provider">The provider.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`2.ToMethod``1(System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,``0})">
            <summary>
            Indicates that the service should be bound to the specified callback method.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="method">The method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`2.ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="value">The constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`2.ToConstructor``1(System.Linq.Expressions.Expression{System.Func{Telerik.JustMock.AutoMock.Ninject.Syntax.IConstructorArgumentSyntax,``0}})">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="newExpression">The expression that specifies the constructor.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`2.#ctor(Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingConfiguration,Telerik.JustMock.AutoMock.Ninject.IKernel,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`2"/> class.
            </summary>
            <param name="bindingConfigurationConfiguration">The binding to build.</param>
            <param name="kernel">The kernel.</param>
            <param name="serviceNames">The names of the services.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`2.To``1">
            <summary>
            Indicates that the service should be bound to the specified implementation type.
            </summary>
            <typeparam name="TImplementation">The implementation type.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`2.To(System.Type)">
            <summary>
            Indicates that the service should be bound to the specified implementation type.
            </summary>
            <param name="implementation">The implementation type.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`2.ToConstructor``1(System.Linq.Expressions.Expression{System.Func{Telerik.JustMock.AutoMock.Ninject.Syntax.IConstructorArgumentSyntax,``0}})">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="newExpression">The expression that specifies the constructor.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`2.ToProvider``1">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <typeparam name="TProvider">The type of provider to activate.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`2.ToProvider``2">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <typeparam name="TProvider">The type of provider to activate.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`2.ToProvider(System.Type)">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <param name="providerType">The type of provider to activate.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`2.ToProvider``1(Telerik.JustMock.AutoMock.Ninject.Activation.IProvider{``0})">
            <summary>
            Indicates that the service should be bound to the specified provider.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="provider">The provider.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`2.ToMethod``1(System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,``0})">
            <summary>
            Indicates that the service should be bound to the specified callback method.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="method">The method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`2.ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="value">The constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`1">
            <summary>
            Provides a root for the fluent syntax associated with an <see cref="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`1.Binding"/>.
            </summary>
            <typeparam name="T1">The service type.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`1">
            <summary>
            Used to define the target of a binding.
            </summary>
            <typeparam name="T1">The service being bound.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`1.ToSelf">
            <summary>
            Indicates that the service should be self-bound.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`1.To``1">
            <summary>
            Indicates that the service should be bound to the specified implementation type.
            </summary>
            <typeparam name="TImplementation">The implementation type.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`1.To(System.Type)">
            <summary>
            Indicates that the service should be bound to the specified implementation type.
            </summary>
            <param name="implementation">The implementation type.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`1.ToProvider``1">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <typeparam name="TProvider">The type of provider to activate.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`1.ToProvider(System.Type)">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <param name="providerType">The type of provider to activate.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`1.ToProvider``1(Telerik.JustMock.AutoMock.Ninject.Activation.IProvider{``0})">
            <summary>
            Indicates that the service should be bound to the specified provider.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="provider">The provider.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`1.ToMethod(System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,`0})">
            <summary>
            Indicates that the service should be bound to the specified callback method.
            </summary>
            <param name="method">The method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`1.ToMethod``1(System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,``0})">
            <summary>
            Indicates that the service should be bound to the specified callback method.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="method">The method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`1.ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="value">The constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingToSyntax`1.ToConstructor``1(System.Linq.Expressions.Expression{System.Func{Telerik.JustMock.AutoMock.Ninject.Syntax.IConstructorArgumentSyntax,``0}})">
            <summary>
            Indicates that the service should be bound to the specified constructor.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="newExpression">The expression that specifies the constructor.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`1.#ctor(Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding,Telerik.JustMock.AutoMock.Ninject.IKernel,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`1"/> class.
            </summary>
            <param name="binding">The binding to build.</param>
            <param name="kernel">The kernel.</param>
            <param name="serviceNames">The names of the services.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`1.ToSelf">
            <summary>
            Indicates that the service should be self-bound.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`1.To``1">
            <summary>
            Indicates that the service should be bound to the specified implementation type.
            </summary>
            <typeparam name="TImplementation">The implementation type.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`1.To(System.Type)">
            <summary>
            Indicates that the service should be bound to the specified implementation type.
            </summary>
            <param name="implementation">The implementation type.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`1.ToConstructor``1(System.Linq.Expressions.Expression{System.Func{Telerik.JustMock.AutoMock.Ninject.Syntax.IConstructorArgumentSyntax,``0}})">
            <summary>
            Indicates that the service should be bound to the speecified constructor.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="newExpression">The expression that specifies the constructor.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`1.ToProvider``1">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <typeparam name="TProvider">The type of provider to activate.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`1.ToProvider(System.Type)">
            <summary>
            Indicates that the service should be bound to an instance of the specified provider type.
            The instance will be activated via the kernel when an instance of the service is activated.
            </summary>
            <param name="providerType">The type of provider to activate.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`1.ToProvider``1(Telerik.JustMock.AutoMock.Ninject.Activation.IProvider{``0})">
            <summary>
            Indicates that the service should be bound to the specified provider.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="provider">The provider.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`1.ToMethod(System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,`0})">
            <summary>
            Indicates that the service should be bound to the specified callback method.
            </summary>
            <param name="method">The method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`1.ToMethod``1(System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,``0})">
            <summary>
            Indicates that the service should be bound to the specified callback method.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="method">The method.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`1.ToConstant``1(``0)">
            <summary>
            Indicates that the service should be bound to the specified constant value.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="value">The constant value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingBuilder`1.Binding">
            <summary>
            Gets the binding being built.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfiguration">
            <summary>
            The configuration of a binding.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfiguration.GetProvider(Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Gets the provider for the binding.
            </summary>
            <param name="context">The context.</param>
            <returns>The provider to use.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfiguration.GetScope(Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Gets the scope for the binding, if any.
            </summary>
            <param name="context">The context.</param>
            <returns>The object that will act as the scope, or <see langword="null"/> if the service is transient.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfiguration.Matches(Telerik.JustMock.AutoMock.Ninject.Activation.IRequest)">
            <summary>
            Determines whether the specified request satisfies the conditions defined on this binding.
            </summary>
            <param name="request">The request.</param>
            <returns><c>True</c> if the request satisfies the conditions; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfiguration.Metadata">
            <summary>
            Gets the binding's metadata.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfiguration.IsImplicit">
            <summary>
            Gets or sets a value indicating whether the binding was implicitly registered.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfiguration.IsConditional">
            <summary>
            Gets a value indicating whether the binding has a condition associated with it.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfiguration.Target">
            <summary>
            Gets or sets the type of target for the binding.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfiguration.Condition">
            <summary>
            Gets or sets the condition defined for the binding.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfiguration.ProviderCallback">
            <summary>
            Gets or sets the callback that returns the provider that should be used by the binding.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfiguration.ScopeCallback">
            <summary>
            Gets or sets the callback that returns the object that will act as the binding's scope.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfiguration.Parameters">
            <summary>
            Gets the parameters defined for the binding.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfiguration.ActivationActions">
            <summary>
            Gets the actions that should be called after instances are activated via the binding.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfiguration.DeactivationActions">
            <summary>
            Gets the actions that should be called before instances are deactivated via the binding.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1">
            <summary>
            Provides a root for the fluent syntax associated with an <see cref="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.BindingConfiguration"/>.
            </summary>
            <typeparam name="T">The implementation type of the built binding.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingConfigurationSyntax`1">
            <summary>
            The syntax to define bindings.
            </summary>
            <typeparam name="T">The type of the service.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax`1">
            <summary>
            Used to set the condition, scope, name, or add additional information or actions to a binding.
            </summary>
            <typeparam name="T">The service being bound.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax`1">
            <summary>
            Used to define the conditions under which a binding should be used.
            </summary>
            <typeparam name="T">The service being bound.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax`1.When(System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IRequest,System.Boolean})">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax`1.WhenInjectedInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TParent">The type.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax`1.WhenInjectedInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="parent">The type.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax`1.WhenInjectedInto(System.Type[])">
            <summary>
            Indicates that the binding should be used only for injections on the specified types.
            Types that derive from one of the specified types are considered as valid targets.
            Should match at lease one of the targets.
            </summary>
            <param name="parents">The types to match.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax`1.WhenInjectedExactlyInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            The type must match exactly the specified type. Types that derive from the specified type
            will not be considered as valid target.  
            </summary>
            <typeparam name="TParent">The type.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax`1.WhenInjectedExactlyInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            The type must match exactly the specified type. Types that derive from the specified type
            will not be considered as valid target.  
            </summary>
            <param name="parent">The type.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax`1.WhenInjectedExactlyInto(System.Type[])">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            The type must match one of the specified types exactly. Types that derive from one of the specified types
            will not be considered as valid target.  
            Should match at least one of the specified targets
            </summary>
            <param name="parents">The types.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax`1.WhenClassHas``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax`1.WhenMemberHas``1">
            <summary>
            Indicates that the binding should be used only when the member being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax`1.WhenTargetHas``1">
            <summary>
            Indicates that the binding should be used only when the target being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax`1.WhenClassHas(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax`1.WhenMemberHas(System.Type)">
            <summary>
            Indicates that the binding should be used only when the member being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax`1.WhenTargetHas(System.Type)">
            <summary>
            Indicates that the binding should be used only when the target being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax`1.WhenParentNamed(System.String)">
            <summary>
            Indicates that the binding should be used only when the service is being requested
            by a service bound with the specified name.
            </summary>
            <param name="name">The name to expect.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax`1.WhenAnyAnchestorNamed(System.String)">
            <summary>
            Indicates that the binding should be used only when any ancestor is bound with the specified name.
            </summary>
            <param name="name">The name to expect.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax`1.WhenAnyAncestorNamed(System.String)">
            <summary>
            Indicates that the binding should be used only when any ancestor is bound with the specified name.
            </summary>
            <param name="name">The name to expect.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax`1.WhenNoAncestorNamed(System.String)">
            <summary>
            Indicates that the binding should be used only when no ancestor is bound with the specified name.
            </summary>
            <param name="name">The name to expect.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax`1.WhenAnyAncestorMatches(System.Predicate{Telerik.JustMock.AutoMock.Ninject.Activation.IContext})">
            <summary>
            Indicates that the binding should be used only when any ancestor matches the specified predicate.
            </summary>
            <param name="predicate">The predicate to match.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWhenSyntax`1.WhenNoAncestorMatches(System.Predicate{Telerik.JustMock.AutoMock.Ninject.Activation.IContext})">
            <summary>
            Indicates that the binding should be used only when no ancestor matches the specified predicate.
            </summary>
            <param name="predicate">The predicate to match.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingInSyntax`1">
            <summary>
            Used to define the scope in which instances activated via a binding should be re-used.
            </summary>
            <typeparam name="T">The service being bound.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingInSyntax`1.InSingletonScope">
            <summary>
            Indicates that only a single instance of the binding should be created, and then
            should be re-used for all subsequent requests.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingInSyntax`1.InTransientScope">
            <summary>
            Indicates that instances activated via the binding should not be re-used, nor have
            their lifecycle managed by Ninject.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingInSyntax`1.InThreadScope">
            <summary>
            Indicates that instances activated via the binding should be re-used within the same thread.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingInSyntax`1.InScope(System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,System.Object})">
            <summary>
            Indicates that instances activated via the binding should be re-used as long as the object
            returned by the provided callback remains alive (that is, has not been garbage collected).
            </summary>
            <param name="scope">The callback that returns the scope.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingNamedSyntax`1">
            <summary>
            Used to define the name of a binding.
            </summary>
            <typeparam name="T">The service being bound.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingNamedSyntax`1.Named(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWithSyntax`1">
            <summary>
            Used to add additional information to a binding.
            </summary>
            <typeparam name="T">The service being bound.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWithSyntax`1.WithConstructorArgument(System.String,System.Object)">
            <summary>
            Indicates that the specified constructor argument should be overridden with the specified value.
            </summary>
            <param name="name">The name of the argument to override.</param>
            <param name="value">The value for the argument.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWithSyntax`1.WithConstructorArgument(System.String,System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,System.Object})">
            <summary>
            Indicates that the specified constructor argument should be overridden with the specified value.
            </summary>
            <param name="name">The name of the argument to override.</param>
            <param name="callback">The callback to invoke to get the value for the argument.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWithSyntax`1.WithConstructorArgument(System.String,System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>
            Indicates that the specified constructor argument should be overridden with the specified value.
            </summary>
            <param name="name">The name of the argument to override.</param>
            <param name="callback">The callback to invoke to get the value for the argument.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWithSyntax`1.WithPropertyValue(System.String,System.Object)">
            <summary>
            Indicates that the specified property should be injected with the specified value.
            </summary>
            <param name="name">The name of the property to override.</param>
            <param name="value">The value for the property.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWithSyntax`1.WithPropertyValue(System.String,System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,System.Object})">
            <summary>
            Indicates that the specified property should be injected with the specified value.
            </summary>
            <param name="name">The name of the property to override.</param>
            <param name="callback">The callback to invoke to get the value for the property.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWithSyntax`1.WithPropertyValue(System.String,System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>
            Indicates that the specified property should be injected with the specified value.
            </summary>
            <param name="name">The name of the property to override.</param>
            <param name="callback">The callback to invoke to get the value for the property.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWithSyntax`1.WithParameter(Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter)">
            <summary>
            Adds a custom parameter to the binding.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWithSyntax`1.WithMetadata(System.String,System.Object)">
            <summary>
            Sets the value of a piece of metadata on the binding.
            </summary>
            <param name="key">The metadata key.</param>
            <param name="value">The metadata value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingOnSyntax`1">
            <summary>
            Used to add additional actions to be performed during activation or deactivation of instances via a binding.
            </summary>
            <typeparam name="T">The service being bound.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingOnSyntax`1.OnActivation(System.Action{`0})">
            <summary>
            Indicates that the specified callback should be invoked when instances are activated.
            </summary>
            <param name="action">The action callback.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingOnSyntax`1.OnActivation``1(System.Action{``0})">
            <summary>
            Indicates that the specified callback should be invoked when instances are activated.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="action">The action callback.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingOnSyntax`1.OnActivation(System.Action{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,`0})">
            <summary>
            Indicates that the specified callback should be invoked when instances are activated.
            </summary>
            <param name="action">The action callback.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingOnSyntax`1.OnActivation``1(System.Action{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,``0})">
            <summary>
            Indicates that the specified callback should be invoked when instances are activated.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="action">The action callback.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingOnSyntax`1.OnDeactivation(System.Action{`0})">
            <summary>
            Indicates that the specified callback should be invoked when instances are deactivated.
            </summary>
            <param name="action">The action callback.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingOnSyntax`1.OnDeactivation``1(System.Action{``0})">
            <summary>
            Indicates that the specified callback should be invoked when instances are deactivated.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="action">The action callback.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingOnSyntax`1.OnDeactivation(System.Action{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,`0})">
            <summary>
            Indicates that the specified callback should be invoked when instances are deactivated.
            </summary>
            <param name="action">The action callback.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingOnSyntax`1.OnDeactivation``1(System.Action{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,``0})">
            <summary>
            Indicates that the specified callback should be invoked when instances are deactivated.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="action">The action callback.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingInNamedWithOrOnSyntax`1">
            <summary>
            Used to set the scope, name, or add additional information or actions to a binding.
            </summary>
            <typeparam name="T">The service being bound.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingNamedWithOrOnSyntax`1">
            <summary>
            Used to set the name, or add additional information or actions to a binding.
            </summary>
            <typeparam name="T">The service being bound.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Syntax.IBindingWithOrOnSyntax`1">
            <summary>
            Used to add additional information or actions to a binding.
            </summary>
            <typeparam name="T">The service being bound.</typeparam>
        </member>
        <member name="F:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.serviceNames">
            <summary>
            The names of the services added to the exceptions.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.#ctor(Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingConfiguration,System.String,Telerik.JustMock.AutoMock.Ninject.IKernel)">
            <summary>
            Initializes a new instance of the BindingBuilder&lt;T&gt; class.
            </summary>
            <param name="bindingConfiguration">The binding configuration to build.</param>
            <param name="serviceNames">The names of the configured services.</param>
            <param name="kernel">The kernel.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.When(System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IRequest,System.Boolean})">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WhenInjectedInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <typeparam name="TParent">The type.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WhenInjectedInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="parent">The type.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WhenInjectedInto(System.Type[])">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            Types that derive from the specified type are considered as valid targets.
            </summary>
            <param name="parents">The type.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WhenInjectedExactlyInto``1">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            The type must match exactly the specified type. Types that derive from the specified type
            will not be considered as valid target.  
            </summary>
            <typeparam name="TParent">The type.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WhenInjectedExactlyInto(System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            The type must match exactly the specified type. Types that derive from the specified type
            will not be considered as valid target.  
            </summary>
            <param name="parent">The type.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WhenInjectedExactlyInto(System.Type[])">
            <summary>
            Indicates that the binding should be used only for injections on the specified type.
            The type must match exactly the specified type. Types that derive from the specified type
            will not be considered as valid target.  
            Should match at least one of the specified targets
            </summary>
            <param name="parents">The types.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WhenClassHas``1">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WhenMemberHas``1">
            <summary>
            Indicates that the binding should be used only when the member being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WhenTargetHas``1">
            <summary>
            Indicates that the binding should be used only when the target being injected has
            an attribute of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of attribute.</typeparam>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WhenClassHas(System.Type)">
            <summary>
            Indicates that the binding should be used only when the class being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WhenMemberHas(System.Type)">
            <summary>
            Indicates that the binding should be used only when the member being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WhenTargetHas(System.Type)">
            <summary>
            Indicates that the binding should be used only when the target being injected has
            an attribute of the specified type.
            </summary>
            <param name="attributeType">The type of attribute.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WhenParentNamed(System.String)">
            <summary>
            Indicates that the binding should be used only when the service is being requested
            by a service bound with the specified name.
            </summary>
            <param name="name">The name to expect.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WhenAnyAnchestorNamed(System.String)">
            <summary>
            Indicates that the binding should be used only when any ancestor is bound with the specified name.
            </summary>
            <param name="name">The name to expect.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WhenAnyAncestorNamed(System.String)">
            <summary>
            Indicates that the binding should be used only when any ancestor is bound with the specified name.
            </summary>
            <param name="name">The name to expect.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WhenNoAncestorNamed(System.String)">
            <summary>
            Indicates that the binding should be used only when no ancestor is bound with the specified name.
            </summary>
            <param name="name">The name to expect.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WhenAnyAncestorMatches(System.Predicate{Telerik.JustMock.AutoMock.Ninject.Activation.IContext})">
            <summary>
            Indicates that the binding should be used only when any ancestor matches the specified predicate.
            </summary>
            <param name="predicate">The predicate to match.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WhenNoAncestorMatches(System.Predicate{Telerik.JustMock.AutoMock.Ninject.Activation.IContext})">
            <summary>
            Indicates that the binding should be used only when no ancestor matches the specified predicate.
            </summary>
            <param name="predicate">The predicate to match.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.Named(System.String)">
            <summary>
            Indicates that the binding should be registered with the specified name. Names are not
            necessarily unique; multiple bindings for a given service may be registered with the same name.
            </summary>
            <param name="name">The name to give the binding.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.InSingletonScope">
            <summary>
            Indicates that only a single instance of the binding should be created, and then
            should be re-used for all subsequent requests.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.InTransientScope">
            <summary>
            Indicates that instances activated via the binding should not be re-used, nor have
            their lifecycle managed by Ninject.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.InThreadScope">
            <summary>
            Indicates that instances activated via the binding should be re-used within the same thread.
            </summary>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.InScope(System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,System.Object})">
            <summary>
            Indicates that instances activated via the binding should be re-used as long as the object
            returned by the provided callback remains alive (that is, has not been garbage collected).
            </summary>
            <param name="scope">The callback that returns the scope.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WithConstructorArgument(System.String,System.Object)">
            <summary>
            Indicates that the specified constructor argument should be overridden with the specified value.
            </summary>
            <param name="name">The name of the argument to override.</param>
            <param name="value">The value for the argument.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WithConstructorArgument(System.String,System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,System.Object})">
            <summary>
            Indicates that the specified constructor argument should be overridden with the specified value.
            </summary>
            <param name="name">The name of the argument to override.</param>
            <param name="callback">The callback to invoke to get the value for the argument.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WithConstructorArgument(System.String,System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>
            Indicates that the specified constructor argument should be overridden with the specified value.
            </summary>
            <param name="name">The name of the argument to override.</param>
            <param name="callback">The callback to invoke to get the value for the argument.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WithPropertyValue(System.String,System.Object)">
            <summary>
            Indicates that the specified property should be injected with the specified value.
            </summary>
            <param name="name">The name of the property to override.</param>
            <param name="value">The value for the property.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WithPropertyValue(System.String,System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,System.Object})">
            <summary>
            Indicates that the specified property should be injected with the specified value.
            </summary>
            <param name="name">The name of the property to override.</param>
            <param name="callback">The callback to invoke to get the value for the property.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WithPropertyValue(System.String,System.Func{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>
            Indicates that the specified property should be injected with the specified value.
            </summary>
            <param name="name">The name of the property to override.</param>
            <param name="callback">The callback to invoke to get the value for the property.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WithParameter(Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter)">
            <summary>
            Adds a custom parameter to the binding.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.WithMetadata(System.String,System.Object)">
            <summary>
            Sets the value of a piece of metadata on the binding.
            </summary>
            <param name="key">The metadata key.</param>
            <param name="value">The metadata value.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.OnActivation(System.Action{`0})">
            <summary>
            Indicates that the specified callback should be invoked when instances are activated.
            </summary>
            <param name="action">The action callback.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.OnActivation``1(System.Action{``0})">
            <summary>
            Indicates that the specified callback should be invoked when instances are activated.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="action">The action callback.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.OnActivation(System.Action{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,`0})">
            <summary>
            Indicates that the specified callback should be invoked when instances are activated.
            </summary>
            <param name="action">The action callback.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.OnActivation``1(System.Action{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,``0})">
            <summary>
            Indicates that the specified callback should be invoked when instances are activated.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="action">The action callback.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.OnDeactivation(System.Action{`0})">
            <summary>
            Indicates that the specified callback should be invoked when instances are deactivated.
            </summary>
            <param name="action">The action callback.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.OnDeactivation``1(System.Action{``0})">
            <summary>
            Indicates that the specified callback should be invoked when instances are deactivated.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="action">The action callback.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.OnDeactivation(System.Action{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,`0})">
            <summary>
            Indicates that the specified callback should be invoked when instances are deactivated.
            </summary>
            <param name="action">The action callback.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.OnDeactivation``1(System.Action{Telerik.JustMock.AutoMock.Ninject.Activation.IContext,``0})">
            <summary>
            Indicates that the specified callback should be invoked when instances are deactivated.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="action">The action callback.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.BindingConfiguration">
            <summary>
            Gets the binding being built.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingConfigurationBuilder`1.Kernel">
            <summary>
            Gets the kernel.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingMetadata">
            <summary>
            Additional information available about a binding, which can be used in constraints
            to select bindings to use in activation.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingMetadata">
            <summary>
            Additional information available about a binding, which can be used in constraints
            to select bindings to use in activation.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingMetadata.Has(System.String)">
            <summary>
            Determines whether a piece of metadata with the specified key has been defined.
            </summary>
            <param name="key">The metadata key.</param>
            <returns><c>True</c> if such a piece of metadata exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingMetadata.Get``1(System.String)">
            <summary>
            Gets the value of metadata defined with the specified key, cast to the specified type.
            </summary>
            <typeparam name="T">The type of value to expect.</typeparam>
            <param name="key">The metadata key.</param>
            <returns>The metadata value.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingMetadata.Get``1(System.String,``0)">
            <summary>
            Gets the value of metadata defined with the specified key.
            </summary>
            <param name="key">The metadata key.</param>
            <param name="defaultValue">The value to return if the binding has no metadata set with the specified key.</param>
            <returns>The metadata value, or the default value if none was set.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingMetadata.Set(System.String,System.Object)">
            <summary>
            Sets the value of a piece of metadata.
            </summary>
            <param name="key">The metadata key.</param>
            <param name="value">The metadata value.</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingMetadata.Name">
            <summary>
            Gets or sets the binding's name.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingMetadata.Has(System.String)">
            <summary>
            Determines whether a piece of metadata with the specified key has been defined.
            </summary>
            <param name="key">The metadata key.</param>
            <returns><c>True</c> if such a piece of metadata exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingMetadata.Get``1(System.String)">
            <summary>
            Gets the value of metadata defined with the specified key, cast to the specified type.
            </summary>
            <typeparam name="T">The type of value to expect.</typeparam>
            <param name="key">The metadata key.</param>
            <returns>The metadata value.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingMetadata.Get``1(System.String,``0)">
            <summary>
            Gets the value of metadata defined with the specified key.
            </summary>
            <param name="key">The metadata key.</param>
            <param name="defaultValue">The value to return if the binding has no metadata set with the specified key.</param>
            <returns>The metadata value, or the default value if none was set.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingMetadata.Set(System.String,System.Object)">
            <summary>
            Sets the value of a piece of metadata.
            </summary>
            <param name="key">The metadata key.</param>
            <param name="value">The metadata value.</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingMetadata.Name">
            <summary>
            Gets or sets the binding's name.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingTarget">
            <summary>
            Describes the target of a binding.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingTarget.Self">
            <summary>
            Indicates that the binding is from a type to itself.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingTarget.Type">
            <summary>
            Indicates that the binding is from one type to another.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingTarget.Provider">
            <summary>
            Indicates that the binding is from a type to a provider.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingTarget.Method">
            <summary>
            Indicates that the binding is from a type to a callback method.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.BindingTarget.Constant">
            <summary>
            Indicates that the binding is from a type to a constant value.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Resolvers.DefaultValueBindingResolver">
            <summary>
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Resolvers.DefaultValueBindingResolver.Resolve(Telerik.JustMock.AutoMock.Ninject.Infrastructure.Multimap{System.Type,Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding},Telerik.JustMock.AutoMock.Ninject.Activation.IRequest)">
            <summary>
            Returns any bindings from the specified collection that match the specified service.
            </summary>
            <param name="bindings">The multimap of all registered bindings.</param>
            <param name="request">The service in question.</param>
            <returns>The series of matching bindings.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Resolvers.IBindingResolver">
            <summary>
            Contains logic about which bindings to use for a given service request.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Resolvers.IBindingResolver.Resolve(Telerik.JustMock.AutoMock.Ninject.Infrastructure.Multimap{System.Type,Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding},System.Type)">
            <summary>
            Returns any bindings from the specified collection that match the specified service.
            </summary>
            <param name="bindings">The multimap of all registered bindings.</param>
            <param name="service">The service in question.</param>
            <returns>The series of matching bindings.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Resolvers.OpenGenericBindingResolver">
            <summary>
            Resolves bindings for open generic types.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Resolvers.OpenGenericBindingResolver.Resolve(Telerik.JustMock.AutoMock.Ninject.Infrastructure.Multimap{System.Type,Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding},System.Type)">
            <summary>
            Returns any bindings from the specified collection that match the specified service.
            </summary>
            <param name="bindings">The multimap of all registered bindings.</param>
            <param name="service">The service in question.</param>
            <returns>The series of matching bindings.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Resolvers.SelfBindingResolver">
            <summary>
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Resolvers.SelfBindingResolver.Resolve(Telerik.JustMock.AutoMock.Ninject.Infrastructure.Multimap{System.Type,Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding},Telerik.JustMock.AutoMock.Ninject.Activation.IRequest)">
            <summary>
            Returns any bindings from the specified collection that match the specified service.
            </summary>
            <param name="bindings">The multimap of all registered bindings.</param>
            <param name="request">The service in question.</param>
            <returns>The series of matching bindings.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Resolvers.SelfBindingResolver.TypeIsSelfBindable(System.Type)">
            <summary>
            Returns a value indicating whether the specified service is self-bindable.
            </summary>
            <param name="service">The service.</param>
            <returns><see langword="True"/> if the type is self-bindable; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Resolvers.StandardBindingResolver">
            <summary>
            Resolves bindings that have been registered directly for the service.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.Resolvers.StandardBindingResolver.Resolve(Telerik.JustMock.AutoMock.Ninject.Infrastructure.Multimap{System.Type,Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBinding},System.Type)">
            <summary>
            Returns any bindings from the specified collection that match the specified service.
            </summary>
            <param name="bindings">The multimap of all registered bindings.</param>
            <param name="service">The service in question.</param>
            <returns>The series of matching bindings.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.ConstructorInjectionDirective">
            <summary>
            Describes the injection of a constructor.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.MethodInjectionDirectiveBase`2">
            <summary>
            Describes the injection of a method or constructor.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.IDirective">
            <summary>
            A piece of information used in an <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.IPlan"/>. (Just a marker.)
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.MethodInjectionDirectiveBase`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the MethodInjectionDirectiveBase&lt;TMethod, TInjector&gt; class.
            </summary>
            <param name="method">The method this directive represents.</param>
            <param name="injector">The injector that will be triggered.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.MethodInjectionDirectiveBase`2.CreateTargetsFromParameters(`0)">
            <summary>
            Creates targets for the parameters of the method.
            </summary>
            <param name="method">The method.</param>
            <returns>The targets for the method's parameters.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.MethodInjectionDirectiveBase`2.Injector">
            <summary>
            Gets or sets the injector that will be triggered.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.MethodInjectionDirectiveBase`2.Targets">
            <summary>
            Gets or sets the targets for the directive.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.ConstructorInjectionDirective.#ctor(System.Reflection.ConstructorInfo,Telerik.JustMock.AutoMock.Ninject.Injection.ConstructorInjector)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.ConstructorInjectionDirective"/> class.
            </summary>
            <param name="constructor">The constructor described by the directive.</param>
            <param name="injector">The injector that will be triggered.</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.ConstructorInjectionDirective.Constructor">
            <summary>
            The base .ctor definition.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.MethodInjectionDirective">
            <summary>
            Describes the injection of a method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.MethodInjectionDirective.#ctor(System.Reflection.MethodInfo,Telerik.JustMock.AutoMock.Ninject.Injection.MethodInjector)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.MethodInjectionDirective"/> class.
            </summary>
            <param name="method">The method described by the directive.</param>
            <param name="injector">The injector that will be triggered.</param>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.PropertyInjectionDirective">
            <summary>
            Describes the injection of a property.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.PropertyInjectionDirective.#ctor(System.Reflection.PropertyInfo,Telerik.JustMock.AutoMock.Ninject.Injection.PropertyInjector)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.PropertyInjectionDirective"/> class.
            </summary>
            <param name="member">The member the directive describes.</param>
            <param name="injector">The injector that will be triggered.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.PropertyInjectionDirective.CreateTarget(System.Reflection.PropertyInfo)">
            <summary>
            Creates a target for the property.
            </summary>
            <param name="propertyInfo">The property.</param>
            <returns>The target for the property.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.PropertyInjectionDirective.Injector">
            <summary>
            Gets or sets the injector that will be triggered.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.PropertyInjectionDirective.Target">
            <summary>
            Gets or sets the injection target for the directive.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.IPlan">
            <summary>
            Describes the means by which a type should be activated.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.IPlan.Add(Telerik.JustMock.AutoMock.Ninject.Planning.Directives.IDirective)">
            <summary>
            Adds the specified directive to the plan.
            </summary>
            <param name="directive">The directive.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.IPlan.Has``1">
            <summary>
            Determines whether the plan contains one or more directives of the specified type.
            </summary>
            <typeparam name="TDirective">The type of directive.</typeparam>
            <returns><c>True</c> if the plan has one or more directives of the type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.IPlan.GetOne``1">
            <summary>
            Gets the first directive of the specified type from the plan.
            </summary>
            <typeparam name="TDirective">The type of directive.</typeparam>
            <returns>The first directive, or <see langword="null"/> if no matching directives exist.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.IPlan.GetAll``1">
            <summary>
            Gets all directives of the specified type that exist in the plan.
            </summary>
            <typeparam name="TDirective">The type of directive.</typeparam>
            <returns>A series of directives of the specified type.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.IPlan.Type">
            <summary>
            Gets the type that the plan describes.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.IPlanner">
            <summary>
            Generates plans for how to activate instances.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.IPlanner.GetPlan(System.Type)">
            <summary>
            Gets or creates an activation plan for the specified type.
            </summary>
            <param name="type">The type for which a plan should be created.</param>
            <returns>The type's activation plan.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.IPlanner.Strategies">
            <summary>
            Gets the strategies that contribute to the planning process.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Plan">
            <summary>
            Describes the means by which a type should be activated.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Plan.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Plan"/> class.
            </summary>
            <param name="type">The type the plan describes.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Plan.Add(Telerik.JustMock.AutoMock.Ninject.Planning.Directives.IDirective)">
            <summary>
            Adds the specified directive to the plan.
            </summary>
            <param name="directive">The directive.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Plan.Has``1">
            <summary>
            Determines whether the plan contains one or more directives of the specified type.
            </summary>
            <typeparam name="TDirective">The type of directive.</typeparam>
            <returns><c>True</c> if the plan has one or more directives of the type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Plan.GetOne``1">
            <summary>
            Gets the first directive of the specified type from the plan.
            </summary>
            <typeparam name="TDirective">The type of directive.</typeparam>
            <returns>The first directive, or <see langword="null"/> if no matching directives exist.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Plan.GetAll``1">
            <summary>
            Gets all directives of the specified type that exist in the plan.
            </summary>
            <typeparam name="TDirective">The type of directive.</typeparam>
            <returns>A series of directives of the specified type.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Plan.Type">
            <summary>
            Gets the type that the plan describes.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Plan.Directives">
            <summary>
            Gets the directives defined in the plan.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Planner">
            <summary>
            Generates plans for how to activate instances.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Planner.#ctor(System.Collections.Generic.IEnumerable{Telerik.JustMock.AutoMock.Ninject.Planning.Strategies.IPlanningStrategy})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Planner"/> class.
            </summary>
            <param name="strategies">The strategies to execute during planning.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Planner.GetPlan(System.Type)">
            <summary>
            Gets or creates an activation plan for the specified type.
            </summary>
            <param name="type">The type for which a plan should be created.</param>
            <returns>The type's activation plan.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Planner.CreateEmptyPlan(System.Type)">
            <summary>
            Creates an empty plan for the specified type.
            </summary>
            <param name="type">The type for which a plan should be created.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Planner.CreateNewPlan(System.Type)">
            <summary>
            Creates a new plan for the specified type.
            This method requires an active reader lock!
            </summary>
            <param name="type">The type.</param>
            <returns>The newly created plan.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Planner.Strategies">
            <summary>
            Gets the strategies that contribute to the planning process.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Strategies.ConstructorReflectionStrategy">
            <summary>
            Adds a directive to plans indicating which constructor should be injected during activation.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Strategies.IPlanningStrategy">
            <summary>
            Contributes to the generation of a <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.IPlan"/>.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Strategies.IPlanningStrategy.Execute(Telerik.JustMock.AutoMock.Ninject.Planning.IPlan)">
            <summary>
            Contributes to the specified plan.
            </summary>
            <param name="plan">The plan that is being generated.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Strategies.ConstructorReflectionStrategy.#ctor(Telerik.JustMock.AutoMock.Ninject.Selection.ISelector,Telerik.JustMock.AutoMock.Ninject.Injection.IInjectorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Strategies.ConstructorReflectionStrategy"/> class.
            </summary>
            <param name="selector">The selector component.</param>
            <param name="injectorFactory">The injector factory component.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Strategies.ConstructorReflectionStrategy.Execute(Telerik.JustMock.AutoMock.Ninject.Planning.IPlan)">
            <summary>
            Adds a <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.ConstructorInjectionDirective"/> to the plan for the constructor
            that should be injected.
            </summary>
            <param name="plan">The plan that is being generated.</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Strategies.ConstructorReflectionStrategy.Selector">
            <summary>
            Gets the selector component.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Strategies.ConstructorReflectionStrategy.InjectorFactory">
            <summary>
            Gets the injector factory component.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Strategies.MethodReflectionStrategy">
            <summary>
            Adds directives to plans indicating which methods should be injected during activation.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Strategies.MethodReflectionStrategy.#ctor(Telerik.JustMock.AutoMock.Ninject.Selection.ISelector,Telerik.JustMock.AutoMock.Ninject.Injection.IInjectorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Strategies.MethodReflectionStrategy"/> class.
            </summary>
            <param name="selector">The selector component.</param>
            <param name="injectorFactory">The injector factory component.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Strategies.MethodReflectionStrategy.Execute(Telerik.JustMock.AutoMock.Ninject.Planning.IPlan)">
            <summary>
            Adds a <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.MethodInjectionDirective"/> to the plan for each method
            that should be injected.
            </summary>
            <param name="plan">The plan that is being generated.</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Strategies.MethodReflectionStrategy.Selector">
            <summary>
            Gets the selector component.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Strategies.MethodReflectionStrategy.InjectorFactory">
            <summary>
            Gets the injector factory component.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Strategies.PropertyReflectionStrategy">
            <summary>
            Adds directives to plans indicating which properties should be injected during activation.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Strategies.PropertyReflectionStrategy.#ctor(Telerik.JustMock.AutoMock.Ninject.Selection.ISelector,Telerik.JustMock.AutoMock.Ninject.Injection.IInjectorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Strategies.PropertyReflectionStrategy"/> class.
            </summary>
            <param name="selector">The selector component.</param>
            <param name="injectorFactory">The injector factory component.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Strategies.PropertyReflectionStrategy.Execute(Telerik.JustMock.AutoMock.Ninject.Planning.IPlan)">
            <summary>
            Adds a <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Directives.PropertyInjectionDirective"/> to the plan for each property
            that should be injected.
            </summary>
            <param name="plan">The plan that is being generated.</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Strategies.PropertyReflectionStrategy.Selector">
            <summary>
            Gets the selector component.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Strategies.PropertyReflectionStrategy.InjectorFactory">
            <summary>
            Gets the injector factory component.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget">
            <summary>
            Represents a site on a type where a value will be injected.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget.ResolveWithin(Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Resolves a value for the target within the specified parent context.
            </summary>
            <param name="parent">The parent context.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget.Type">
            <summary>
            Gets the type of the target.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget.Name">
            <summary>
            Gets the name of the target.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget.Member">
            <summary>
            Gets the member that contains the target.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget.Constraint">
            <summary>
            Gets the constraint defined on the target.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget.IsOptional">
            <summary>
            Gets a value indicating whether the target represents an optional dependency.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget.HasDefaultValue">
            <summary>
            Gets a value indicating whether the target has a default value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget.DefaultValue">
            <summary>
            Gets the default value for the target.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the item does not have a default value.</exception>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ParameterTarget">
            <summary>
            Represents an injection target for a <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.Target`1">
            <summary>
            Represents a site on a type where a value can be injected.
            </summary>
            <typeparam name="T">The type of site this represents.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.Target`1.#ctor(System.Reflection.MemberInfo,`0)">
            <summary>
            Initializes a new instance of the Target&lt;T&gt; class.
            </summary>
            <param name="member">The member that contains the target.</param>
            <param name="site">The site represented by the target.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.Target`1.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Returns an array of custom attributes of a specified type defined on the target.
            </summary>
            <param name="attributeType">The type of attribute to search for.</param>
            <param name="inherit">Whether to look up the hierarchy chain for inherited custom attributes.</param>
            <returns>An array of custom attributes of the specified type.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.Target`1.GetCustomAttributes(System.Boolean)">
            <summary>
            Returns an array of custom attributes defined on the target.
            </summary>
            <param name="inherit">Whether to look up the hierarchy chain for inherited custom attributes.</param>
            <returns>An array of custom attributes.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.Target`1.IsDefined(System.Type,System.Boolean)">
            <summary>
            Returns a value indicating whether an attribute of the specified type is defined on the target.
            </summary>
            <param name="attributeType">The type of attribute to search for.</param>
            <param name="inherit">Whether to look up the hierarchy chain for inherited custom attributes.</param>
            <returns><c>True</c> if such an attribute is defined; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.Target`1.ResolveWithin(Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Resolves a value for the target within the specified parent context.
            </summary>
            <param name="parent">The parent context.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.Target`1.GetValues(System.Type,Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Gets the value(s) that should be injected into the target.
            </summary>
            <param name="service">The service that the target is requesting.</param>
            <param name="parent">The parent context in which the target is being injected.</param>
            <returns>A series of values that are available for injection.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.Target`1.GetValue(System.Type,Telerik.JustMock.AutoMock.Ninject.Activation.IContext)">
            <summary>
            Gets the value that should be injected into the target.
            </summary>
            <param name="service">The service that the target is requesting.</param>
            <param name="parent">The parent context in which the target is being injected.</param>
            <returns>The value that is to be injected.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.Target`1.ReadOptionalFromTarget">
            <summary>
            Reads whether the target represents an optional dependency.
            </summary>
            <returns><see langword="True"/> if it is optional; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.Target`1.ReadConstraintFromTarget">
            <summary>
            Reads the resolution constraint from target.
            </summary>
            <returns>The resolution constraint.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.Target`1.Member">
            <summary>
            Gets the member that contains the target.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.Target`1.Site">
            <summary>
            Gets or sets the site (property, parameter, etc.) represented by the target.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.Target`1.Name">
            <summary>
            Gets the name of the target.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.Target`1.Type">
            <summary>
            Gets the type of the target.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.Target`1.Constraint">
            <summary>
            Gets the constraint defined on the target.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.Target`1.IsOptional">
            <summary>
            Gets a value indicating whether the target represents an optional dependency.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.Target`1.HasDefaultValue">
            <summary>
            Gets a value indicating whether the target has a default value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.Target`1.DefaultValue">
            <summary>
            Gets the default value for the target.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the item does not have a default value.</exception>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ParameterTarget.#ctor(System.Reflection.MethodBase,System.Reflection.ParameterInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ParameterTarget"/> class.
            </summary>
            <param name="method">The method that defines the parameter.</param>
            <param name="site">The parameter that this target represents.</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ParameterTarget.Name">
            <summary>
            Gets the name of the target.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ParameterTarget.Type">
            <summary>
            Gets the type of the target.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ParameterTarget.HasDefaultValue">
            <summary>
            Gets a value indicating whether the target has a default value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ParameterTarget.DefaultValue">
            <summary>
            Gets the default value for the target.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the item does not have a default value.</exception>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.PropertyTarget">
            <summary>
            Represents an injection target for a <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.PropertyTarget.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.PropertyTarget"/> class.
            </summary>
            <param name="site">The property that this target represents.</param>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.PropertyTarget.Name">
            <summary>
            Gets the name of the target.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Planning.Targets.PropertyTarget.Type">
            <summary>
            Gets the type of the target.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Selection.Heuristics.IConstructorScorer">
            <summary>
            Generates scores for constructors, to determine which is the best one to call during activation.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Selection.Heuristics.IConstructorScorer.Score(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Directives.ConstructorInjectionDirective)">
            <summary>
            Gets the score for the specified constructor.
            </summary>
            <param name="context">The injection context.</param>
            <param name="directive">The constructor.</param>
            <returns>The constructor's score.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Selection.Heuristics.IInjectionHeuristic">
            <summary>
            Determines whether members should be injected during activation.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Selection.Heuristics.IInjectionHeuristic.ShouldInject(System.Reflection.MemberInfo)">
            <summary>
            Returns a value indicating whether the specified member should be injected.
            </summary>
            <param name="member">The member in question.</param>
            <returns><c>True</c> if the member should be injected; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Selection.Heuristics.SpecificConstructorSelector">
            <summary>
            Constructor selector that selects the constructor matching the one passed to the constructor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Selection.Heuristics.SpecificConstructorSelector.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Selection.Heuristics.SpecificConstructorSelector"/> class.
            </summary>
            <param name="constructorInfo">The constructor info of the constructor that shall be selected.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Selection.Heuristics.SpecificConstructorSelector.Score(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Directives.ConstructorInjectionDirective)">
            <summary>
            Gets the score for the specified constructor.
            </summary>
            <param name="context">The injection context.</param>
            <param name="directive">The constructor.</param>
            <returns>The constructor's score.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Selection.Heuristics.StandardConstructorScorer">
            <summary>
            Scores constructors by either looking for the existence of an injection marker
            attribute, or by counting the number of parameters.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Selection.Heuristics.StandardConstructorScorer.Score(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Directives.ConstructorInjectionDirective)">
            <summary>
            Gets the score for the specified constructor.
            </summary>
            <param name="context">The injection context.</param>
            <param name="directive">The constructor.</param>
            <returns>The constructor's score.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Selection.Heuristics.StandardConstructorScorer.BindingExists(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget)">
            <summary>
            Checkes whether a binding exists for a given target.
            </summary>
            <param name="context">The context.</param>
            <param name="target">The target.</param>
            <returns>Whether a binding exists for the target in the given context.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Selection.Heuristics.StandardConstructorScorer.BindingExists(Telerik.JustMock.AutoMock.Ninject.IKernel,Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget)">
            <summary>
            Checkes whether a binding exists for a given target on the specified kernel.
            </summary>
            <param name="kernel">The kernel.</param>
            <param name="context">The context.</param>
            <param name="target">The target.</param>
            <returns>Whether a binding exists for the target in the given context.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Selection.Heuristics.StandardConstructorScorer.ParameterExists(Telerik.JustMock.AutoMock.Ninject.Activation.IContext,Telerik.JustMock.AutoMock.Ninject.Planning.Targets.ITarget)">
            <summary>
            Checks whether any parameters exist for the geiven target..
            </summary>
            <param name="context">The context.</param>
            <param name="target">The target.</param>
            <returns>Whether a parameter exists for the target in the given context.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Selection.Heuristics.StandardInjectionHeuristic">
            <summary>
            Determines whether members should be injected during activation by checking
            if they are decorated with an injection marker attribute.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Selection.Heuristics.StandardInjectionHeuristic.ShouldInject(System.Reflection.MemberInfo)">
            <summary>
            Returns a value indicating whether the specified member should be injected.
            </summary>
            <param name="member">The member in question.</param>
            <returns><c>True</c> if the member should be injected; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Selection.ISelector">
            <summary>
            Selects members for injection.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Selection.ISelector.SelectConstructorsForInjection(System.Type)">
            <summary>
            Selects the constructor to call on the specified type, by using the constructor scorer.
            </summary>
            <param name="type">The type.</param>
            <returns>The selected constructor, or <see langword="null"/> if none were available.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Selection.ISelector.SelectPropertiesForInjection(System.Type)">
            <summary>
            Selects properties that should be injected.
            </summary>
            <param name="type">The type.</param>
            <returns>A series of the selected properties.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Selection.ISelector.SelectMethodsForInjection(System.Type)">
            <summary>
            Selects methods that should be injected.
            </summary>
            <param name="type">The type.</param>
            <returns>A series of the selected methods.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Selection.ISelector.ConstructorScorer">
            <summary>
            Gets or sets the constructor scorer.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Selection.ISelector.InjectionHeuristics">
            <summary>
            Gets the heuristics used to determine which members should be injected.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.Selection.Selector">
            <summary>
            Selects members for injection.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Selection.Selector.#ctor(Telerik.JustMock.AutoMock.Ninject.Selection.Heuristics.IConstructorScorer,System.Collections.Generic.IEnumerable{Telerik.JustMock.AutoMock.Ninject.Selection.Heuristics.IInjectionHeuristic})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.AutoMock.Ninject.Selection.Selector"/> class.
            </summary>
            <param name="constructorScorer">The constructor scorer.</param>
            <param name="injectionHeuristics">The injection heuristics.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Selection.Selector.SelectConstructorsForInjection(System.Type)">
            <summary>
            Selects the constructor to call on the specified type, by using the constructor scorer.
            </summary>
            <param name="type">The type.</param>
            <returns>The selected constructor, or <see langword="null"/> if none were available.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Selection.Selector.SelectPropertiesForInjection(System.Type)">
            <summary>
            Selects properties that should be injected.
            </summary>
            <param name="type">The type.</param>
            <returns>A series of the selected properties.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.Selection.Selector.SelectMethodsForInjection(System.Type)">
            <summary>
            Selects methods that should be injected.
            </summary>
            <param name="type">The type.</param>
            <returns>A series of the selected methods.</returns>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Selection.Selector.Flags">
            <summary>
            Gets the default binding flags.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Selection.Selector.ConstructorScorer">
            <summary>
            Gets or sets the constructor scorer.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.AutoMock.Ninject.Selection.Selector.InjectionHeuristics">
            <summary>
            Gets the property injection heuristics.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.ModuleLoadExtensions">
            <summary>
            Extension methods that enhance module loading.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ModuleLoadExtensions.Load``1(Telerik.JustMock.AutoMock.Ninject.IKernel)">
            <summary>
            Creates a new instance of the module and loads it into the kernel.
            </summary>
            <typeparam name="TModule">The type of the module.</typeparam>
            <param name="kernel">The kernel.</param>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ModuleLoadExtensions.Load(Telerik.JustMock.AutoMock.Ninject.IKernel,Telerik.JustMock.AutoMock.Ninject.Modules.INinjectModule[])">
            <summary>
            Loads the module(s) into the kernel.
            </summary>
            <param name="kernel">The kernel.</param>
            <param name="modules">The modules to load.</param>
        </member>
        <member name="T:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions">
            <summary>
            Extensions that enhance resolution of services.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.Get``1(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <typeparam name="T">The service to resolve.</typeparam>
            <param name="root">The resolution root.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.Get``1(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,System.String,Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Gets an instance of the specified service by using the first binding with the specified name.
            </summary>
            <typeparam name="T">The service to resolve.</typeparam>
            <param name="root">The resolution root.</param>
            <param name="name">The name of the binding.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.Get``1(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,System.Func{Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Gets an instance of the specified service by using the first binding that matches the specified constraint.
            </summary>
            <typeparam name="T">The service to resolve.</typeparam>
            <param name="root">The resolution root.</param>
            <param name="constraint">The constraint to apply to the binding.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.TryGet``1(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Tries to get an instance of the specified service.
            </summary>
            <typeparam name="T">The service to resolve.</typeparam>
            <param name="root">The resolution root.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>An instance of the service, or <see langword="null"/> if no implementation was available.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.TryGet``1(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,System.String,Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Tries to get an instance of the specified service by using the first binding with the specified name.
            </summary>
            <typeparam name="T">The service to resolve.</typeparam>
            <param name="root">The resolution root.</param>
            <param name="name">The name of the binding.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>An instance of the service, or <see langword="null"/> if no implementation was available.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.TryGet``1(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,System.Func{Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Tries to get an instance of the specified service by using the first binding that matches the specified constraint.
            </summary>
            <typeparam name="T">The service to resolve.</typeparam>
            <param name="root">The resolution root.</param>
            <param name="constraint">The constraint to apply to the binding.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>An instance of the service, or <see langword="null"/> if no implementation was available.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.GetAll``1(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Gets all available instances of the specified service.
            </summary>
            <typeparam name="T">The service to resolve.</typeparam>
            <param name="root">The resolution root.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.GetAll``1(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,System.String,Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Gets all instances of the specified service using bindings registered with the specified name.
            </summary>
            <typeparam name="T">The service to resolve.</typeparam>
            <param name="root">The resolution root.</param>
            <param name="name">The name of the binding.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.GetAll``1(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,System.Func{Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Gets all instances of the specified service by using the bindings that match the specified constraint.
            </summary>
            <typeparam name="T">The service to resolve.</typeparam>
            <param name="root">The resolution root.</param>
            <param name="constraint">The constraint to apply to the bindings.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.Get(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,System.Type,Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <param name="root">The resolution root.</param>
            <param name="service">The service to resolve.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.Get(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,System.Type,System.String,Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Gets an instance of the specified service by using the first binding with the specified name.
            </summary>
            <param name="root">The resolution root.</param>
            <param name="service">The service to resolve.</param>
            <param name="name">The name of the binding.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.Get(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,System.Type,System.Func{Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Gets an instance of the specified service by using the first binding that matches the specified constraint.
            </summary>
            <param name="root">The resolution root.</param>
            <param name="service">The service to resolve.</param>
            <param name="constraint">The constraint to apply to the binding.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.TryGet(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,System.Type,Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Tries to get an instance of the specified service.
            </summary>
            <param name="root">The resolution root.</param>
            <param name="service">The service to resolve.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>An instance of the service, or <see langword="null"/> if no implementation was available.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.TryGet(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,System.Type,System.String,Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Tries to get an instance of the specified service by using the first binding with the specified name.
            </summary>
            <param name="root">The resolution root.</param>
            <param name="service">The service to resolve.</param>
            <param name="name">The name of the binding.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>An instance of the service, or <see langword="null"/> if no implementation was available.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.TryGet(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,System.Type,System.Func{Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Tries to get an instance of the specified service by using the first binding that matches the specified constraint.
            </summary>
            <param name="root">The resolution root.</param>
            <param name="service">The service to resolve.</param>
            <param name="constraint">The constraint to apply to the binding.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>An instance of the service, or <see langword="null"/> if no implementation was available.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.GetAll(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,System.Type,Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Gets all available instances of the specified service.
            </summary>
            <param name="root">The resolution root.</param>
            <param name="service">The service to resolve.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.GetAll(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,System.Type,System.String,Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Gets all instances of the specified service using bindings registered with the specified name.
            </summary>
            <param name="root">The resolution root.</param>
            <param name="service">The service to resolve.</param>
            <param name="name">The name of the binding.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.GetAll(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,System.Type,System.Func{Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Gets all instances of the specified service by using the bindings that match the specified constraint.
            </summary>
            <param name="root">The resolution root.</param>
            <param name="service">The service to resolve.</param>
            <param name="constraint">The constraint to apply to the bindings.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>A series of instances of the service.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.CanResolve``1(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Evaluates if an instance of the specified service can be resolved.
            </summary>
            <typeparam name="T">The service to resolve.</typeparam>
            <param name="root">The resolution root.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.CanResolve``1(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,System.String,Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Evaluates if  an instance of the specified service by using the first binding with the specified name can be resolved.
            </summary>
            <typeparam name="T">The service to resolve.</typeparam>
            <param name="root">The resolution root.</param>
            <param name="name">The name of the binding.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.CanResolve``1(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,System.Func{Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Evaluates if  an instance of the specified service by using the first binding that matches the specified constraint can be resolved.
            </summary>
            <typeparam name="T">The service to resolve.</typeparam>
            <param name="root">The resolution root.</param>
            <param name="constraint">The constraint to apply to the binding.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.CanResolve(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,System.Type,Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Gets an instance of the specified service.
            </summary>
            <param name="root">The resolution root.</param>
            <param name="service">The service to resolve.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.CanResolve(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,System.Type,System.String,Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Gets an instance of the specified service by using the first binding with the specified name.
            </summary>
            <param name="root">The resolution root.</param>
            <param name="service">The service to resolve.</param>
            <param name="name">The name of the binding.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:Telerik.JustMock.AutoMock.Ninject.ResolutionExtensions.CanResolve(Telerik.JustMock.AutoMock.Ninject.Syntax.IResolutionRoot,System.Type,System.Func{Telerik.JustMock.AutoMock.Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},Telerik.JustMock.AutoMock.Ninject.Parameters.IParameter[])">
            <summary>
            Gets an instance of the specified service by using the first binding that matches the specified constraint.
            </summary>
            <param name="root">The resolution root.</param>
            <param name="service">The service to resolve.</param>
            <param name="constraint">The constraint to apply to the binding.</param>
            <param name="parameters">The parameters to pass to the request.</param>
            <returns>An instance of the service.</returns>
        </member>
        <member name="T:Telerik.JustMock.Behavior">
            <summary>
            Specifies the behavior of the mock.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Behavior.Loose">
            <summary>
            Specifies that by default mock calls will behave like a stub, unless explicitly setup.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Behavior.RecursiveLoose">
            <summary>
            Specifies that by default mock calls will return mock objects, unless explicitly setup.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Behavior.Strict">
            <summary>
            Specifies that any calls made on the mock 
            will throw an exception if not explictly set.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Behavior.CallOriginal">
            <summary>
            Specifies that by default all calls made on mock will invoke its 
            corresponding original member unless some expecations are set.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Constructor">
            <summary>
            Defines the behavior of target constructor.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Constructor.NotMocked">
            <summary>
            Specifies that the constructor should not be mocked. 
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Constructor.Mocked">
            <summary>
            Specifies that the constructor should be mocked
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Setup.AllowedMockableTypes">
            <summary>
            Contains a list of types that are exempt from sanity checks when mocking.
            </summary>
            <remarks>
            It might not be safe to mock some types, but sometimes other types might be safe but come out as false positives in the sanity checks.
            Add these types to the list to try to mock them anyway. Mind that mocking certain types will not be possible, even if
            they're added to this list. Also mind that 
            </remarks>
        </member>
        <member name="F:Telerik.JustMock.Setup.AllowedMockableTypes.List">
            <summary>
            The collection of types that are exempt from sanity checks when mocking.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Setup.AllowedMockableTypes.Add``1">
            <summary>
            Adds a type to the list of exemptions. You can also add a type by calling <code>AllowedMockableTypes.List.Add(typeof(T)).</code>
            if you can't or don't want to use this helper method.
            </summary>
            <typeparam name="T">The type to add.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Core.Behaviors.IBehavior">
            <summary>
            An implementation detail interface. Not intended for external usage.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.MockException">
            <summary>
            Mock exception.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MockException"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MockException"/> class.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:Telerik.JustMock.MockException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MockException"/> class.
            </summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor">
            <summary>
              New interface that is going to be used by DynamicProxy 2
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.SilverlightExtensions.Extensions.IsNested(System.Type)">
            <summary>
            The silverlight System.Type is missing the IsNested property so this exposes similar functionality.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Internal.AttributesUtil">
            <summary>
              Helper class for retrieving attributes.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Internal.AttributesUtil.GetAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
              Gets the attribute.
            </summary>
            <param name = "member">The member.</param>
            <returns>The member attribute.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Internal.AttributesUtil.GetAttributes``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
              Gets the attributes. Does not consider inherited attributes!
            </summary>
            <param name = "member">The member.</param>
            <returns>The member attributes.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Internal.AttributesUtil.GetTypeAttribute``1(System.Type)">
            <summary>
              Gets the type attribute.
            </summary>
            <param name = "type">The type.</param>
            <returns>The type attribute.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Internal.AttributesUtil.GetTypeAttributes``1(System.Type)">
            <summary>
              Gets the type attributes.
            </summary>
            <param name = "type">The type.</param>
            <returns>The type attributes.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Internal.AttributesUtil.GetTypeConverter(System.Reflection.MemberInfo)">
            <summary>
              Gets the type converter.
            </summary>
            <param name = "member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Internal.AttributesUtil.HasAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
              Gets the attribute.
            </summary>
            <param name = "member">The member.</param>
            <returns>The member attribute.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Internal.CollectionExtensions.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
              Checks whether or not collection is null or empty. Assumes colleciton can be safely enumerated multiple times.
            </summary>
            <param name = "this"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Internal.Lock.Create">
            <summary>
            Creates a new lock.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.IServiceEnabledComponent">
            <summary>
            Defines that the implementation wants a 
            <see cref="T:System.IServiceProvider"/> in order to 
            access other components. The creator must be aware
            that the component might (or might not) implement 
            the interface.
            </summary>
            <remarks>
            Used by Castle Project components to, for example, 
            gather logging factories
            </remarks>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.IServiceProviderEx">
            <summary>
            Increments <c>IServiceProvider</c> with a generic service resolution operation.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.IServiceProviderExAccessor">
            <summary>
            This interface should be implemented by classes
            that are available in a bigger context, exposing
            the container to different areas in the same application.
            <para>
            For example, in Web application, the (global) HttpApplication
            subclasses should implement this interface to expose 
            the configured container
            </para>
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.IExtendedLoggerFactory">
            <summary>
              Provides a factory that can produce either <see cref="T:Telerik.JustMock.Core.Castle.Core.Logging.ILogger"/> or
              <see cref="T:Telerik.JustMock.Core.Castle.Core.Logging.IExtendedLogger"/> classes.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.ILoggerFactory">
            <summary>
              Manages the instantiation of <see cref="T:Telerik.JustMock.Core.Castle.Core.Logging.ILogger"/>s.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILoggerFactory.Create(System.Type)">
            <summary>
              Creates a new logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILoggerFactory.Create(System.String)">
            <summary>
              Creates a new logger.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILoggerFactory.Create(System.Type,Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILoggerFactory.Create(System.String,Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new logger.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.IExtendedLoggerFactory.Create(System.Type)">
            <summary>
              Creates a new extended logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.IExtendedLoggerFactory.Create(System.String)">
            <summary>
              Creates a new extended logger.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.IExtendedLoggerFactory.Create(System.Type,Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new extended logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.IExtendedLoggerFactory.Create(System.String,Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new extended logger.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.AbstractExtendedLoggerFactory.Create(System.Type)">
            <summary>
              Creates a new extended logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.AbstractExtendedLoggerFactory.Create(System.String)">
            <summary>
              Creates a new extended logger.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.AbstractExtendedLoggerFactory.Create(System.Type,Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new extended logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.AbstractExtendedLoggerFactory.Create(System.String,Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new extended logger.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.AbstractExtendedLoggerFactory.Telerik#JustMock#Core#Castle#Core#Logging#ILoggerFactory#Create(System.Type)">
            <summary>
              Creates a new logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.AbstractExtendedLoggerFactory.Telerik#JustMock#Core#Castle#Core#Logging#ILoggerFactory#Create(System.String)">
            <summary>
              Creates a new logger.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.AbstractExtendedLoggerFactory.Telerik#JustMock#Core#Castle#Core#Logging#ILoggerFactory#Create(System.Type,Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.AbstractExtendedLoggerFactory.Telerik#JustMock#Core#Castle#Core#Logging#ILoggerFactory#Create(System.String,Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new logger.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.AbstractExtendedLoggerFactory.GetConfigFile(System.String)">
            <summary>
              Gets the configuration file.
            </summary>
            <param name = "fileName">i.e. log4net.config</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.AbstractLoggerFactory.GetConfigFile(System.String)">
            <summary>
              Gets the configuration file.
            </summary>
            <param name = "fileName">i.e. log4net.config</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.ConsoleLogger">
            <summary>
            The Logger sending everything to the standard output streams.
            This is mainly for the cases when you have a utility that
            does not have a logger to supply.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger">
            <summary>
            The Level Filtered Logger class.  This is a base clase which
            provides a LogLevel attribute and reroutes all functions into
            one Log method.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.ILogger">
            <summary>
              Manages logging.
            </summary>
            <remarks>
              This is a facade for the different logging subsystems.
              It offers a simplified interface that follows IOC patterns
              and a simplified priority/level/severity abstraction.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.CreateChildLogger(System.String)">
            <summary>
              Create a new child logger.
              The name of the child logger is [current-loggers-name].[passed-in-name]
            </summary>
            <param name="loggerName">The Subname of this logger.</param>
            <returns>The New ILogger instance.</returns>
            <exception cref="T:System.ArgumentException">If the name has an empty element name.</exception>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Debug(System.String)">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Debug(System.Func{System.String})">
            <summary>
              Logs a debug message with lazily constructed message. The message will be constructed only if the <see cref="P:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.IsDebugEnabled"/> is true.
            </summary>
            <param name="messageFactory"></param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Debug(System.String,System.Exception)">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.DebugFormat(System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.DebugFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.DebugFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Error(System.String)">
            <summary>
              Logs an error message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Error(System.Func{System.String})">
            <summary>
              Logs an error message with lazily constructed message. The message will be constructed only if the <see cref="P:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.IsErrorEnabled"/> is true.
            </summary>
            <param name="messageFactory"></param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Error(System.String,System.Exception)">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.ErrorFormat(System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.ErrorFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.ErrorFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Fatal(System.String)">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Fatal(System.Func{System.String})">
            <summary>
              Logs a fatal message with lazily constructed message. The message will be constructed only if the <see cref="P:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.IsFatalEnabled"/> is true.
            </summary>
            <param name="messageFactory"></param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Fatal(System.String,System.Exception)">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.FatalFormat(System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.FatalFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.FatalFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Info(System.String)">
            <summary>
              Logs an info message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Info(System.Func{System.String})">
            <summary>
              Logs a info message with lazily constructed message. The message will be constructed only if the <see cref="P:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.IsInfoEnabled"/> is true.
            </summary>
            <param name="messageFactory"></param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Info(System.String,System.Exception)">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.InfoFormat(System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.InfoFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.InfoFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Warn(System.String)">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Warn(System.Func{System.String})">
            <summary>
              Logs a warn message with lazily constructed message. The message will be constructed only if the <see cref="P:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.IsWarnEnabled"/> is true.
            </summary>
            <param name="messageFactory"></param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.Warn(System.String,System.Exception)">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.WarnFormat(System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.WarnFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.WarnFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.IsDebugEnabled">
            <summary>
              Determines if messages of priority "debug" will be logged.
            </summary>
            <value>True if "debug" messages will be logged.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.IsErrorEnabled">
            <summary>
              Determines if messages of priority "error" will be logged.
            </summary>
            <value>True if "error" messages will be logged.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.IsFatalEnabled">
            <summary>
              Determines if messages of priority "fatal" will be logged.
            </summary>
            <value>True if "fatal" messages will be logged.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.IsInfoEnabled">
            <summary>
              Determines if messages of priority "info" will be logged.
            </summary>
            <value>True if "info" messages will be logged.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.ILogger.IsWarnEnabled">
            <summary>
              Determines if messages of priority "warn" will be logged.
            </summary>
            <value>True if "warn" messages will be logged.</value>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.#ctor">
            <summary>
              Creates a new <c>LevelFilteredLogger</c>.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Debug(System.String)">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Debug(System.String,System.Exception)">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.DebugFormat(System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.DebugFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.DebugFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Info(System.String)">
            <summary>
              Logs an info message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Info(System.String,System.Exception)">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.InfoFormat(System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.InfoFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.InfoFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Warn(System.String)">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Warn(System.String,System.Exception)">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.WarnFormat(System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.WarnFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.WarnFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Error(System.String)">
            <summary>
              Logs an error message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Error(System.String,System.Exception)">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.ErrorFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.ErrorFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Fatal(System.String)">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Fatal(System.String,System.Exception)">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.FatalFormat(System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.FatalFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.FatalFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Log(Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel,System.String,System.String,System.Exception)">
            <summary>
              Implementors output the log content by implementing this method only.
              Note that exception can be null
            </summary>
            <param name = "loggerLevel"></param>
            <param name = "loggerName"></param>
            <param name = "message"></param>
            <param name = "exception"></param>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Level">
            <value>
              The <c>LoggerLevel</c> that this logger
              will be using. Defaults to <c>LoggerLevel.Off</c>
            </value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.Name">
            <value>
              The name that this logger will be using. 
              Defaults to <c>String.Empty</c>
            </value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.IsDebugEnabled">
            <summary>
              Determines if messages of priority "debug" will be logged.
            </summary>
            <value><c>true</c> if log level flags include the <see cref="F:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel.Debug"/> bit</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.IsInfoEnabled">
            <summary>
              Determines if messages of priority "info" will be logged.
            </summary>
            <value><c>true</c> if log level flags include the <see cref="F:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel.Info"/> bit</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.IsWarnEnabled">
            <summary>
              Determines if messages of priority "warn" will be logged.
            </summary>
            <value><c>true</c> if log level flags include the <see cref="F:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel.Warn"/> bit</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.IsErrorEnabled">
            <summary>
              Determines if messages of priority "error" will be logged.
            </summary>
            <value><c>true</c> if log level flags include the <see cref="F:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel.Error"/> bit</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.LevelFilteredLogger.IsFatalEnabled">
            <summary>
              Determines if messages of priority "fatal" will be logged.
            </summary>
            <value><c>true</c> if log level flags include the <see cref="F:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel.Fatal"/> bit</value>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ConsoleLogger.#ctor">
            <summary>
              Creates a new ConsoleLogger with the <c>Level</c>
              set to <c>LoggerLevel.Debug</c> and the <c>Name</c>
              set to <c>String.Empty</c>.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ConsoleLogger.#ctor(Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new ConsoleLogger with the <c>Name</c>
              set to <c>String.Empty</c>.
            </summary>
            <param name = "logLevel">The logs Level.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ConsoleLogger.#ctor(System.String)">
            <summary>
              Creates a new ConsoleLogger with the <c>Level</c>
              set to <c>LoggerLevel.Debug</c>.
            </summary>
            <param name = "name">The logs Name.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ConsoleLogger.#ctor(System.String,Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new ConsoleLogger.
            </summary>
            <param name = "name">The logs Name.</param>
            <param name = "logLevel">The logs Level.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ConsoleLogger.Log(Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel,System.String,System.String,System.Exception)">
            <summary>
              A Common method to log.
            </summary>
            <param name = "loggerLevel">The level of logging</param>
            <param name = "loggerName">The name of the logger</param>
            <param name = "message">The Message</param>
            <param name = "exception">The Exception</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.ConsoleLogger.CreateChildLogger(System.String)">
            <summary>
              Returns a new <c>ConsoleLogger</c> with the name
              added after this loggers name, with a dot in between.
            </summary>
            <param name = "loggerName">The added hierarchical name.</param>
            <returns>A new <c>ConsoleLogger</c>.</returns>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.IContextProperties">
            <summary>
              Interface for Context Properties implementations
            </summary>
            <remarks>
              <para>
                This interface defines a basic property get set accessor.
              </para>
              <para>
                Based on the ContextPropertiesBase of log4net, by Nicko Cadell.
              </para>
            </remarks>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.IContextProperties.Item(System.String)">
            <summary>
              Gets or sets the value of a property
            </summary>
            <value>
              The value for the property with the specified key
            </value>
            <remarks>
              <para>
                Gets or sets the value of a property
              </para>
            </remarks>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.IExtendedLogger">
            <summary>
              Provides an interface that supports <see cref="T:Telerik.JustMock.Core.Castle.Core.Logging.ILogger"/> and
              allows the storage and retrieval of Contexts. These are supported in
              both log4net and NLog.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.IExtendedLogger.GlobalProperties">
            <summary>
              Exposes the Global Context of the extended logger.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.IExtendedLogger.ThreadProperties">
            <summary>
              Exposes the Thread Context of the extended logger.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.IExtendedLogger.ThreadStacks">
            <summary>
              Exposes the Thread Stack of the extended logger.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel">
            <summary>
              Supporting Logger levels.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel.Off">
            <summary>
              Logging will be off
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel.Fatal">
            <summary>
              Fatal logging level
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel.Error">
            <summary>
              Error logging level
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel.Warn">
            <summary>
              Warn logging level
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel.Info">
            <summary>
              Info logging level
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel.Debug">
            <summary>
              Debug logging level
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.NullLogFactory">
            <summary>
            NullLogFactory used when logging is turned off.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogFactory.Create(System.String)">
            <summary>
              Creates an instance of ILogger with the specified name.
            </summary>
            <param name = "name">Name.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogFactory.Create(System.String,Telerik.JustMock.Core.Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates an instance of ILogger with the specified name and LoggerLevel.
            </summary>
            <param name = "name">Name.</param>
            <param name = "level">Level.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger">
            <summary>
              The Null Logger class.  This is useful for implementations where you need
              to provide a logger to a utility class, but do not want any output from it.
              It also helps when you have a utility that does not have a logger to supply.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.CreateChildLogger(System.String)">
            <summary>
              Returns this <c>NullLogger</c>.
            </summary>
            <param name = "loggerName">Ignored</param>
            <returns>This ILogger instance.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.Debug(System.String)">
            <summary>
              No-op.
            </summary>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.Debug(System.String,System.Exception)">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.DebugFormat(System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.DebugFormat(System.Exception,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.DebugFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.Error(System.String)">
            <summary>
              No-op.
            </summary>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.Error(System.String,System.Exception)">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.ErrorFormat(System.Exception,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.ErrorFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.Fatal(System.String)">
            <summary>
              No-op.
            </summary>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.Fatal(System.String,System.Exception)">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.FatalFormat(System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.FatalFormat(System.Exception,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.FatalFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.Info(System.String)">
            <summary>
              No-op.
            </summary>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.Info(System.String,System.Exception)">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.InfoFormat(System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.InfoFormat(System.Exception,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.InfoFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.Warn(System.String)">
            <summary>
              No-op.
            </summary>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.Warn(System.String,System.Exception)">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.WarnFormat(System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.WarnFormat(System.Exception,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.WarnFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.GlobalProperties">
            <summary>
              Returns empty context properties.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.ThreadProperties">
            <summary>
              Returns empty context properties.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.ThreadStacks">
            <summary>
              Returns empty context stacks.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.IsDebugEnabled">
            <summary>
              No-op.
            </summary>
            <value>false</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.IsErrorEnabled">
            <summary>
              No-op.
            </summary>
            <value>false</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.IsFatalEnabled">
            <summary>
              No-op.
            </summary>
            <value>false</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.IsInfoEnabled">
            <summary>
              No-op.
            </summary>
            <value>false</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.Logging.NullLogger.IsWarnEnabled">
            <summary>
              No-op.
            </summary>
            <value>false</value>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Logging.StreamLogger">
            <summary>
            The Stream Logger class.  This class can stream log information
            to any stream, it is suitable for storing a log file to disk,
            or to a <c>MemoryStream</c> for testing your components.
            </summary>
            <remarks>
            This logger is not thread safe.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.StreamLogger.#ctor(System.String,System.IO.Stream)">
            <summary>
              Creates a new <c>StreamLogger</c> with default encoding 
              and buffer size. Initial Level is set to Debug.
            </summary>
            <param name = "name">
              The name of the log.
            </param>
            <param name = "stream">
              The stream that will be used for logging,
              seeking while the logger is alive 
            </param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.StreamLogger.#ctor(System.String,System.IO.Stream,System.Text.Encoding)">
            <summary>
              Creates a new <c>StreamLogger</c> with default buffer size.
              Initial Level is set to Debug.
            </summary>
            <param name="name">
              The name of the log.
            </param>
            <param name="stream">
              The stream that will be used for logging,
              seeking while the logger is alive 
            </param>
            <param name="encoding">
              The encoding that will be used for this stream.
              <see cref="T:System.IO.StreamWriter"/>
            </param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.StreamLogger.#ctor(System.String,System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
              Creates a new <c>StreamLogger</c>. 
              Initial Level is set to Debug.
            </summary>
            <param name="name">
              The name of the log.
            </param>
            <param name="stream">
              The stream that will be used for logging,
              seeking while the logger is alive 
            </param>
            <param name="encoding">
              The encoding that will be used for this stream.
              <see cref="T:System.IO.StreamWriter"/>
            </param>
            <param name="bufferSize">
              The buffer size that will be used for this stream.
              <see cref="T:System.IO.StreamWriter"/>
            </param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Logging.StreamLogger.#ctor(System.String,System.IO.StreamWriter)">
            <summary>
              Creates a new <c>StreamLogger</c> with 
              Debug as default Level.
            </summary>
            <param name = "name">The name of the log.</param>
            <param name = "writer">The <c>StreamWriter</c> the log will write to.</param>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.Pair`2">
            <summary>
            General purpose class to represent a standard pair of values. 
            </summary>
            <typeparam name="TFirst">Type of the first value</typeparam>
            <typeparam name="TSecond">Type of the second value</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.Pair`2.#ctor(`0,`1)">
            <summary>
            Constructs a pair with its values
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter">
            <summary>
            Readonly implementation of <see cref="T:System.Collections.IDictionary"/> which uses an anonymous object as its source. Uses names of properties as keys, and property values as... well - values. Keys are not case sensitive.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.#ctor(System.Object)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.Add(System.Object,System.Object)">
            <summary>
              Adds an element with the provided key and value to the <see cref = "T:System.Collections.IDictionary" /> object.
            </summary>
            <param name = "key">The <see cref = "T:System.Object" /> to use as the key of the element to add.</param>
            <param name = "value">The <see cref = "T:System.Object" /> to use as the value of the element to add.</param>
            <exception cref = "T:System.ArgumentNullException">
              <paramref name = "key" /> is null. </exception>
            <exception cref = "T:System.ArgumentException">An element with the same key already exists in the <see
               cref = "T:System.Collections.IDictionary" /> object. </exception>
            <exception cref = "T:System.NotSupportedException">The <see cref = "T:System.Collections.IDictionary" /> is read-only.-or- The <see
               cref = "T:System.Collections.IDictionary" /> has a fixed size. </exception>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.Clear">
            <summary>
              Removes all elements from the <see cref = "T:System.Collections.IDictionary" /> object.
            </summary>
            <exception cref = "T:System.NotSupportedException">The <see cref = "T:System.Collections.IDictionary" /> object is read-only. </exception>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.Contains(System.Object)">
            <summary>
              Determines whether the <see cref = "T:System.Collections.IDictionary" /> object contains an element with the specified key.
            </summary>
            <param name = "key">The key to locate in the <see cref = "T:System.Collections.IDictionary" /> object.</param>
            <returns>
              true if the <see cref = "T:System.Collections.IDictionary" /> contains an element with the key; otherwise, false.
            </returns>
            <exception cref = "T:System.ArgumentNullException">
              <paramref name = "key" /> is null. </exception>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.Remove(System.Object)">
            <summary>
              Removes the element with the specified key from the <see cref = "T:System.Collections.IDictionary" /> object.
            </summary>
            <param name = "key">The key of the element to remove.</param>
            <exception cref = "T:System.ArgumentNullException">
              <paramref name = "key" /> is null. </exception>
            <exception cref = "T:System.NotSupportedException">The <see cref = "T:System.Collections.IDictionary" /> object is read-only.-or- The <see
               cref = "T:System.Collections.IDictionary" /> has a fixed size. </exception>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
              An <see cref = "T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
              Copies the elements of the <see cref = "T:System.Collections.ICollection" /> to an <see cref = "T:System.Array" />, starting at a particular <see
               cref = "T:System.Array" /> index.
            </summary>
            <param name = "array">The one-dimensional <see cref = "T:System.Array" /> that is the destination of the elements copied from <see
               cref = "T:System.Collections.ICollection" />. The <see cref = "T:System.Array" /> must have zero-based indexing.</param>
            <param name = "index">The zero-based index in <paramref name = "array" /> at which copying begins.</param>
            <exception cref = "T:System.ArgumentNullException">
              <paramref name = "array" /> is null. </exception>
            <exception cref = "T:System.ArgumentOutOfRangeException">
              <paramref name = "index" /> is less than zero. </exception>
            <exception cref = "T:System.ArgumentException">
              <paramref name = "array" /> is multidimensional.-or- <paramref name = "index" /> is equal to or greater than the length of <paramref
               name = "array" />.-or- The number of elements in the source <see cref = "T:System.Collections.ICollection" /> is greater than the available space from <paramref
               name = "index" /> to the end of the destination <paramref name = "array" />. </exception>
            <exception cref = "T:System.ArgumentException">The type of the source <see cref = "T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref
               name = "array" />. </exception>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.System#Collections#IDictionary#GetEnumerator">
            <summary>
              Returns an <see cref = "T:System.Collections.IDictionaryEnumerator" /> object for the <see
               cref = "T:System.Collections.IDictionary" /> object.
            </summary>
            <returns>
              An <see cref = "T:System.Collections.IDictionaryEnumerator" /> object for the <see
               cref = "T:System.Collections.IDictionary" /> object.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.Read(System.Collections.IDictionary,System.Object)">
            <summary>
              Reads values of properties from <paramref name = "valuesAsAnonymousObject" /> and inserts them into <paramref
               name = "targetDictionary" /> using property names as keys.
            </summary>
            <param name = "targetDictionary"></param>
            <param name = "valuesAsAnonymousObject"></param>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.Count">
            <summary>
              Gets the number of elements contained in the <see cref = "T:System.Collections.ICollection" />.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref = "T:System.Collections.ICollection" />.</returns>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.IsSynchronized">
            <summary>
              Gets a value indicating whether access to the <see cref = "T:System.Collections.ICollection" /> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref = "T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.SyncRoot">
            <summary>
              Gets an object that can be used to synchronize access to the <see cref = "T:System.Collections.ICollection" />.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref = "T:System.Collections.ICollection" />.</returns>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.IsReadOnly">
            <summary>
              Gets a value indicating whether the <see cref = "T:System.Collections.IDictionary" /> object is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref = "T:System.Collections.IDictionary" /> object is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.Item(System.Object)">
            <summary>
              Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.Keys">
            <summary>
              Gets an <see cref = "T:System.Collections.ICollection" /> object containing the keys of the <see
               cref = "T:System.Collections.IDictionary" /> object.
            </summary>
            <value></value>
            <returns>An <see cref = "T:System.Collections.ICollection" /> object containing the keys of the <see
               cref = "T:System.Collections.IDictionary" /> object.</returns>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.Values">
            <summary>
              Gets an <see cref = "T:System.Collections.ICollection" /> object containing the values in the <see
               cref = "T:System.Collections.IDictionary" /> object.
            </summary>
            <value></value>
            <returns>An <see cref = "T:System.Collections.ICollection" /> object containing the values in the <see
               cref = "T:System.Collections.IDictionary" /> object.</returns>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.Core.ReflectionBasedDictionaryAdapter.System#Collections#IDictionary#IsFixedSize">
            <summary>
              Gets a value indicating whether the <see cref = "T:System.Collections.IDictionary" /> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref = "T:System.Collections.IDictionary" /> object has a fixed size; otherwise, false.</returns>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation">
            <summary>
              Encapsulates an invocation of a proxied method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.GetArgumentValue(System.Int32)">
            <summary>
              Gets the value of the argument at the specified <paramref name = "index" />.
            </summary>
            <param name = "index">The index.</param>
            <returns>The value of the argument at the specified <paramref name = "index" />.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.GetConcreteMethod">
            <summary>
              Returns the concrete instantiation of the <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Method"/> on the proxy, with any generic
              parameters bound to real types.
            </summary>
            <returns>
              The concrete instantiation of the <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Method"/> on the proxy, or the <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Method"/> if
              not a generic method.
            </returns>
            <remarks>
              Can be slower than calling <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Method"/>.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.GetConcreteMethodInvocationTarget">
            <summary>
              Returns the concrete instantiation of <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.MethodInvocationTarget"/>, with any
              generic parameters bound to real types.
              For interface proxies, this will point to the <see cref="T:System.Reflection.MethodInfo"/> on the target class.
            </summary>
            <returns>The concrete instantiation of <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.MethodInvocationTarget"/>, or
              <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.MethodInvocationTarget"/> if not a generic method.</returns>
            <remarks>
              In debug builds this can be slower than calling <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.MethodInvocationTarget"/>.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed">
            <summary>
              Proceeds the call to the next interceptor in line, and ultimately to the target method.
            </summary>
            <remarks>
              Since interface proxies without a target don't have the target implementation to proceed to,
              it is important, that the last interceptor does not call this method, otherwise a
              <see cref="T:System.NotImplementedException"/> will be thrown.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.SetArgumentValue(System.Int32,System.Object)">
            <summary>
              Overrides the value of an argument at the given <paramref name="index"/> with the
              new <paramref name="value"/> provided.
            </summary>
            <remarks>
              This method accepts an <see cref="T:System.Object"/>, however the value provided must be compatible
              with the type of the argument defined on the method, otherwise an exception will be thrown.
            </remarks>
            <param name="index">The index of the argument to override.</param>
            <param name="value">The new value for the argument.</param>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Arguments">
            <summary>
              Gets the arguments that the <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Method"/> has been invoked with.
            </summary>
            <value>The arguments the method was invoked with.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.GenericArguments">
            <summary>
              Gets the generic arguments of the method.
            </summary>
            <value>The generic arguments, or null if not a generic method.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.InvocationTarget">
            <summary>
              Gets the object on which the invocation is performed. This is different from proxy object
              because most of the time this will be the proxy target object.
            </summary>
            <seealso cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IChangeProxyTarget"/>
            <value>The invocation target.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Method">
            <summary>
              Gets the <see cref="T:System.Reflection.MethodInfo"/> representing the method being invoked on the proxy.
            </summary>
            <value>The <see cref="T:System.Reflection.MethodInfo"/> representing the method being invoked.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.MethodInvocationTarget">
            <summary>
              For interface proxies, this will point to the <see cref="T:System.Reflection.MethodInfo"/> on the target class.
            </summary>
            <value>The method invocation target.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proxy">
            <summary>
              Gets the proxy object on which the intercepted method is invoked.
            </summary>
            <value>Proxy object on which the intercepted method is invoked.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.ReturnValue">
            <summary>
              Gets or sets the return value of the method.
            </summary>
            <value>The return value of the method.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.TargetType">
            <summary>
              Gets the type of the target object for the intercepted method.
            </summary>
            <value>The type of the target object.</value>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyGenerationHook">
            <summary>
              Used during the target type inspection process. Implementors have a chance to customize the
              proxy generation process.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyGenerationHook.MethodsInspected">
            <summary>
              Invoked by the generation process to notify that the whole process has completed.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyGenerationHook.NonProxyableMemberNotification(System.Type,System.Reflection.MemberInfo)">
            <summary>
              Invoked by the generation process to notify that a member was not marked as virtual.
            </summary>
            <param name = "type">The type which declares the non-virtual member.</param>
            <param name = "memberInfo">The non-virtual member.</param>
            <remarks>
              This method gives an opportunity to inspect any non-proxyable member of a type that has 
              been requested to be proxied, and if appropriate - throw an exception to notify the caller.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyGenerationHook.ShouldInterceptMethod(System.Type,System.Reflection.MethodInfo)">
            <summary>
              Invoked by the generation process to determine if the specified method should be proxied.
            </summary>
            <param name = "type">The type which declares the given method.</param>
            <param name = "methodInfo">The method to inspect.</param>
            <returns>True if the given method should be proxied; false otherwise.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IConstructorGenerationHook.GetConstructorImplementation(System.Reflection.ConstructorInfo,Telerik.JustMock.Core.Castle.DynamicProxy.ConstructorImplementationAnalysis)">
            <summary>
            Specifies how to implement the given constructor in the target class.
            </summary>
            <param name="constructorInfo"></param>
            <param name="analysis">Additional information about the constructor.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.IConstructorGenerationHook.DefaultConstructorImplementation">
            <summary>
            Specifies how to generate a default constructor for the proxy class when
            the target class doesn't have a default constructor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Contributors.MembersCollector.AcceptMethod(System.Reflection.MethodInfo,System.Boolean,Telerik.JustMock.Core.Castle.DynamicProxy.IProxyGenerationHook)">
            <summary>
              Performs some basic screening and invokes the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyGenerationHook"/>
              to select methods.
            </summary>
            <param name="method"></param>
            <param name="onlyVirtuals"></param>
            <param name="hook"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Contributors.ITypeContributor">
            <summary>
              Interface describing elements composing generated type
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.DefaultProxyBuilder">
            <summary>
              Default implementation of <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> interface producing in-memory proxy assemblies.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder">
            <summary>
              Abstracts the implementation of proxy type construction.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder.CreateClassProxyType(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates a proxy type for given <paramref name="classToProxy"/>, implementing <paramref name="additionalInterfacesToProxy"/>, using <paramref name="options"/> provided.
            </summary>
            <param name="classToProxy">The class type to proxy.</param>
            <param name="additionalInterfacesToProxy">Additional interface types to proxy.</param>
            <param name="options">The proxy generation options.</param>
            <returns>The generated proxy type.</returns>
            <remarks>
              Implementers should return a proxy type for the specified class and interfaces.
              Additional interfaces should be only 'mark' interfaces, that is, they should work like interface proxy without target. (See <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)"/> method.)
            </remarks>
            <exception cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is not public.
              Note that to avoid this exception, you can mark offending type internal, and define <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute"/> 
              pointing to Castle Dynamic Proxy assembly, in assembly containing that type, if this is appropriate.</exception>
            <seealso cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.ClassProxyGenerator"/>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder.CreateInterfaceProxyTypeWithTarget(System.Type,System.Type[],System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates a proxy type that proxies calls to <paramref name="interfaceToProxy"/> members on <paramref name="targetType"/>, implementing <paramref name="additionalInterfacesToProxy"/>, using <paramref name="options"/> provided.
            </summary>
            <param name="interfaceToProxy">The interface type to proxy.</param>
            <param name="additionalInterfacesToProxy">Additional interface types to proxy.</param>
            <param name="targetType">Type implementing <paramref name="interfaceToProxy"/> on which calls to the interface members should be intercepted.</param>
            <param name="options">The proxy generation options.</param>
            <returns>The generated proxy type.</returns>
            <remarks>
              Implementers should return a proxy type for the specified interface that 'proceeds' executions to the specified target.
              Additional interfaces should be only 'mark' interfaces, that is, they should work like interface proxy without target. (See <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)"/> method.)
            </remarks>
            <exception cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is not public.
              Note that to avoid this exception, you can mark offending type internal, and define <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute"/> 
              pointing to Castle Dynamic Proxy assembly, in assembly containing that type, if this is appropriate.</exception>
            <seealso cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator"/>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder.CreateInterfaceProxyTypeWithTargetInterface(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates a proxy type for given <paramref name="interfaceToProxy"/> and <parmaref name="additionalInterfacesToProxy"/> that delegates all calls to the provided interceptors and allows interceptors to switch the actual target of invocation.
            </summary>
            <param name="interfaceToProxy">The interface type to proxy.</param>
            <param name="additionalInterfacesToProxy">Additional interface types to proxy.</param>
            <param name="options">The proxy generation options.</param>
            <returns>The generated proxy type.</returns>
            <remarks>
              Implementers should return a proxy type for the specified interface(s) that delegate all executions to the specified interceptors
              and uses an instance of the interface as their targets (i.e. <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.InvocationTarget"/>), rather than a class. All <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation"/> classes should then implement <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IChangeProxyTarget"/> interface,
              to allow interceptors to switch invocation target with instance of another type implementing called interface.
            </remarks>
            <exception cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is not public.
              Note that to avoid this exception, you can mark offending type internal, and define <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute"/> 
              pointing to Castle Dynamic Proxy assembly, in assembly containing that type, if this is appropriate.</exception>
            <seealso cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.InterfaceProxyWithTargetInterfaceGenerator"/>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates a proxy type for given <paramref name="interfaceToProxy"/> that delegates all calls to the provided interceptors.
            </summary>
            <param name="interfaceToProxy">The interface type to proxy.</param>
            <param name="additionalInterfacesToProxy">Additional interface types to proxy.</param>
            <param name="options">The proxy generation options.</param>
            <returns>The generated proxy type.</returns>
            <remarks>
              Implementers should return a proxy type for the specified interface and additional interfaces that delegate all executions to the specified interceptors.
            </remarks>
            <exception cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is not public.
              Note that to avoid this exception, you can mark offending type internal, and define <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute"/> 
              pointing to Castle Dynamic Proxy assembly, in assembly containing that type, if this is appropriate.</exception>
            <seealso cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.InterfaceProxyWithoutTargetGenerator"/>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder.Logger">
            <summary>
              Gets or sets the <see cref="T:Telerik.JustMock.Core.Castle.Core.Logging.ILogger"/> that this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator"/> logs to.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder.ModuleScope">
            <summary>
              Gets the <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder.ModuleScope"/> associated with this builder.
            </summary>
            <value>The module scope associated with this builder.</value>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.DefaultProxyBuilder.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.DefaultProxyBuilder"/> class with new <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.DefaultProxyBuilder.ModuleScope"/>.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.DefaultProxyBuilder.#ctor(Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.DefaultProxyBuilder"/> class.
            </summary>
            <param name="scope">The module scope for generated proxy types.</param>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.IAttributeDisassembler">
            <summary>
              Provides functionality for disassembling instances of attributes to CustomAttributeBuilder form, during the process of emiting new types by Dynamic Proxy.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IAttributeDisassembler.Disassemble(System.Attribute)">
            <summary>
              Disassembles given attribute instance back to corresponding CustomAttributeBuilder.
            </summary>
            <param name="attribute">An instance of attribute to disassemble</param>
            <returns><see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/> corresponding 1 to 1 to given attribute instance, or null reference.</returns>
            <remarks>
              Implementers should return <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/> that corresponds to given attribute instance 1 to 1,
              that is after calling specified constructor with specified arguments, and setting specified properties and fields with values specified
              we should be able to get an attribute instance identical to the one passed in <paramref name="attribute"/>. Implementer can return null
              if it wishes to opt out of replicating the attribute. Notice however, that for some cases, like attributes passed explicitly by the user
              it is illegal to return null, and doing so will result in exception.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.AttributeDisassembler.HandleError(System.Type,System.Exception)">
            <summary>
              Handles error during disassembly process
            </summary>
            <param name = "attributeType">Type of the attribute being disassembled</param>
            <param name = "exception">Exception thrown during the process</param>
            <returns>usually null, or (re)throws the exception</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.AttributeDisassembler.InitializeConstructorArgs(System.Type,System.Attribute,System.Reflection.ParameterInfo[])">
            <summary>
              Here we try to match a constructor argument to its value.
              Since we can't get the values from the assembly, we use some heuristics to get it.
              a/ we first try to match all the properties on the attributes by name (case insensitive) to the argument
              b/ if we fail we try to match them by property type, with some smarts about convertions (i,e: can use Guid for string).
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.AttributeDisassembler.ReplaceIfBetterMatch(System.Reflection.ParameterInfo,System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <summary>
              We have the following rules here.
              Try to find a matching type, failing that, if the parameter is string, get the first property (under the assumption that
              we can convert it.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.AttributeDisassembler.ConvertValue(System.Object,System.Type)">
            <summary>
              Attributes can only accept simple types, so we return null for null,
              if the value is passed as string we call to string (should help with converting), 
              otherwise, we use the value as is (enums, integer, etc).
            </summary>
        </member>
        <member name="T:Telerik.JustMock.AttributesToAvoidReplicating">
            <summary>
            A list of attributes that must not be replicated when building a proxy. JustMock
            tries to copy all attributes from the types and methods being proxied, but that is
            not always a good idea for every type of attribute. Add additional attributes
            to this list that prevent the proxy from working correctly.
            </summary>
            <example>
            <see cref="T:Telerik.JustMock.AttributesToAvoidReplicating"/>.Add(typeof(ServiceContractAttribute));
            </example>
        </member>
        <member name="M:Telerik.JustMock.AttributesToAvoidReplicating.Add(System.Type)">
            <summary>
            Add an attribute type that must not be replicated when building a proxy.
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="M:Telerik.JustMock.AttributesToAvoidReplicating.Add``1">
            <summary>
            Add an attribute type that must not be replicated when building a proxy.
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.BaseProxyGenerator">
            <summary>
              Base class that exposes the common functionalities
              to proxy generation.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.BaseProxyGenerator.AddMappingNoCheck(System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.Contributors.ITypeContributor,System.Collections.Generic.IDictionary{System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.Contributors.ITypeContributor})">
            <summary>
              It is safe to add mapping (no mapping for the interface exists)
            </summary>
            <param name = "implementer"></param>
            <param name = "interface"></param>
            <param name = "mapping"></param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.BaseProxyGenerator.GenerateParameterlessConstructor(Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.ClassEmitter,System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.SimpleAST.FieldReference)">
            <summary>
              Generates a parameters constructor that initializes the proxy
              state with <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.StandardInterceptor"/> just to make it non-null.
              <para>
                This constructor is important to allow proxies to be XML serializable
              </para>
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.CacheKey.#ctor(System.Reflection.MemberInfo,System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.CacheKey"/> class.
            </summary>
            <param name="target">Target element. This is either target type or target method for invocation types.</param>
            <param name="type">The type of the proxy. This is base type for invocation types.</param>
            <param name="interfaces">The interfaces.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.CacheKey.#ctor(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.CacheKey"/> class.
            </summary>
            <param name="target">Type of the target.</param>
            <param name="interfaces">The interfaces.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.InvocationTypeGenerator.GetBaseCtorArguments(System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,System.Reflection.ConstructorInfo@)">
            <summary>
              Generates the constructor for the class that extends
              <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.AbstractInvocation"/>
            </summary>
            <param name="targetFieldType"></param>
            <param name="proxyGenerationOptions"></param>
            <param name="baseConstructor"></param>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.LdcOpCodesDictionary">
            <summary>
              s
              Provides appropriate Ldc.X opcode for the type of primitive value to be loaded.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.LdindOpCodesDictionary">
            <summary>
              Provides appropriate Ldind.X opcode for 
              the type of primitive value to be loaded indirectly.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.OpCodeUtil.EmitLoadIndirectOpCodeForType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
              Emits a load indirect opcode of the appropriate type for a value or object reference.
              Pops a pointer off the evaluation stack, dereferences it and loads
              a value of the specified type.
            </summary>
            <param name = "gen"></param>
            <param name = "type"></param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.OpCodeUtil.EmitLoadOpCodeForConstantValue(System.Reflection.Emit.ILGenerator,System.Object)">
            <summary>
              Emits a load opcode of the appropriate kind for a constant string or
              primitive value.
            </summary>
            <param name = "gen"></param>
            <param name = "value"></param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.OpCodeUtil.EmitLoadOpCodeForDefaultValueOfType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
              Emits a load opcode of the appropriate kind for the constant default value of a
              type, such as 0 for value types and null for reference types.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.OpCodeUtil.EmitStoreIndirectOpCodeForType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
              Emits a store indirectopcode of the appropriate type for a value or object reference.
              Pops a value of the specified type and a pointer off the evaluation stack, and
              stores the value.
            </summary>
            <param name = "gen"></param>
            <param name = "type"></param>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.PropertiesCollection">
            <summary>
              Summary description for PropertiesCollection.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.SimpleAST.IndirectReference">
            <summary>
              Wraps a reference that is passed 
              ByRef and provides indirect load/store support.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.SimpleAST.NewArrayExpression">
            <summary>
              Summary description for NewArrayExpression.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.SimpleAST.ReferencesToObjectArrayExpression">
            <summary>
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.Emitters.StindOpCodesDictionary">
            <summary>
              Provides appropriate Stind.X opcode 
              for the type of primitive value to be stored indirectly.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.INamingScope">
            <summary>
              Represents the scope of uniquenes of names for types and their members
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.INamingScope.GetUniqueName(System.String)">
            <summary>
              Gets a unique name based on <paramref name="suggestedName"/>
            </summary>
            <param name="suggestedName">Name suggested by the caller</param>
            <returns>Unique name based on <paramref name="suggestedName"/>.</returns>
            <remarks>
              Implementers should provide name as closely resembling <paramref name="suggestedName"/> as possible.
              Generally if no collision occurs it is suggested to return suggested name, otherwise append sequential suffix.
              Implementers must return deterministic names, that is when <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.INamingScope.GetUniqueName(System.String)"/> is called twice 
              with the same suggested name, the same returned name should be provided each time. Non-deterministic return
              values, like appending random suffices will break serialization of proxies.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.INamingScope.SafeSubScope">
            <summary>
              Returns new, disposable naming scope. It is responsibilty of the caller to make sure that no naming collision
              with enclosing scope, or other subscopes is possible.
            </summary>
            <returns>New naming scope.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.MetaEvent.#ctor(System.String,System.Type,System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.Generators.MetaMethod,Telerik.JustMock.Core.Castle.DynamicProxy.Generators.MetaMethod,System.Reflection.EventAttributes,Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.MetaEvent"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="declaringType">Type declaring the original event being overriten, or null.</param>
            <param name="eventDelegateType"></param>
            <param name="adder">The add method.</param>
            <param name="remover">The remove method.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Generators.MethodFinder">
            <summary>
              Returns the methods implemented by a type. Use this instead of Type.GetMethods() to work around a CLR issue
              where duplicate MethodInfos are returned by Type.GetMethods() after a token of a generic type's method was loaded.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.IChangeProxyTarget">
            <summary>
              Exposes means to change target objects of proxies and invocations
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IChangeProxyTarget.ChangeInvocationTarget(System.Object)">
            <summary>
              Changes the target object (<see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.InvocationTarget"/>) of current <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation"/>.
            </summary>
            <param name="target">The new value of target of invocation.</param>
            <remarks>
              Although the method takes <see cref="T:System.Object"/> the actual instance must be of type assignable to <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.TargetType"/>, otherwise an <see cref="T:System.InvalidCastException"/> will be thrown.
              Also while it's technically legal to pass null reference (Nothing in Visual Basic) as <paramref name="target"/>, for obvious reasons Dynamic Proxy will not be able to call the intercepted method on such target.
              In this case last interceptor in the pipeline mustn't call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/> or a <see cref="T:System.NotImplementedException"/> will be throws.
              Also while it's technically legal to pass proxy itself as <paramref name="target"/>, this would create stack overflow.
              In this case last interceptor in the pipeline mustn't call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/> or a <see cref="T:System.InvalidOperationException"/> will be throws.
            </remarks>
            <exception cref="T:System.InvalidCastException">Thrown when <paramref name="target"/> is not assignable to the proxied type.</exception>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IChangeProxyTarget.ChangeProxyTarget(System.Object)">
            <summary>
              Permanently changes the target object of the proxy. This does not affect target of the current invocation.
            </summary>
            <param name="target">The new value of target of the proxy.</param>
            <remarks>
              Although the method takes <see cref="T:System.Object"/> the actual instance must be of type assignable to proxy's target type, otherwise an <see cref="T:System.InvalidCastException"/> will be thrown.
              Also while it's technically legal to pass null reference (Nothing in Visual Basic) as <paramref name="target"/>, for obvious reasons Dynamic Proxy will not be able to call the intercepted method on such target.
              In this case last interceptor in the pipeline mustn't call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/> or a <see cref="T:System.NotImplementedException"/> will be throws.
              Also while it's technically legal to pass proxy itself as <paramref name="target"/>, this would create stack overflow.
              In this case last interceptor in the pipeline mustn't call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/> or a <see cref="T:System.InvalidOperationException"/> will be throws.
            </remarks>
            <exception cref="T:System.InvalidCastException">Thrown when <paramref name="target"/> is not assignable to the proxied type.</exception>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyConstructorImplementation.SkipConstructor">
            <summary>
            Do not generate a constructor. The proxy class will not
            be constructible with the specified constructor when this option is used.
            This is the default for not visible base constructors.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyConstructorImplementation.CallBase">
            <summary>
            Call the base constructor from the proxy constructor. This is the default for
            visible base constructors.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyConstructorImplementation.DoNotCallBase">
            <summary>
            Do not call the base constructor from the proxy constructor.
            The generated code will fail verification with PEVerify and will only
            run in full trust. Under partial trust the runtime will throw VerificationException
            when an attempt is made to execute the code.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.ConstructorImplementationAnalysis.IsBaseVisible">
            <summary>
            True if the base member is visible (public or internal with InternalsVisibleTo)
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptorSelector">
            <summary>
              Provides an extension point that allows proxies to choose specific interceptors on
              a per method basis.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptorSelector.SelectInterceptors(System.Type,System.Reflection.MethodInfo,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Selects the interceptors that should intercept calls to the given <paramref name="method"/>.
            </summary>
            <param name="type">The type declaring the method to intercept.</param>
            <param name="method">The method that will be intercepted.</param>
            <param name="interceptors">All interceptors registered with the proxy.</param>
            <returns>An array of interceptors to invoke upon calling the <paramref name="method"/>.</returns>
            <remarks>
              This method is called only once per proxy instance, upon the first call to the
              <paramref name="method"/>. Either an empty array or null are valid return values to indicate
              that no interceptor should intercept calls to the method. Although it is not advised, it is
              legal to return other <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor"/> implementations than these provided in
              <paramref name="interceptors"/>.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Internal.AttributeUtil.AddDisassembler``1(Telerik.JustMock.Core.Castle.DynamicProxy.IAttributeDisassembler)">
            <summary>
              Registers custom disassembler to handle disassembly of specified type of attributes.
            </summary>
            <typeparam name="TAttribute">Type of attributes to handle</typeparam>
            <param name="disassembler">Disassembler converting existing instances of Attributes to CustomAttributeBuilders</param>
            <remarks>
              When disassembling an attribute Dynamic Proxy will first check if an custom disassembler has been registered to handle attributes of that type, 
              and if none is found, it'll use the <see cref="P:Telerik.JustMock.Core.Castle.DynamicProxy.Internal.AttributeUtil.FallbackDisassembler"/>.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Internal.AttributeUtil.ShouldSkipAttributeReplication(System.Type)">
            <summary>
              Attributes should be replicated if they are non-inheritable,
              but there are some special cases where the attributes means
              something to the CLR, where they should be skipped.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Internal.InternalsUtilExtensions.IsInternal(System.Reflection.MethodBase)">
            <summary>
              Determines whether the specified method is internal.
            </summary>
            <param name = "method">The method.</param>
            <returns>
              <c>true</c> if the specified method is internal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Internal.InternalsUtil.IsInternalToDynamicProxy(System.Reflection.Assembly)">
            <summary>
              Determines whether this assembly has internals visible to dynamic proxy.
            </summary>
            <param name = "asm">The assembly to inspect.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Internal.InternalsUtil.IsAccessible(System.Reflection.MethodBase)">
            <summary>
              Checks if the method is public or protected.
            </summary>
            <param name = "method"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.Internal.TypeUtil.GetAllInterfaces(System.Type[])">
            <summary>
              Returns list of all unique interfaces implemented given types, including their base interfaces.
            </summary>
            <param name="types"> </param>
            <returns> </returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyTargetAccessor.DynProxyGetTarget">
            <summary>
              Get the proxy target (note that null is a valid target!)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyTargetAccessor.GetInterceptors">
            <summary>
              Gets the interceptors for the proxy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.MixinData.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
              Because we need to cache the types based on the mixed in mixins, we do the following here:
              - Get all the mixin interfaces
              - Sort them by full name
              - Return them by position
            
            The idea is to have reproducible behavior for the case that mixins are registered in different orders.
            This method is here because it is required 
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope">
            <summary>
              Summary description for ModuleScope.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.DEFAULT_FILE_NAME">
            <summary>
              The default file name used when the assembly is saved using <see cref="F:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.DEFAULT_FILE_NAME"/>.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.DEFAULT_ASSEMBLY_NAME">
            <summary>
              The default assembly (simple) name used for the assemblies generated by a <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/> class; assemblies created by this instance will not be saved.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.#ctor(System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/> class, allowing to specify whether the assemblies generated by this instance
              should be saved.
            </summary>
            <param name="savePhysicalAssembly">If set to <c>true</c> saves the generated module.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.#ctor(System.Boolean,System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/> class, allowing to specify whether the assemblies generated by this instance
              should be saved.
            </summary>
            <param name="savePhysicalAssembly">If set to <c>true</c> saves the generated module.</param>
            <param name="disableSignedModule">If set to <c>true</c> disables ability to generate signed module. This should be used in cases where ran under constrained permissions.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.#ctor(System.Boolean,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/> class, allowing to specify whether the assemblies generated by this instance
              should be saved and what simple names are to be assigned to them.
            </summary>
            <param name="savePhysicalAssembly">If set to <c>true</c> saves the generated module.</param>
            <param name="disableSignedModule">If set to <c>true</c> disables ability to generate signed module. This should be used in cases where ran under constrained permissions.</param>
            <param name="strongAssemblyName">The simple name of the strong-named assembly generated by this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/>.</param>
            <param name="strongModulePath">The path and file name of the manifest module of the strong-named assembly generated by this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/>.</param>
            <param name="weakAssemblyName">The simple name of the weak-named assembly generated by this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/>.</param>
            <param name="weakModulePath">The path and file name of the manifest module of the weak-named assembly generated by this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/>.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.#ctor(System.Boolean,System.Boolean,Telerik.JustMock.Core.Castle.DynamicProxy.Generators.INamingScope,System.String,System.String,System.String,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/> class, allowing to specify whether the assemblies generated by this instance
              should be saved and what simple names are to be assigned to them.
            </summary>
            <param name="savePhysicalAssembly">If set to <c>true</c> saves the generated module.</param>
            <param name="disableSignedModule">If set to <c>true</c> disables ability to generate signed module. This should be used in cases where ran under constrained permissions.</param>
            <param name="namingScope">Naming scope used to provide unique names to generated types and their members (usually via sub-scopes).</param>
            <param name="strongAssemblyName">The simple name of the strong-named assembly generated by this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/>.</param>
            <param name="strongModulePath">The path and file name of the manifest module of the strong-named assembly generated by this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/>.</param>
            <param name="weakAssemblyName">The simple name of the weak-named assembly generated by this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/>.</param>
            <param name="weakModulePath">The path and file name of the manifest module of the weak-named assembly generated by this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/>.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.GetFromCache(Telerik.JustMock.Core.Castle.DynamicProxy.Generators.CacheKey)">
            <summary>
              Returns a type from this scope's type cache, or null if the key cannot be found.
            </summary>
            <param name = "key">The key to be looked up in the cache.</param>
            <returns>The type from this scope's type cache matching the key, or null if the key cannot be found</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.RegisterInCache(Telerik.JustMock.Core.Castle.DynamicProxy.Generators.CacheKey,System.Type)">
            <summary>
              Registers a type in this scope's type cache.
            </summary>
            <param name = "key">The key to be associated with the type.</param>
            <param name = "type">The type to be stored in the cache.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.GetKeyPair">
            <summary>
              Gets the key pair used to sign the strong-named assembly generated by this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.ObtainDynamicModule(System.Boolean)">
            <summary>
              Gets the specified module generated by this scope, creating a new one if none has yet been generated.
            </summary>
            <param name = "isStrongNamed">If set to true, a strong-named module is returned; otherwise, a weak-named module is returned.</param>
            <returns>A strong-named or weak-named module generated by this scope, as specified by the <paramref
               name = "isStrongNamed" /> parameter.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.ObtainDynamicModuleWithStrongName">
            <summary>
              Gets the strong-named module generated by this scope, creating a new one if none has yet been generated.
            </summary>
            <returns>A strong-named module generated by this scope.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.ObtainDynamicModuleWithWeakName">
            <summary>
              Gets the weak-named module generated by this scope, creating a new one if none has yet been generated.
            </summary>
            <returns>A weak-named module generated by this scope.</returns>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.Lock">
            <summary>
              Users of this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope"/> should use this lock when accessing the cache.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.StrongNamedModule">
            <summary>
              Gets the strong-named module generated by this scope, or <see langword = "null" /> if none has yet been generated.
            </summary>
            <value>The strong-named module generated by this scope, or <see langword = "null" /> if none has yet been generated.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.StrongNamedModuleName">
            <summary>
              Gets the file name of the strongly named module generated by this scope.
            </summary>
            <value>The file name of the strongly named module generated by this scope.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.WeakNamedModule">
            <summary>
              Gets the weak-named module generated by this scope, or <see langword = "null" /> if none has yet been generated.
            </summary>
            <value>The weak-named module generated by this scope, or <see langword = "null" /> if none has yet been generated.</value>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.ModuleScope.WeakNamedModuleName">
            <summary>
              Gets the file name of the weakly named module generated by this scope.
            </summary>
            <value>The file name of the weakly named module generated by this scope.</value>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions.#ctor(Telerik.JustMock.Core.Castle.DynamicProxy.IProxyGenerationHook)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions"/> class.
            </summary>
            <param name="hook">The hook.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions"/> class.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator">
            <summary>
              Provides proxy objects for classes and interfaces.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.#ctor(Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator"/> class.
            </summary>
            <param name="builder">Proxy types builder.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.#ctor(System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator"/> class.
            </summary>
            <param name="disableSignedModule">If <c>true</c> forces all types to be generated into an unsigned module.</param>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTarget``1(``0,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <typeparamref name="TInterface"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TInterface">Type of the interface implemented by <paramref name="target"/> which will be proxied.</typeparam>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>Object proxying calls to members of <typeparamref name="TInterface"/> on <paramref name="target"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TInterface"/>is not an interface type.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method generates new proxy type for each type of <paramref name="target"/>, which affects performance. If you don't want to proxy types differently depending on the type of the target
              use <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface``1(``0,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])"/> method.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTarget``1(``0,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <typeparamref name="TInterface"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TInterface">Type of the interface implemented by <paramref name="target"/> which will be proxied.</typeparam>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <typeparamref name="TInterface"/> on <paramref name="target"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TInterface"/>is not an interface type.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method generates new proxy type for each type of <paramref name="target"/>, which affects performance. If you don't want to proxy types differently depending on the type of the target
              use <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface``1(``0,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])"/> method.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTarget(System.Type,System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> type on <paramref name="target"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method generates new proxy type for each type of <paramref name="target"/>, which affects performance. If you don't want to proxy types differently depending on the type of the target
              use <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])"/> method.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTarget(System.Type,System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> type on <paramref name="target"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method generates new proxy type for each type of <paramref name="target"/>, which affects performance. If you don't want to proxy types differently depending on the type of the target
              use <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])"/> method.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTarget(System.Type,System.Type[],System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types  on <paramref name="target"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method generates new proxy type for each type of <paramref name="target"/>, which affects performance. If you don't want to proxy types differently depending on the type of the target
              use <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Type[],System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])"/> method.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTarget(System.Type,System.Type[],System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types on <paramref name="target"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method generates new proxy type for each type of <paramref name="target"/>, which affects performance. If you don't want to proxy types differently depending on the type of the target
              use <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Type[],System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])"/> method.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
              Interceptors can use <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IChangeProxyTarget"/> interface to provide other target for method invocation than default <paramref name="target"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> type on <paramref name="target"/> object or alternative implementation swapped at runtime by an interceptor.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface``1(``0,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <typeparamref name="TInterface"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
              Interceptors can use <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IChangeProxyTarget"/> interface to provide other target for method invocation than default <paramref name="target"/>.
            </summary>
            <typeparam name="TInterface">Type of the interface implemented by <paramref name="target"/> which will be proxied.</typeparam>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <typeparamref name="TInterface"/> type on <paramref name="target"/> object or alternative implementation swapped at runtime by an interceptor.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TInterface"/> is not an interface type.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface``1(``0,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <typeparamref name="TInterface"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
              Interceptors can use <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IChangeProxyTarget"/> interface to provide other target for method invocation than default <paramref name="target"/>.
            </summary>
            <typeparam name="TInterface">Type of the interface implemented by <paramref name="target"/> which will be proxied.</typeparam>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <typeparamref name="TInterface"/> type on <paramref name="target"/> object or alternative implementation swapped at runtime by an interceptor.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TInterface"/> is not an interface type.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Type[],System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
              Interceptors can use <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IChangeProxyTarget"/> interface to provide other target for method invocation than default <paramref name="target"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types on <paramref name="target"/> object or alternative implementation swapped at runtime by an interceptor.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
              Interceptors can use <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IChangeProxyTarget"/> interface to provide other target for method invocation than default <paramref name="target"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> type on <paramref name="target"/> object or alternative implementation swapped at runtime by an interceptor.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Type[],System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
              Interceptors can use <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IChangeProxyTarget"/> interface to provide other target for method invocation than default <paramref name="target"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types on <paramref name="target"/> object or alternative implementation swapped at runtime by an interceptor.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget``1(Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor)">
            <summary>
              Creates proxy object intercepting calls to members of interface <typeparamref name="TInterface"/> on target object generated at runtime with given <paramref name="interceptor"/>.
            </summary>
            <typeparam name="TInterface">Type of the interface which will be proxied.</typeparam>
            <param name="interceptor">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <typeparamref name="TInterface"/> types on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptor"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TInterface"/> is not an interface type.</exception>
            <remarks>
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor"/> implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              As a result of that also at least one <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor"/> implementation must be provided.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget``1(Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <typeparamref name="TInterface"/> on target object generated at runtime with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TInterface">Type of the interface which will be proxied.</typeparam>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <typeparamref name="TInterface"/> types on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TInterface"/> is not an interface type.</exception>
            <remarks>
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor"/> implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              As a result of that also at least one <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor"/> implementation must be provided.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget``1(Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <typeparamref name="TInterface"/> on target object generated at runtime with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TInterface">Type of the interface which will be proxied.</typeparam>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <typeparamref name="TInterface"/> types on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TInterface"/> is not an interface type.</exception>
            <remarks>
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor"/> implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              As a result of that also at least one <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor"/> implementation must be provided.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor)">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on target object generated at runtime with given <paramref name="interceptor"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface which will be proxied.</param>
            <param name="interceptor">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> type on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptor"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <remarks>
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor"/> implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on target object generated at runtime with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface which will be proxied.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> type on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <remarks>
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor"/> implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on target object generated at runtime with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface which will be proxied.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <remarks>
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor"/> implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on target object generated at runtime with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface which will be proxied.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/>  is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <remarks>
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on target object generated at runtime with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface which will be proxied.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <remarks>
              Since this method uses an empty-shell implementation of <paramref name="additionalInterfacesToProxy"/> to proxy generated at runtime, the actual implementation of proxied methods must be provided by given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor"/> implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Telerik.JustMock.Core.Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget``1(``0,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <typeparamref name="TClass"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TClass">Type of class which will be proxied.</typeparam>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <typeparamref name="TClass"/> proxying calls to virtual members of <typeparamref name="TClass"/> type.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TClass"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <typeparamref name="TClass"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <typeparamref name="TClass"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget``1(``0,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <typeparamref name="TClass"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TClass">Type of class which will be proxied.</typeparam>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <typeparamref name="TClass"/> proxying calls to virtual members of <typeparamref name="TClass"/> type.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TClass"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <typeparamref name="TClass"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <typeparamref name="TClass"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget(System.Type,System.Type[],System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget(System.Type,System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,System.Object[],Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="constructorArguments">Arguments of constructor of type <paramref name="classToProxy"/> which should be used to create a new instance of that type.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no constructor exists on type <paramref name="classToProxy"/> with parameters matching <paramref name="constructorArguments"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget(System.Type,System.Object,System.Object[],Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="constructorArguments">Arguments of constructor of type <paramref name="classToProxy"/> which should be used to create a new instance of that type.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no constructor exists on type <paramref name="classToProxy"/> with parameters matching <paramref name="constructorArguments"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget(System.Type,System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no parameterless constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget(System.Type,System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="options"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget(System.Type,System.Type[],System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="options"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget(System.Type,System.Type[],System.Object,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,System.Object[],Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="constructorArguments">Arguments of constructor of type <paramref name="classToProxy"/> which should be used to create a new instance of that type.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="options"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no constructor exists on type <paramref name="classToProxy"/> with parameters matching <paramref name="constructorArguments"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxy``1(Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <typeparamref name="TClass"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TClass">Type of class which will be proxied.</typeparam>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <typeparamref name="TClass"/> proxying calls to virtual members of <typeparamref name="TClass"/> type.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TClass"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <typeparamref name="TClass"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <typeparamref name="TClass"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxy``1(Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <typeparamref name="TClass"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TClass">Type of class which will be proxied.</typeparam>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <typeparamref name="TClass"/> proxying calls to virtual members of <typeparamref name="TClass"/> type.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TClass"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <typeparamref name="TClass"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <typeparamref name="TClass"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,System.Object[],Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="constructorArguments">Arguments of constructor of type <paramref name="classToProxy"/> which should be used to create a new instance of that type.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no constructor exists on type <paramref name="classToProxy"/> with parameters matching <paramref name="constructorArguments"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type,System.Object[],Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="constructorArguments">Arguments of constructor of type <paramref name="classToProxy"/> which should be used to create a new instance of that type.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no constructor exists on type <paramref name="classToProxy"/> with parameters matching <paramref name="constructorArguments"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no parameterless constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="options"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="options"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions,System.Object[],Telerik.JustMock.Core.Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="constructorArguments">Arguments of constructor of type <paramref name="classToProxy"/> which should be used to create a new instance of that type.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="options"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no constructor exists on type <paramref name="classToProxy"/> with parameters matching <paramref name="constructorArguments"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateClassProxyType(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates the proxy type for class proxy with given <paramref name="classToProxy"/> class, implementing given <paramref name="additionalInterfacesToProxy"/> and using provided <paramref name="options"/>.
            </summary>
            <param name="classToProxy">The base class for proxy type.</param>
            <param name="additionalInterfacesToProxy">The interfaces that proxy type should implement.</param>
            <param name="options">The options for proxy generation process.</param>
            <returns><see cref="T:System.Type"/> of proxy.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithTarget(System.Type,System.Type[],System.Type,Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates the proxy type for interface proxy with target for given <paramref name="interfaceToProxy"/> interface, implementing given <paramref name="additionalInterfacesToProxy"/> on given <paramref name="targetType"/> and using provided <paramref name="options"/>.
            </summary>
            <param name="interfaceToProxy">The interface proxy type should implement.</param>
            <param name="additionalInterfacesToProxy">The additional interfaces proxy type should implement.</param>
            <param name="targetType">Actual type that the proxy type will encompass.</param>
            <param name="options">The options for proxy generation process.</param>
            <returns><see cref="T:System.Type"/> of proxy.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithTargetInterface(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates the proxy type for interface proxy with target interface for given <paramref name="interfaceToProxy"/> interface, implementing given <paramref name="additionalInterfacesToProxy"/> on given <paramref name="interfaceToProxy"/> and using provided <paramref name="options"/>.
            </summary>
            <param name="interfaceToProxy">The interface proxy type should implement.</param>
            <param name="additionalInterfacesToProxy">The additional interfaces proxy type should implement.</param>
            <param name="options">The options for proxy generation process.</param>
            <returns><see cref="T:System.Type"/> of proxy.</returns>
        </member>
        <member name="M:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithoutTarget(System.Type,System.Type[],Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates the proxy type for interface proxy without target for given <paramref name="interfaceToProxy"/> interface, implementing given <paramref name="additionalInterfacesToProxy"/> and using provided <paramref name="options"/>.
            </summary>
            <param name="interfaceToProxy">The interface proxy type should implement.</param>
            <param name="additionalInterfacesToProxy">The additional interfaces proxy type should implement.</param>
            <param name="options">The options for proxy generation process.</param>
            <returns><see cref="T:System.Type"/> of proxy.</returns>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.Logger">
            <summary>
              Gets or sets the <see cref="T:Telerik.JustMock.Core.Castle.Core.Logging.ILogger"/> that this <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator"/> log to.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.Castle.DynamicProxy.ProxyGenerator.ProxyBuilder">
            <summary>
              Gets the proxy builder instance used to generate proxy types.
            </summary>
            <value>The proxy builder.</value>
        </member>
        <member name="T:Telerik.JustMock.Core.Castle.DynamicProxy.Tokens.InvocationMethods">
            <summary>
              Holds <see cref="T:System.Reflection.MethodInfo"/> objects representing methods of <see cref="T:Telerik.JustMock.Core.Castle.DynamicProxy.AbstractInvocation"/> class.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Core.Expressions.ExpressionComparer">
            <summary>
            Compare two expressions to determine if they are equivalent
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.MatcherTree.MatchingOptions.Generalizing">
            <summary>
            Specifies that the provided call pattern is a specific case
            and we're interested in known call patterns who are general cases of the provided one.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.MatcherTree.MatchingOptions.Concretizing">
            <summary>
            Specifies that the provided call pattern is a general case
            and we're interested in known call patterns who are specific cases of the provided one.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Core.MatcherTree.MatchingOptions.Exact">
            <summary>
            Specifies that we want only exact matches between the provided call pattern
            and known call patterns.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.MockingUtil.MakeProcCaller(System.Delegate)">
            <summary>
            Create a delegate to a function that takes a object[] as a parameter and a delegate,
            unpacks the array and calls the delegate by substituting the array members for its parameters.
            It mimics what MethodInfo.Invoke does, but in JustMock it's a bad idea to call reflection
            methods within a GuardExternal block! GuardExternal blocks should do *minimum* amount of work.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.MockingUtil.MakeFuncCaller(System.Delegate)">
            <summary>
            Create a delegate to a function that takes a object[] as a parameter and a delegate,
            unpacks the array and calls the delegate by substituting the array members for its parameters.
            It mimics what MethodInfo.Invoke does, but in JustMock it's a bad idea to call reflection
            methods within a GuardExternal block! GuardExternal blocks should do *minimum* amount of work.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.IMockMixin.Repository">
            <summary>
            The repository that created this mock, or the repository that
            made the last arrangement for this mock, if this mock has been used
            in different contexts.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.IMockMixin.Originator">
            <summary>
            The repository that first created this mock mixin.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.IMockMixin.DependentMocks">
            <summary>
            A collection of mocks that are dependent on this one. Dependent mocks
            are recursively asserted. Dependent mocks are added for example by arranging a call
            on this mock to return another mock.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.IMockMixin.SupplementaryBehaviors">
            <summary>
            Behaviors that are processed after the behaviors for any method mock are processed.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.IMockMixin.FallbackBehaviors">
            <summary>
            Behaviors to process when there was no method mock for a dispatched invocation.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Core.IMockMixin.ExternalizedMock">
            <summary>
            Set to the object for which this instance is an external mock mixin
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Core.MocksRepository.CreateMatcherForArgument(System.Object)">
            <summary>
            Converts the given object to a matcher as follows. This method is most useful for
            creating a matcher out of an argument expression.
            
            It works as follows:
            If the object is not an expression, then a value matcher for that object is returned.
            If the object is an expression then:
            * if the top of the expression is a method call expression and the member
                has the ArgMatcherAttribute then the specific matcher type is instantiaded
                with the parameters passed to the method call expression and returned.
                If the matcher type is generic, then it is defined with the type of the expression.
            * if the top expression is a member or method call and the member
                has the ArgIgnoreAttribute, then a TypeMatcher is returned
            * otherwise, the expression is evaluated and a ValueMatcher is returned
            </summary>
            <param name="argumentObj"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.JustMock.DebugView">
            <summary>
            Provides introspection and tracing capabilities for ease of debugging failing tests.
            </summary>
            <remarks>
            Often it’s not very clear why a test that uses the mocking API fails.
            A test may have multiple arrangements, each with various overlapping
            argument matchers. When you have a complex set of arrangements and the
            system under test makes a call to a mock, it’s sometimes hard to
            understand which arrangement actually gets executed and which
            expectations get updated. The <see cref="T:Telerik.JustMock.DebugView"/> class can help in such times.
            It can be used in two ways – to provide an overview of the current
            internal state of the mocking API, and to provide a step-by-step replay
            of the interception events happening inside the mocking API.
            
            The current internal state is exposed through the <see cref="P:Telerik.JustMock.DebugView.CurrentState"/> property.
            It contains a human-readable description of the current state of the
            mocking API. It describes in detail the state of all occurrence
            expectations and the number of calls to all intercepted methods. The
            first part is useful when debugging failing expectations from
            arrangements. The second part is useful for debugging failing occurrence
            asserts.
            
            The step-by-step replay is intended for use with an interactive debugger
            (e.g. the Visual Studio managed debugger). To begin using it, add the
            DebugView class to a Watch in the debugger. Break the test execution
            before your test begins. Set the <see cref="!:"/>IsTraceEnabled property to true from
            the Watch window. Now, as you step over each line in your test, the
            <see cref="P:Telerik.JustMock.DebugView.FullTrace"/> and <see cref="P:Telerik.JustMock.DebugView.LastTrace"/> properties will be updated to show the events
            happening inside the mocking API. <see cref="P:Telerik.JustMock.DebugView.FullTrace"/> will show the entire event
            log so far. <see cref="P:Telerik.JustMock.DebugView.LastTrace"/> will contain all events that have happened since
            the debugger last updated the Watch window, but only if any new events
            have actually occurred.
            </remarks>
        </member>
        <member name="P:Telerik.JustMock.DebugView.CurrentState">
            <summary>
            Shows in human-readable format the current state of the mocking API internals.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.DebugView.IsTraceEnabled">
            <summary>
            Enables or disables the step-by-step event trace.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.DebugView.FullTrace">
            <summary>
            Shows the entire event log when the event trace is enabled.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.DebugView.LastTrace">
            <summary>
            When the event trace is enabled, this property shows the portion
            of the event log that was added since the property was last evaluated.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.DisableAutomaticRepositoryResetAttribute">
            <summary>
            Used to disable the automatic generation of calls to Mock.Reset() in test methods by the profiler.
            </summary>
            <remarks>
            When the JustMock profiler is enabled, it is quite necessary to call Mock.Reset() at the end of
            every test method that does mocking or calls other methods that do mocking. This way you'll be
            sure that no state leaks from test to test and your tests always run at top speed.
            
            The JustMock profiler automatically adds calls to Mock.Reset() to the end of every test method
            that is in an assembly that has a reference to the Telerik.JustMock assembly. If your test method looks like
            <code>
            [Test]
            public void MyTest()
            {
                ... // body of test
            }
            </code>
            ...then the profiler wraps it in a try/finally block like so:
            <code>
            [Test]
            public void MyTest()
            {
                try {
                    ... // body of test
                } finally {
                    Mock.Reset();
                }
            }
            </code>
            ...thus ensuring that Mock.Reset() is called at the end of every test method without any
            burden imposed on the test author.
            
            Sometimes this try/finally block gets in your way though. For example, try/catch/finally
            blocks change the lifetime of objects in such a way that objects referenced only by WeakReferences
            will not be collected in the scope they're handled if you call GC.Collect() in that same scope.
            
            Whenever you have a test that passes with the JustMock profiler disabled, but fails when the profiler
            is enabled, *and* you don't use mocking in that test, the issue may be resolved by decorating your
            test with this attribute.
            </remarks>
        </member>
        <member name="P:Telerik.JustMock.DisableAutomaticRepositoryResetAttribute.AllowMocking">
            <summary>
            Allow the use of the mocking API inside this method. You must explicitly call
            Mock.Reset() at the end of your test method.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IAction`1">
            <summary>
            Defines common expecations.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1">
            <summary>
            Defines members for setting up delegate to execute as mehtod body.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead(System.Action)">
            <summary>
            Specifies the delegate that will execute for the expected method.
            </summary>
            <param name="action">delegate the method body</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead(System.Delegate)">
            <summary>
            Specifies the delegate that will execute for the expected method.
            </summary>
            <param name="delegate">Target delegate to evaluate.</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``1(System.Action{``0})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``2(System.Action{``0,``1})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``3(System.Action{``0,``1,``2})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``4(System.Action{``0,``1,``2,``3})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``5(Telerik.JustMock.Action{``0,``1,``2,``3,``4})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``6(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``7(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``8(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``9(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``10(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``11(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``12(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``13(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``14(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T14">Type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``15(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T14">Type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T15">Type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``16(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T14">Type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T15">Type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T16">Type of the sixteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IThrows`1.Throws(System.Exception)">
            <summary>
            Throws a the specified expection for target call.
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IThrows`1.Throws``1">
            <summary>
            Throws a the specified expection for target call.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IThrows`1.Throws``1(System.Object[])">
            <summary>
            Throws a the specified expection for target call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IAssertable">
            <summary>
            Mark the statement as assertable in <see cref="M:Telerik.JustMock.Mock.Assert``1(``0)"/>.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IMustBeCalled">
            <summary>
            Defines an operation that marks a expectation as must.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IMustBeCalled.MustBeCalled">
            <summary>
            Specifies that the mock call should be invoked to pass <see cref="M:Telerik.JustMock.Mock.Assert``1(``0)"/>
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.ISetupBehavior">
            <summary>
            Defines the expected behavior for a setup.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.ISetupBehavior.InSequence">
            <summary>
            Specifies that justmock should invoke different mock instance for each setup.
            </summary>
            <remarks>
            When this modifier is applied
            for similar type call, the flow of setups will be maintained.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.ISetupBehavior.OnAllThreads">
            <summary>
            Specifies that the arrangement will be respected regardless of the thread
            on which the call to the arranged member happens.
            </summary>
            <remarks>
            This is only needed for arrangements of static members. Arrangements on
            instance members are always respected, regardless of the current thread.
            
            Cross-thread arrangements are active as long as the current context
            (test method) is on the call stack. Be careful when arranging
            static members cross-thread because the effects of the arrangement may
            affect and even crash the testing framework.
            </remarks>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IOccurrence">
            <summary>
            Defines occurrence for a specific call.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IOccurrence.Occurs(System.Int32)">
            <summary>
            Specifies how many times the call should occur.
            </summary>
            <param name="numberOfTimes">Specified number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IOccurrence.OccursAtLeast(System.Int32)">
            <summary>
            Specifies how many times at least the call should occur.
            </summary>
            <param name="numberOfTimes">Specified number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IOccurrence.OccursAtMost(System.Int32)">
            <summary>
            Specifies how many times maximum the call can occur.
            </summary>
            <param name="numberOfTimes">Specified number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IOccurrence.OccursOnce">
            <summary>
            Specifies that the call must occur once.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IOccurrence.OccursNever">
            <summary>
            Specifies that the call must never occur.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IOrder">
            <summary>
            Defines the order for mock setups.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IOrder.InOrder">
            <summary>
            Specifies a call should occur in a specific order.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAssertable.CallOriginal">
            <summary>
            Use it to call the real implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.Raises(System.Action,System.Object[])">
            <summary>
             Raises the expected with sepecic arguments
            </summary>
            <param name="eventExpression"></param>
            <param name="args"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.Raises(System.Action,System.EventArgs)">
            <summary>
             Raises the expected with sepecic arguments
            </summary>
            <param name="eventExpression"></param>
            <param name="args">Event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.Raises``1(System.Action,System.Func{``0,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">An function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.Raises``2(System.Action,System.Func{``0,``1,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">An function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.Raises``3(System.Action,System.Func{``0,``1,``2,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">An function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.Raises``4(System.Action,System.Func{``0,``1,``2,``3,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">An function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.DoNothing">
            <summary>
             Specfies call a to step over (loose mocks only).
            </summary>
            <remarks>
            For loose mocks by default the behavior is step over.
            </remarks>
            <returns>Refarence to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/></returns>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IFunc`1">
            <summary>
            Interface containing Func type method expecatations.
            </summary>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IReturns`1">
            <summary>
            Interface containing overloads of the Returns method.
            </summary>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IReturns`1.Returns``1(System.Func{``0,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IReturns`1.Returns``2(System.Func{``0,``1,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IReturns`1.Returns``3(System.Func{``0,``1,``2,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IReturns`1.Returns``4(System.Func{``0,``1,``2,``3,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IReturns`1.Returns``5(Telerik.JustMock.Func{``0,``1,``2,``3,``4,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IReturns`1.Returns``6(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IReturns`1.Returns``7(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IReturns`1.Returns``8(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IReturns`1.Returns``9(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IReturns`1.Returns``10(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IReturns`1.Returns``11(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IReturns`1.Returns``12(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IReturns`1.Returns``13(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IReturns`1.Returns``14(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IReturns`1.Returns``15(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T15">Type of the fifteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IReturns`1.Returns``16(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T15">Type of the fifteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T16">Type of the sixteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns(`0)">
            <summary>	
            Specifies the return value for the expected method.
            </summary>
            <param name="value">any object value</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns(System.Delegate)">
            <summary>
            Specifies the delegate to evaluate and return for the expected method.
            </summary>
            <param name="delegate">Target delegate to evaluate.</param>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns(System.Func{`0})">
            <summary>
            Specifies the delegate to evaluate and return for the expected method.
            </summary>
            <param name="func">Target delegate to evaluate</param>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface</returns>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IWhen`1">
            <summary>
            Interface containing overloads of the When method.
            </summary>
            <typeparam name="TContainer"></typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IWhen`1.When``1(System.Func{``0,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IWhen`1.When``2(System.Func{``0,``1,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IWhen`1.When``3(System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IWhen`1.When``4(System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IWhen`1.When``5(Telerik.JustMock.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IWhen`1.When``6(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IWhen`1.When``7(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IWhen`1.When``8(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IWhen`1.When``9(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IWhen`1.When``10(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IWhen`1.When``11(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IWhen`1.When``12(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IWhen`1.When``13(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IWhen`1.When``14(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IWhen`1.When``15(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T15">Type of the fifteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IWhen`1.When``16(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T15">Type of the fifteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T16">Type of the sixteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IIgnorable`1.IgnoreArguments">
            <summary>
            Specifies to ignore any argument for the target call.
            </summary>
            <returns>Func or Action Container</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IIgnorable`1.When(System.Func{System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IInstanceScope`1">
            <summary>
            Specifies instance scope for the expectation.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IInstanceScope`1.IgnoreInstance">
            <summary>
            Defines that the expectation should occur for all instance.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation">
            <summary>
            Defines methods to mock non-public members.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Arrange(System.Object,System.String,System.Object[])">
            <summary>
            Arranges a method for mocking.
            </summary>
            <param name="target">Target instance</param>
            <param name="memberName">Member name</param>
            <param name="args">Mehtod arguments</param>
            <returns>Refernce to setup actions calls</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Arrange(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Setups a non-public method for mocking.
            </summary>
            <param name="target">Target instance</param>
            <param name="method">Method to setup taken from reflection.</param>
            <param name="args">Method arguments</param>
            <returns>Refernce to setup actions calls</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Arrange``1(System.Object,System.String,System.Object[])">
            <summary>
            Arranges a method for mocking.
            </summary>
            <typeparam name="TReturn">Return type</typeparam>
            <param name="target">Target instance.</param>
            <param name="memberName">Target member name</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Arrange``1(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Setups a non-public method for mocking.
            </summary>
            <typeparam name="TReturn">Return type</typeparam>
            <param name="target">Target instance</param>
            <param name="method">Method to setup taken from reflection.</param>
            <param name="args">Method arguments</param>
            <returns>Refernce to setup actions calls</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert``1(System.Object,System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="target">Target mock</param>
            <param name="memberName">Name of the member</param>
            <typeparam name="TReturn">Return type of the method</typeparam>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Asserts the specified method that it is called as expected.
            </summary>
            <param name="target">Target mock</param>
            <param name="method">Method to assert taken from reflection.</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert(System.Object,System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="target">Target mock</param>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert``1(System.Object,System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="target">Target mock</param>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <typeparam name="TReturn">Return type of the method</typeparam>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert(System.Object,System.Reflection.MethodInfo,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified method that it is called as expected.
            </summary>
            <param name="target">Target mock</param>
            <param name="method">Method to assert taken from reflection.</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert(System.Object,System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="target">Target mock</param>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <param name="args">Method arguments</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.GetTimesCalled(System.Object,System.Reflection.MethodInfo,System.Object[])" -->
        <!-- Badly formed XML comment ignored for member "M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.GetTimesCalled(System.Object,System.String,System.Object[])" -->
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Raise(System.Object,System.Reflection.EventInfo,System.Object[])">
            <summary>
            Raises an event specified using reflection. If the event is declared on a C# or VB class
            and has the default implementation for add/remove, then that event can also be raised using this 
            method, even with the profiler off.
            </summary>
            <param name="instance">Instance on which to raise the event.</param>
            <param name="eventInfo">The event to raise.</param>
            <param name="args">Arguments to pass to the event handlers.</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Raise(System.Reflection.EventInfo,System.Object[])">
            <summary>
            Raises a static event specified using reflection. If the event is declared on a C# or VB class
            and has the default implementation for add/remove, then that event can also be raised using this 
            method, even with the profiler off.
            </summary>
            <param name="eventInfo">The event to raise.</param>
            <param name="args">Arguments to pass to the event handlers.</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Raise(System.Object,System.String,System.Object[])">
            <summary>
            Raises an event by name. If the event is declared on a C# or VB class
            and has the default implementation for add/remove, then that event can also be raised using this 
            method, even with the profiler off.
            </summary>
            <param name="instance">Instance on which to raise the event.</param>
            <param name="eventName">The name of event to raise.</param>
            <param name="args">Arguments to pass to the event handlers.</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Raise(System.Type,System.String,System.Object[])">
            <summary>
            Raises a static event by name. If the event is declared on a C# or VB class
            and has the default implementation for add/remove, then that event can also be raised using this 
            method, even with the profiler off.
            </summary>
            <param name="eventName">The type on which the event is declared.</param>
            <param name="eventName">The name of event to raise.</param>
            <param name="args">Arguments to pass to the event handlers.</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.MakePrivateAccessor(System.Object)">
            <summary>
            Creates an accessor object that can invoke non-public methods and get/set non-public properties and fields.
            Equivalent to <code>new PrivateAccessor(instance)</code>.
            </summary>
            <param name="instance">Instance to which non-public access will be given.</param>
            <returns>Non-public accessor.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.MakeStaticPrivateAccessor(System.Type)">
            <summary>
            Creates an accessor object that can invoke static (Shared in Visual Basic) non-public methods and static get/set non-public properties and fields.
            Equivalent to <code>PrivateAccessor.ForType(type)</code>.
            </summary>
            <param name="type">Type whose static members will be given non-public access to.</param>
            <returns>Non-public accessor.</returns>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IReturnCollection">
            <summary>
            Defines member for mocking <see cref="T:System.Linq.IQueryable"/> collection.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IWaitDuration">
            <summary>
            Defines the time to wait before an event can be raised.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Expectations.Abstraction.IWaitDuration.Miliseconds">
            <summary>
            Number of miliseconds to wait for executing the event.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.ActionExpectation">
            <summary>
            Defines action related setups.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.CommonExpectation`1">
            <summary>
            Implements common expecations.
            </summary>
            <summary>
            Implements common expecations.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead(System.Action)">
            <summary>
            Defines the body of the expected method that will be executed instead of the orginal method body.
            </summary>
            <param name="action">delegate the method body</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead(System.Delegate)">
            <summary>
            Specifies the delegate that will execute for the expected method.
            </summary>
            <param name="delegate">Target delegate to evaluate.</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Raises(System.Action,System.Object[])">
            <summary>
             Raises the expected with sepecic arguments
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Raises(System.Action,System.EventArgs)">
            <summary>
             Raises the expected event with provided <see cref="T:System.EventArgs"/>.
            </summary>
            <param name="eventExpression"></param>
            <param name="args">Event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Raises``1(System.Action,System.Func{``0,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">Function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Raises``2(System.Action,System.Func{``0,``1,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">An function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Raises``3(System.Action,System.Func{``0,``1,``2,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">An function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Raises``4(System.Action,System.Func{``0,``1,``2,``3,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">An function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Throws(System.Exception)">
            <summary>
            Throws a the specified expection for target call.
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Throws``1">
            <summary>
            Throws a the specified expection for target call.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Throws``1(System.Object[])">
            <summary>
            Throws a the specified expection for target call.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.CallOriginal">
            <summary>
            Use it to call the real implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoNothing">
            <summary>
             Specfies call a to step over.
            </summary>
            <remarks>
            For loose mocks by default the behavior is step over.
            </remarks>
            <returns>Refarence to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.MustBeCalled">
            <summary>
            Specifies that the mock call should be invoked to pass <see cref="!:Mock.Assert&lt;T&gt;(T)"/>
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Occurs(System.Int32)">
            <summary>
            Specifies how many times the call should occur.
            </summary>
            <param name="numberOfTimes">Specified number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.OccursAtLeast(System.Int32)">
            <summary>
            Specifies how many times atleast the call should occur.
            </summary>
            <param name="numberOfTimes">Specified number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.OccursAtMost(System.Int32)">
            <summary>
            Specifies how many times maximum the call can occur.
            </summary>
            <param name="numberOfTimes">Specified number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.OccursOnce">
            <summary>
            Specifies that the call must occur once.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.OccursNever">
            <summary>
            Specifies that the call must never occur.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.InSequence">
            <summary>
            Specifies that justmock should invoke different mock instance for each setup.
            </summary>
            <remarks>
            When this modifier is applied
            for similar type call, the flow of setups will be maintained.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.InOrder">
            <summary>
            Specifies a call should occur in a specific order.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.IgnoreInstance">
            <summary>
            Defines that the expectation should occur for all instance.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.When(System.Func{System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.IgnoreArguments">
            <summary>
            Specifies to ignore any argument for the target call.
            </summary>
            <returns>Func or Action Container</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``1(System.Action{``0})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``2(System.Action{``0,``1})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``3(System.Action{``0,``1,``2})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``4(System.Action{``0,``1,``2,``3})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``5(Telerik.JustMock.Action{``0,``1,``2,``3,``4})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``6(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``7(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``8(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``9(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``10(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``11(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``12(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``13(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``14(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T14">Type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``15(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T14">Type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T15">Type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``16(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T14">Type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T15">Type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T16">Type of the sixteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.When``1(System.Func{``0,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.When``2(System.Func{``0,``1,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.When``3(System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.When``4(System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.When``5(Telerik.JustMock.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.When``6(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.When``7(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.When``8(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.When``9(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.When``10(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.When``11(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.When``12(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.When``13(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.When``14(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.When``15(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T15">Type of the fifteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.When``16(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            Specifies an additional condition that must be true for this arrangement to be
            considered when the arranged member is called. This condition is evaluated in addition
            to the conditions imposed by any argument matchers in the arrangement.
            
            This method allows a more general way of matching arrangements than argument matchers do.
            </summary>
            <param name="condition">A function that should return 'true' when this
            arrangement should be considered and 'false' if this arrangement doesn't match the user criteria.</param>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T15">Type of the fifteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T16">Type of the sixteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Expectations.CollectionExpectation`1">
            <summary>
            Defines expectation for a <see cref="T:System.Linq.IQueryable"/> collection.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.EventWaitDuration">
            <summary>
            Defines the wait duration for a specific event.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.EventWaitDuration.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.Expectations.EventWaitDuration"/> class.
            </summary>
            <param name="miliSeconds">Time duration</param>
        </member>
        <member name="P:Telerik.JustMock.Expectations.EventWaitDuration.Miliseconds">
            <summary>
            Number of miliseconds to wait for executing the event.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.FuncExpectation`1">
            <summary>
            Defines the expectation for a sepcific method.
            </summary>
            <summary>
            Implements common expecations.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns(`0)">
            <summary>
            Defines the return value for a sepecific method expecation.
            </summary>
            <param name="value">any object value</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns(System.Delegate)">
            <summary>
            Specifies the delegate to evaluate and return for the expected method.
            </summary>
            <param name="delegate">Target delegate to evaluate.</param>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns(System.Func{`0})">
            <summary>
            Specifies the function to evaluate and return.
            </summary>
            <param name="func">Target function to evaluate</param>
            <returns>Refarence to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns(System.Func{`0,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``1(System.Func{``0,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``2(System.Func{``0,``1,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``3(System.Func{``0,``1,``2,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``4(System.Func{``0,``1,``2,``3,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``5(Telerik.JustMock.Func{``0,``1,``2,``3,``4,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``6(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``7(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``8(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``9(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``10(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``11(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``12(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``13(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``14(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``15(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T15">Type of the fifteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``16(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T15">Type of the fifteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T16">Type of the sixteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="T:Telerik.JustMock.Func`6">
             <summary>
             Encapsulates a method that has 5 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`7">
             <summary>
             Encapsulates a method that has 6 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`8">
             <summary>
             Encapsulates a method that has 7 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`9">
             <summary>
             Encapsulates a method that has 8 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`10">
             <summary>
             Encapsulates a method that has 9 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`11">
             <summary>
             Encapsulates a method that has 10 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`12">
             <summary>
             Encapsulates a method that has 11 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`13">
             <summary>
             Encapsulates a method that has 12 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`14">
             <summary>
             Encapsulates a method that has 13 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`15">
             <summary>
             Encapsulates a method that has 14 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`16">
             <summary>
             Encapsulates a method that has 15 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`17">
             <summary>
             Encapsulates a method that has 16 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Helpers.FluentHelper">
            <summary>
            Contains fluent extensions for setting up or asserting mock expectations.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Arrange``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Setups the target call to act in a specific way.
            </summary>
            <typeparam name="T">Mock type</typeparam>
            <typeparam name="TResult">Return type for the target setup.</typeparam>
            <param name="obj">Target instance.</param>
            <param name="expression">Target expression.</param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.FuncExpectation`1"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.ArrangeSet``1(``0,System.Action{``0})">
            <summary>
            Setups target property set operation to act in a specific way.
            <example>
            <code>
            Mock.ArrangeSet(() =&gt;; foo.MyValue = 10).Throws(new InvalidOperationException());
            </code>
            This will throw InvalidOperationException for when foo.MyValue is set with 10.
            </example>
            </summary>
            <typeparam name="T">Mock type.</typeparam>
            <param name="obj">Target mock object.</param>
            <param name="action">Target action.</param>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.ActionExpectation"/> to setup the mock.</returns>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Arrange``1(``0,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Setups the target call to act in a specific way.
            </summary>
            <typeparam name="T">Return type for the target setup.</typeparam>
            <param name="obj">Target instance.</param>
            <param name="expression">Target expression.</param>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.ActionExpectation"/> to setup the mock.</returns>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.ArrangeLike``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Arranges the return values of properties and methods according to the given functional specification.
            </summary>
            <typeparam name="T">Type of the mock.</typeparam>
            <param name="mock">The mock on which to make the arrangements.</param>
            <param name="functionalSpecification">The functional specification to apply to this mock.</param>
            <remarks>
            See article "Create Mocks By Example" for further information on how to write functional specifications.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Assert``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Asserts the specific call
            </summary>
            <typeparam name="T">Type of the mock.</typeparam>
            <typeparam name="TReturn">Return type for the target setup.</typeparam>
            <param name="obj">Target object.</param>
            <param name="action">Target action.</param>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Assert``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},Telerik.JustMock.Occurs)">
            <summary>
            Asserts the specific call
            </summary>
            <typeparam name="T">Type of the mock.</typeparam>
            <typeparam name="TReturn">Return type for the target setup.</typeparam>
            <param name="obj">Target object.</param>
            <param name="expression">Target expression</param>
            <param name="occurs">Specifies the number of times a mock call should occur.</param>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Assert``1(``0,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Asserts the specific call
            </summary>
            <typeparam name="T">Type of the mock.</typeparam>
            <param name="obj">Target object.</param>
            <param name="action">Target action.</param>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Assert``1(``0,System.Linq.Expressions.Expression{System.Action{``0}},Telerik.JustMock.Occurs)">
            <summary>
            Asserts the specific call
            </summary>
            <typeparam name="T">Type of the mock.</typeparam>
            <param name="obj">Target mock object</param>
            <param name="expression">Target expression</param>
            <param name="occurs">Specifies the number of times a mock call should occur.</param>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Raise``1(``0,System.Action{``0},System.EventArgs)">
            <summary>
            Raises the specified event. If the event is not mocked and is declared on a C# or VB class
            and has the default implementation for add/remove, then that event can also be raised using this
            method, even with the profiler off.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <param name="obj">Target instance.</param>
            <param name="eventExpression">Event expression.</param>
            <param name="args">EventArgs argument.</param>
            <remarks>
            Use this method for raising events based on <see cref="T:System.EventHandler"/>. The instance given
            in the event expression is used as an argument for the 'sender' parameter.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Raise``1(``0,System.Action{``0},System.Object[])">
            <summary>
            Raises the specified event. If the event is not mocked and is declared on a C# or VB class
            and has the default implementation for add/remove, then that event can also be raised using this
            method, even with the profiler off.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <param name="obj">Target instance.</param>
            <param name="eventExpression">Event expression.</param>
            <param name="args">Delegate arguments.</param>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Assert``1(``0)">
            <summary>
            Asserts all expected calls that are marked as must or
            to be occurred a certain number of times.
            </summary>
            <typeparam name="T">Type of the mock.</typeparam>
            <param name="target">Target instance.</param>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.AssertAll``1(``0)">
            <summary>
            Asserts all expected setups.
            </summary>
            <typeparam name="T">Type of the mock.</typeparam>
            <param name="target">Target instance.</param>
        </member>
        <member name="T:Telerik.JustMock.Helpers.AfterLastValue">
            <summary>
            Sets behavior after last value.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Helpers.AfterLastValue.KeepReturningLastValue">
            <summary>
            The last value in the values array will be returned on each call.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Helpers.AfterLastValue.ThrowAssertionFailed">
            <summary>
            An assertion failure exception will be thrown on the call after the one that returns the last value.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Helpers.AfterLastValue.StartFromBeginning">
            <summary>
            The member will start returning the same values starting from the beginning.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Helpers.MultipleReturnValueChainHelper">
            <summary>
            Provides ability to chain Returns method that returns a single value.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Helpers.MultipleReturnValueChainHelper.Returns``1(Telerik.JustMock.Expectations.Abstraction.IAssertable,``0)">
            <summary>
            Defines the return value for a specific method expectation.
            </summary>
            <typeparam name="TReturn">Type of the return value.</typeparam>
            <param name="assertable">Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</param>
            <param name="value">Any object value.</param>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IMustBeCalled"/> interface</returns>
        </member>
        <member name="M:Telerik.JustMock.Helpers.MultipleReturnValueChainHelper.ReturnsMany``1(Telerik.JustMock.Expectations.Abstraction.IFunc{``0},``0[])">
            <summary>
            Specifies that the arranged member will return consecutive values from the given array.
            If the arranged member is called after it has returned the last value, an exception is thrown.
            </summary>
            <typeparam name="TReturn">Type of the return value.</typeparam>
            <param name="func">The arranged member.</param>
            <param name="values">The array of values that will be returned by the arranged member.</param>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Helpers.MultipleReturnValueChainHelper.ReturnsMany``1(Telerik.JustMock.Expectations.Abstraction.IFunc{``0},System.Collections.Generic.IList{``0},Telerik.JustMock.Helpers.AfterLastValue)">
            <summary>
            Specifies that the arranged member will return consecutive values from the given array.
            If the arranged member is called after it has returned the last value, the behavior depends on the behavior parameter.
            </summary>
            <typeparam name="TReturn">Type of return value</typeparam>
            <param name="func">The arranged member</param>
            <param name="values">The list of values that will be returned by the arranged member. The list may be modified after the arrangement is made.</param>
            <param name="behavior">The behavior after the last value has been returned.</param>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="T:Telerik.JustMock.Mock">
            <summary>
            Entry point for setting up and asserting mocks.
            </summary>
            <summary>
            Mock entry point for settting up expection, creating mock objects and verfiying results.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Arrange``2(System.Func{``1})">
            <summary>
            Setups the target call to act in a specific way.
            </summary>
            <typeparam name="T">Target type</typeparam>
            <typeparam name="TResult">
            Return type for the target setup.
            </typeparam>
            <param name="func">
            Expression delegate to the target call
            </param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.FuncExpectation`1"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Arrange``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Setups the target mock call with user expectation.
            </summary>
            <typeparam name="TResult">
            Return type for the target setup.
            </typeparam>
            <param name="expression">
            Provide the target method call
            </param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.FuncExpectation`1"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Arrange``2(``0,System.Func{``0,``1})">
            <summary>
            Setups the target mock call with user expectation.
            </summary>
            <typeparam name="T">Target type</typeparam>
            <typeparam name="TResult">
            Return type for the target setup.
            </typeparam>
            <param name="obj">
            Target instance.
            </param>
            <param name="func">
            Expression delegate to the target call
            </param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.FuncExpectation`1"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Arrange(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Setups the target call to act in a specific way.
            </summary>
            <param name="expression">
            Target expression
            </param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.ActionExpectation"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.ArrangeSet(System.Action)">
            <summary>
            Setups target property set operation to act in a specific way.  
            <example>
            <code>
            Mock.ArrangeSet(() =&gt; foo.MyValue = 10).Throws(new InvalidOperationException());
            </code>
            This will throw InvalidOperationException for when foo.MyValue is set with 10.
            </example>
            </summary>
            <param name="action">
            Target action
            </param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.ActionExpectation"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.ArrangeLike``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Arranges the return values of properties and methods according to the given functional specification.
            </summary>
            <typeparam name="T">Mock type.</typeparam>
            <param name="mock">The mock on which to make the arrangements. If 'null' then the specification will be applied to all instances.</param>
            <param name="functionalSpecification">The functional specification to apply to this mock.</param>
            <remarks>
            See article "Create Mocks By Example" for further information on how to write functional specifications.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Asserts a specific call from expression.
            </summary>
            <param name="expression">Target expression</param>
            <typeparam name="TReturn">Return type for the assert expression</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert``1(System.Linq.Expressions.Expression{System.Func{``0}},Telerik.JustMock.Args)">
            <summary>
            Asserts a specific call from expression.
            </summary>
            <param name="expression">Target expression</param>
            <typeparam name="TReturn">Return type for the assert expression</typeparam>
            <param name="args">Assert argument</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert``1(System.Linq.Expressions.Expression{System.Func{``0}},Telerik.JustMock.Occurs)">
            <summary>
            Asserts a specific call from expression.
            </summary>
            <param name="expression">Target expression</param>
            <param name="occurs">Specifies how many times a call has occurred</param>
            <typeparam name="TReturn">Return type for the target call</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert``1(System.Linq.Expressions.Expression{System.Func{``0}},Telerik.JustMock.Args,Telerik.JustMock.Occurs)">
            <summary>
            Asserts the specified call from expression.
            </summary>
            <param name="expression">The action to verify.</param>
            <param name="args">Specifies to ignore the instance and/or arguments during assertion.</param>
            <param name="occurs">Specifies the number of times a mock call should occur.</param>
            <typeparam name="TReturn">Return type for the target call</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Asserts a specific call from expression.
            </summary>
            <param name="expression">Action expression defining the action to verify.</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert(System.Linq.Expressions.Expression{System.Action},Telerik.JustMock.Args)">
            <summary>
            Asserts the specified call from expression.
            </summary>
            <param name="expression">The action to verify.</param>
            <param name="args">Specifies to ignore the instance and/or arguments during assertion.</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert(System.Linq.Expressions.Expression{System.Action},Telerik.JustMock.Occurs)">
            <summary>
            Asserts the specified call from expression.
            </summary>
            <param name="expression">The action to verify.</param>
            <param name="occurs">Specifies the number of times a mock call should occur.</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert(System.Linq.Expressions.Expression{System.Action},Telerik.JustMock.Args,Telerik.JustMock.Occurs)">
            <summary>
            Asserts the specified call from expression.
            </summary>
            <param name="expression">The action to verify.</param>
            <param name="args">Specifies to ignore the instance and/or arguments during assertion.</param>
            <param name="occurs">Specifies the number of times a mock call should occur.</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert``2(``0,System.Func{``0,``1})">
            <summary>
            Asserts a specific call from expression.
            </summary>
            <param name="target">Target instance</param>
            <param name="func">Contains the target mock call</param>
            <typeparam name="T">Target type</typeparam>
            <typeparam name="TResult">The type of the return value of the method</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert``2(``0,System.Func{``0,``1},Telerik.JustMock.Occurs)">
            <summary>
            Asserts a specific call from expression.
            </summary>
            <param name="target">Target instance</param>
            <param name="occurs">Specifies how many times a call has occurred</param>
            <param name="func">Contains the target mock call</param>
            <typeparam name="T">Target type</typeparam>
            <typeparam name="TResult">The type of the return value of the method</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.AssertSet(System.Action)">
            <summary>
            Asserts the specific property set operation.
            </summary>
            <param name="action">Action defining the set operation</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.AssertSet(System.Action,Telerik.JustMock.Occurs)">
            <summary>
            Asserts the specific property set operation.
            </summary>
            <param name="action">Action defining the set operation</param>
            <param name="occurs">Specifies the number of times a mock call should occur.</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.AssertSet(System.Action,Telerik.JustMock.Args)">
            <summary>
            Asserts the specific property set operation.
            </summary>
            <param name="action">Action defining the set operation</param>
            <param name="args">Specifies to ignore the instance and/or arguments during assertion.</param>
            <param name="occurs">Specifies the number of times a mock call should occur.</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.AssertSet(System.Action,Telerik.JustMock.Args,Telerik.JustMock.Occurs)">
            <summary>
            Asserts the specific property set operation.
            </summary>
            <param name="action">Action defining the set operation</param>
            <param name="args">Specifies to ignore the instance and/or arguments during assertion.</param>
            <param name="occurs">Specifies the number of times a mock call should occur.</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert``1(``0)">
            <summary>
            Asserts all expected calls that are marked as must or
            to be occurred a certain number of times.
            </summary>
            <typeparam name="T">Target type</typeparam>
            <param name="mocked">Target instance</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.AssertAll``1(``0)">
            <summary>
            Asserts all expected setups.
            </summary>
            <typeparam name="T">Target type</typeparam>
            <param name="mocked">Target instance</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.GetTimesCalled``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Returns the number of times the specified member was called.
            </summary>
            <param name="expression">The action to inspect</param>
            <returns>Number of calls</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.GetTimesCalled``1(System.Linq.Expressions.Expression{System.Func{``0}},Telerik.JustMock.Args)">
            <summary>
            Returns the number of times the specified member was called.
            </summary>
            <param name="expression">The action to inspect</param>
            <param name="args">Specifies to ignore the instance and/or arguments during assertion.</param>
            <returns>Number of calls</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.GetTimesCalled(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Returns the number of times the specified member was called.
            </summary>
            <param name="expression">The action to inspect</param>
            <returns>Number of calls</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.GetTimesCalled(System.Linq.Expressions.Expression{System.Action},Telerik.JustMock.Args)">
            <summary>
            Returns the number of times the specified member was called.
            </summary>
            <param name="expression">The action to inspect</param>
            <param name="args">Specifies to ignore the instance and/or arguments during assertion.</param>
            <returns>Number of calls</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.GetTimesSetCalled(System.Action)">
            <summary>
            Returns the number of times the specified setter or event subscription method was called.
            </summary>
            <param name="action">The setter or event subscription method to inspect</param>
            <returns>Number of calls</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.GetTimesSetCalled(System.Action,Telerik.JustMock.Args)">
            <summary>
            Returns the number of times the specified setter or event subscription method was called.
            </summary>
            <param name="action">The setter or event subscription method to inspect</param>
            <param name="args">Specifies to ignore the instance and/or arguments during assertion.</param>
            <returns>Number of calls</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Create a mocked instance from specified real constructor with <see cref="F:Telerik.JustMock.Behavior.RecursiveLoose"/> behavior.
            </summary>
            <typeparam name="T">Target type for the mocked instance</typeparam>
            <param name="expression">Target expression for specifying the new type.</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1(System.Linq.Expressions.Expression{System.Func{``0}},Telerik.JustMock.Behavior)">
            <summary>
            Creates a mocked instance from specified real constructor.
            </summary>
            <typeparam name="T">Target type for the mocked instance</typeparam>
            <param name="expression">Target expression for specifying the new type.</param>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.RecursiveLoose"/></param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1(System.Action{Telerik.JustMock.Abstraction.IFluentConfig{``0}})">
            <summary>
            Creates a mocked instance from settings specified in the lambda.
            </summary>
            <typeparam name="T">Type of the mock</typeparam>
            <param name="settings">Specifies mock settings</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1(Telerik.JustMock.Behavior,System.Object[])">
            <summary>
            Creates a mocked instance from a given type.
            </summary>
            <typeparam name="T">Type of the mock</typeparam>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.RecursiveLoose"/></param>
            <param name="args">Constructor arguments</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1(Telerik.JustMock.Behavior)">
            <summary>
            Creates a mocked instance from a given type.
            </summary>
            <typeparam name="T">Type of the mock</typeparam>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.RecursiveLoose"/></param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1">
            <summary>
            Creates a mocked instance from a given type with <see cref="F:Telerik.JustMock.Behavior.RecursiveLoose"/> behavior.
            </summary>
            <typeparam name="T">Type of the mock</typeparam>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create(System.Type,System.Object[])">
            <summary>
            Creates a mocked instance from a given type with <see cref="F:Telerik.JustMock.Behavior.RecursiveLoose"/> behavior.
            </summary>
            <param name="target">Target to mock</param>
            <param name="args">Constructor arguments</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create(System.Type)">
            <summary>
            Creates a mocked instance from a given type with <see cref="F:Telerik.JustMock.Behavior.RecursiveLoose"/> behavior.
            </summary>
            <param name="target">Target to mock</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1(Telerik.JustMock.Constructor)">
            <summary>
            Creates a mocked instance from a given type with <see cref="F:Telerik.JustMock.Behavior.RecursiveLoose"/> behavior.
            </summary>
            <param name="constructor">
            Specifies whether to call the base constructor
            </param>
            <typeparam name="T">Target type</typeparam>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1(Telerik.JustMock.Constructor,Telerik.JustMock.Behavior)">
            <summary>
            Creates a mocked instance from a given type.
            </summary>
            <param name="constructor">
            Specifies whether to call the base constructor
            </param>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.RecursiveLoose"/></param>
            <returns>Mock instance</returns>
            <typeparam name="T">Target type</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create(System.Type,Telerik.JustMock.Constructor,Telerik.JustMock.Behavior)">
            <summary>
            Creates a mocked instance from a given type.
            </summary>
            <param name="targetType">Target to mock</param>
            <param name="constructor">
            Specifies whether to call the base constructor
            </param>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.RecursiveLoose"/></param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create(System.Type,System.Action{Telerik.JustMock.Abstraction.IFluentConfig})">
            <summary>
            Creates a mocked instance from a given type.
            </summary>
            <param name="target">Target type to mock</param>
            <param name="settings">Mock settings</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create(System.Type,Telerik.JustMock.Behavior,System.Object[])">
            <summary>
            Creates a mock instance from a given type.
            </summary>
            <param name="target">Mocking type</param>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.RecursiveLoose"/></param>
            <param name="args">Constructor arguments</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create(System.Type,Telerik.JustMock.Behavior)">
            <summary>
            Creates a mock instance from a given type.
            </summary>
            <param name="target">Mocking type</param>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.RecursiveLoose"/></param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1(System.Object[])">
            <summary>
            Creates a mocked instance from a given type with <see cref="F:Telerik.JustMock.Behavior.RecursiveLoose"/> behavior.
            </summary>
            <typeparam name="T">Mocked object type.</typeparam>
            <param name="args">Constructor arguments</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.CreateLike``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a mock with <see cref="F:Telerik.JustMock.Behavior.RecursiveLoose"/> behavior by parsing the given functional specification.
            </summary>
            <remarks>
            See article "Create Mocks By Example" for further information on how to write functional specifications.
            </remarks>
            <typeparam name="T">Type for the argument.</typeparam>
            <param name="functionalSpecification">The functional specification to apply to the mock object.</param>
            <returns>A mock with the given functional specification.</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Raise(System.Action,System.Object[])">
            <summary>
            Raises the specified event. If the event is not mocked and is declared on a C# or VB class
            and has the default implementation for add/remove, then that event can also be raised using this 
            method, even with the profiler off. The type on which the event is defined may need to be pre-intercepted
            using <see cref="!:Intercept"/> before calling Raise.
            </summary>
            <param name="eventExpression">Event expression</param>
            <param name="args">Delegate arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Reset">
            <summary>
            Removes all existing arrangements within the current mocking context (e.g. current test method).
            Arrangements made in parent mocking contexts (e.g. in fixture setup method) are preserved.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Mock.IsProfilerEnabled">
            <summary>
            Gets a value indicating whether the JustMock profiler is enabled.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.JustMock.Mock.NonPublic">
            <summary>
            Returns interface defining non-public expectations.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.MockAssertionFailedException">
            <summary>
            The exception that is thrown when Mock.Assert fails.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockAssertionFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MockAssertionFailedException"/> class.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="T:Telerik.JustMock.Occurs">
            <summary>
            Defines filters for calls , used in conjunction with assert.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Occurs.Never">
            <summary>
            Specifies that the expected call must never occur
            </summary>
            <returns>Occurs type.</returns>
        </member>
        <member name="M:Telerik.JustMock.Occurs.Once">
            <summary>
            Specifies that the expected call should occur once.
            </summary>
            <returns>Occurs type.</returns>
        </member>
        <member name="M:Telerik.JustMock.Occurs.AtLeast(System.Int32)">
            <summary>
            Specifies that the expected call should occur at least <paramref name="numberOfTimes"/>  times.
            </summary>
            <param name="numberOfTimes">Specific number of times</param>
            <returns>Occurs type.</returns>
        </member>
        <member name="M:Telerik.JustMock.Occurs.AtLeastOnce">
            <summary>
            Specifies that the expected call should occur at least once.
            </summary>
            <returns>Occurs type.</returns>
        </member>
        <member name="M:Telerik.JustMock.Occurs.AtMost(System.Int32)">
            <summary>
            Specifies that the expected call should occur at most <paramref name="numberOfTimes"/>  times.
            </summary>
            <param name="numberOfTimes">Specific number of times</param>
            <returns>Occurs type.</returns>
        </member>
        <member name="M:Telerik.JustMock.Occurs.Exactly(System.Int32)">
            <summary>
            Specifies that the expected call should occur exactly <paramref name="numberOfTimes"/>  times.
            </summary>
            <param name="numberOfTimes">Specific number of times</param>
            <returns>Occurs type.</returns>
        </member>
        <member name="M:Telerik.JustMock.Occurs.NotAvailable">
            <summary>
            Specifies that occurrence is not available.
            </summary>
            <returns>Occurs type.</returns>
        </member>
        <member name="T:Telerik.JustMock.Param">
            <summary>
            Defines parameter placeholders when the parameter type is one of the commonly occurring types, e.g. int.
            Example: Mock.Create&lt;IEqualityComparer&gt;(me => me.Equals(Arg.AnyObject, Arg.AnyObject) == Equals(Param._1, Param._2));
            In the example, Param._1 and Param._2 are implicitly converted to System.Object.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param._1">
            <summary>
            First field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param._2">
            <summary>
            Second field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param._3">
            <summary>
            Third field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param._4">
            <summary>
            Fourth field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param._5">
            <summary>
            Fifth field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param._6">
            <summary>
            Sixth field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param._7">
            <summary>
            Seventh field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param._8">
            <summary>
            Eighth field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param._9">
            <summary>
            Ninth field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param._10">
            <summary>
            Tenth field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param._11">
            <summary>
            Eleventh field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param._12">
            <summary>
            Twelfth field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param._13">
            <summary>
            Thirteenth field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param._14">
            <summary>
            Fourteenth field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param._15">
            <summary>
            Fifteenth field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param._16">
            <summary>
            Sixteenth field.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Param`1">
            <summary>
            Defines parameter placeholders when the parameter type is T.
            </summary>
            <typeparam name="T">Type of the parameter.</typeparam>
        </member>
        <member name="F:Telerik.JustMock.Param`1._1">
            <summary>
            First field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param`1._2">
            <summary>
            Second field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param`1._3">
            <summary>
            Third field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param`1._4">
            <summary>
            Fourth field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param`1._5">
            <summary>
            Fifth field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param`1._6">
            <summary>
            Sixth field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param`1._7">
            <summary>
            Seventh field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param`1._8">
            <summary>
            Eighth field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param`1._9">
            <summary>
            Ninth field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param`1._10">
            <summary>
            Tenth field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param`1._11">
            <summary>
            Eleventh field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param`1._12">
            <summary>
            Twelfth field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param`1._13">
            <summary>
            Thirteenth field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param`1._14">
            <summary>
            Fourteenth field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param`1._15">
            <summary>
            Fifteenth field.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Param`1._16">
            <summary>
            Sixteenth field.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.PrivateAccessor">
            <summary>
            Gives access to the non-public members of a type or instance. This class provides functionality similar to the
            one that exists in regular reflection classes with the added benefit that it can bypass essential security checks related
            to accessing non-public members through reflection.
            When the profiler is enabled, PrivateAccessor acquires additional power:
            - It can even be used to access all kinds of non-public members in Silverlight (and when running in partial trust in general).
            - All calls made through PrivateAccessor are always made with full trust (unrestricted) permissions.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.PrivateAccessor.#ctor(System.Object)">
            <summary>
            Creates a new <see cref="T:Telerik.JustMock.PrivateAccessor"/> wrapping the given instance. Can be used to access both instance and static members.
            </summary>
            <param name="instance">The instance to wrap.</param>
        </member>
        <member name="M:Telerik.JustMock.PrivateAccessor.ForType(System.Type)">
            <summary>
            Creates a new <see cref="T:Telerik.JustMock.PrivateAccessor"/> wrapping the given type. Can be used to access the static members of a type.
            </summary>
            <param name="type">Targeted type.</param>
            <returns>PrivateAccessor type.</returns>
        </member>
        <member name="M:Telerik.JustMock.PrivateAccessor.CallMethod(System.String,System.Object[])">
            <summary>
            Calls the specified method by name.
            </summary>
            <param name="name">The name of the method to call.</param>
            <param name="args">Arguments to pass to the method.</param>
            <returns>The value returned by the specified method.</returns>
        </member>
        <member name="M:Telerik.JustMock.PrivateAccessor.CallMethod(System.Reflection.MethodBase,System.Object[])">
            <summary>
            Calls the specified method.
            </summary>
            <param name="method">The method to call.</param>
            <param name="args">Arguments to pass to the method.</param>
            <returns>Return value of the method.</returns>
        </member>
        <member name="M:Telerik.JustMock.PrivateAccessor.CallStaticConstructor(System.Boolean)">
            <summary>
            Calls the type's static constructor. The static constructor can be executed even when the runtime
            has already called it as part of type's initialization.
            </summary>
            <param name="forceCall">
            When 'false', the static constructor will not be called if it has already run as part of
            type initialization. When 'true', the static constructor will be called unconditionally.
            If the type is not yet initialized and 'true' is given, the static constructor will be run
            twice.
            </param>
        </member>
        <member name="M:Telerik.JustMock.PrivateAccessor.GetIndex(System.Object)">
            <summary>
            Gets the value returned by the indexer (<code>this[T index]</code> in C#) for the specified index value.
            </summary>
            <param name="index">The index argument to pass to the indexer.</param>
            <returns>The value returned by the indexer.</returns>
        </member>
        <member name="M:Telerik.JustMock.PrivateAccessor.GetProperty(System.String,System.Object[])">
            <summary>
            Gets the value of a property by name.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="indexArgs">Optional index arguments if the property has any.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Telerik.JustMock.PrivateAccessor.SetIndex(System.Object,System.Object)">
            <summary>
            Sets a value to the indexer (<code>this[T index]</code> in C#) for the specified index value.
            </summary>
            <param name="index">The index argument to pass to the indexer.</param>
            <param name="value">The value to give to the indexer.</param>
        </member>
        <member name="M:Telerik.JustMock.PrivateAccessor.SetProperty(System.String,System.Object,System.Object[])">
            <summary>
            Sets the value of a property by name.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value to set to the property.</param>
            <param name="indexArgs">Optional index arguments if the property has any.</param>
        </member>
        <member name="M:Telerik.JustMock.PrivateAccessor.GetField(System.String)">
            <summary>
            Gets the value of a field.
            </summary>
            <param name="name">The name of the field.</param>
            <returns>The value of the field</returns>
        </member>
        <member name="M:Telerik.JustMock.PrivateAccessor.SetField(System.String,System.Object)">
            <summary>
            Sets the value of a field.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="value">The new value of the field.</param>
        </member>
        <member name="T:Telerik.JustMock.RangeKind">
            <summary>
             Defines the kind of range value to consider.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.RangeKind.Exclusive">
            <summary>
            Does not consider first and last value.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.RangeKind.Inclusive">
            <summary>
            Considers the First and last value.
            </summary>  
        </member>
        <member name="T:Telerik.JustMock.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Trial.JustMockExpiredException">
            <summary>
            The exception that is thrown when the trial of JustMock has expired.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Wait">
            <summary>
            Specifies the duration to wait before executing an event.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Wait.For(System.Int32)">
            <summary>
            Specifies the number of seconds to wait for executing an event.
            </summary>
            <param name="seconds">Seconds to wait</param>
            <returns>IWaitDuration type</returns>
        </member>
        <member name="M:Telerik.JustMock.Wait.For(System.TimeSpan)">
            <summary>
            Specifies the number of seconds to wait for executing an event.
            </summary>
            <param name="duration">Time duration to wait</param>
            <returns>IWaitDuration type</returns>
        </member>
    </members>
</doc>
