//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CalculatorAsyncInvoke.ServiceCalculator {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CalculationOperation", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceCalculator.Web")]
    public enum CalculationOperation : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Add = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Substract = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Multiply = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Divide = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceCalculator.IServiceCalculator")]
    public interface IServiceCalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCalculator/Calculate", ReplyAction="http://tempuri.org/IServiceCalculator/CalculateResponse")]
        int Calculate(int firstValue, int secondValue, CalculatorAsyncInvoke.ServiceCalculator.CalculationOperation operationType);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceCalculator/Calculate", ReplyAction="http://tempuri.org/IServiceCalculator/CalculateResponse")]
        System.IAsyncResult BeginCalculate(int firstValue, int secondValue, CalculatorAsyncInvoke.ServiceCalculator.CalculationOperation operationType, System.AsyncCallback callback, object asyncState);
        
        int EndCalculate(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCalculatorChannel : CalculatorAsyncInvoke.ServiceCalculator.IServiceCalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CalculateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceCalculatorClient : System.ServiceModel.ClientBase<CalculatorAsyncInvoke.ServiceCalculator.IServiceCalculator>, CalculatorAsyncInvoke.ServiceCalculator.IServiceCalculator {
        
        private BeginOperationDelegate onBeginCalculateDelegate;
        
        private EndOperationDelegate onEndCalculateDelegate;
        
        private System.Threading.SendOrPostCallback onCalculateCompletedDelegate;
        
        public ServiceCalculatorClient() {
        }
        
        public ServiceCalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceCalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceCalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceCalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<CalculateCompletedEventArgs> CalculateCompleted;
        
        public int Calculate(int firstValue, int secondValue, CalculatorAsyncInvoke.ServiceCalculator.CalculationOperation operationType) {
            return base.Channel.Calculate(firstValue, secondValue, operationType);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCalculate(int firstValue, int secondValue, CalculatorAsyncInvoke.ServiceCalculator.CalculationOperation operationType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCalculate(firstValue, secondValue, operationType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndCalculate(System.IAsyncResult result) {
            return base.Channel.EndCalculate(result);
        }
        
        private System.IAsyncResult OnBeginCalculate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int firstValue = ((int)(inValues[0]));
            int secondValue = ((int)(inValues[1]));
            CalculatorAsyncInvoke.ServiceCalculator.CalculationOperation operationType = ((CalculatorAsyncInvoke.ServiceCalculator.CalculationOperation)(inValues[2]));
            return this.BeginCalculate(firstValue, secondValue, operationType, callback, asyncState);
        }
        
        private object[] OnEndCalculate(System.IAsyncResult result) {
            int retVal = this.EndCalculate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCalculateCompleted(object state) {
            if ((this.CalculateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CalculateCompleted(this, new CalculateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CalculateAsync(int firstValue, int secondValue, CalculatorAsyncInvoke.ServiceCalculator.CalculationOperation operationType) {
            this.CalculateAsync(firstValue, secondValue, operationType, null);
        }
        
        public void CalculateAsync(int firstValue, int secondValue, CalculatorAsyncInvoke.ServiceCalculator.CalculationOperation operationType, object userState) {
            if ((this.onBeginCalculateDelegate == null)) {
                this.onBeginCalculateDelegate = new BeginOperationDelegate(this.OnBeginCalculate);
            }
            if ((this.onEndCalculateDelegate == null)) {
                this.onEndCalculateDelegate = new EndOperationDelegate(this.OnEndCalculate);
            }
            if ((this.onCalculateCompletedDelegate == null)) {
                this.onCalculateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCalculateCompleted);
            }
            base.InvokeAsync(this.onBeginCalculateDelegate, new object[] {
                        firstValue,
                        secondValue,
                        operationType}, this.onEndCalculateDelegate, this.onCalculateCompletedDelegate, userState);
        }
    }
}
