// Generated by CoffeeScript 1.7.1
(function() {
  this.httpRequest = (function() {
    var getHttpRequest, getJSON, makeRequest, postJSON;
    getHttpRequest = (function() {
      var xmlHttpFactories;
      xmlHttpFactories = [
        function() {
          return new XMLHttpRequest();
        }, function() {
          return new ActiveXObject("Msxml3.XMLHTTP");
        }, function() {
          return new ActiveXObject("Msxml2.XMLHTTP.6.0");
        }, function() {
          return new ActiveXObject("Msxml2.XMLHTTP.3.0");
        }, function() {
          return new ActiveXObject("Msxml2.XMLHTTP");
        }, function() {
          return new ActiveXObject("Microsoft.XMLHTTP");
        }
      ];
      return function() {
        var xmlFactory, _i, _len;
        for (_i = 0, _len = xmlHttpFactories.length; _i < _len; _i++) {
          xmlFactory = xmlHttpFactories[_i];
          try {
            return xmlFactory();
          } catch (_error) {

          }
        }
        return null;
      };
    })();
    makeRequest = function(options) {
      var httpRequest, requestUrl, _ref, _ref1, _ref2, _ref3, _ref4;
      requestUrl = options.url;
      httpRequest = getHttpRequest();
      options = options != null ? options : {};
      options.success = (_ref = options.success) != null ? _ref : function() {};
      options.error = (_ref1 = options.error) != null ? _ref1 : function() {};
      options.contentType = (_ref2 = options.contentType) != null ? _ref2 : '';
      options.accept = (_ref3 = options.accept) != null ? _ref3 : '';
      options.data = (_ref4 = options.data) != null ? _ref4 : null;
      httpRequest.onreadystatechange = function() {
        if (httpRequest.readyState === 4) {
          switch (Math.floor(httpRequest.status / 100)) {
            case 2:
              return options.success(httpRequest.responseText);
            default:
              return options.error(httpRequest.responseText);
          }
        }
      };
      httpRequest.open((options.type ? options.type : 'GET'), requestUrl, true);
      httpRequest.setRequestHeader('Content-Type', options.contentType);
      httpRequest.setRequestHeader('Accept', options.accept);
      return httpRequest.send(options.data);
    };
    getJSON = function(url, success, error) {
      return makeRequest({
        url: url,
        type: 'GET',
        contentType: 'application/json',
        accept: 'application/json',
        success: function(data) {
          if (!success) {
            return;
          }
          if (data) {
            return success(JSON.parse(data));
          } else {
            return success();
          }
        },
        error: function(err) {
          if (!error) {
            return;
          }
          if (err) {
            return error(JSON.parse(err));
          } else {
            return error();
          }
        }
      });
    };
    postJSON = function(url, data, success, error) {
      return makeRequest({
        url: url,
        type: 'POST',
        contentType: 'application/json',
        accept: 'application/json',
        data: data,
        success: function(data) {
          if (!success) {
            return;
          }
          if (data) {
            return success(JSON.parse(data));
          } else {
            return success();
          }
        },
        error: function(err) {
          if (!error) {
            return;
          }
          if (err) {
            return error(JSON.parse(err));
          } else {
            return error();
          }
        }
      });
    };
    return {
      make: makeRequest,
      getJSON: getJSON,
      postJSON: postJSON
    };
  })();

}).call(this);

//# sourceMappingURL=http-request.map
